{
  "openapi": "3.0.0",
  "info": {
    "title": "awork API",
    "version": "1.3.0",
    "description": "This is the API documentation for awork.",
    "termsOfService": "https://www.awork.com/legal-and-privacy/privacy-policy-awork-app",
    "contact": {
      "name": "awork Support",
      "url": "https://support.awork.com",
      "email": "support@awork.com"
    }
  },
  "servers": [
    {
      "url": "https://api.awork.com/api/v1",
      "description": "awork Production"
    }
  ],
  "paths": {
    "/absenceregions": {
      "get": {
        "tags": [
          "AbsenceRegions"
        ],
        "summary": "Gets all the absence regions.",
        "description": "Gets all the absence regions of the workspace.\r\n            Depending on the user's permissions, the visibility of users assigned to the regions may vary.\r\n            Admin will see all users assigned to all regions.\r\n            Planner users with User Team Filter on (UserTeamsData) will only see same team users assigned to the regions.\r\n            Any other user will only see themselves assigned to the regions.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AbsenceRegionModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "AbsenceRegions"
        ],
        "summary": "Creates a new absence region.",
        "description": "Creates a new absence region.\r\n            An absence region is defined by an ISO 3166-1 alpha-2 country code and a location code.\r\n            There can be multiple absence regions for a country, but only one absence region for a country and location. (no duplicates)\r\n\r\n<Info title=\"Subscription Level\">This endpoint requires the Standard plan or higher.</Info>\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `user-planning-data:write` permissions.</Check>",
        "requestBody": {
          "description": "The model to create the absence region.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbsenceRegionForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceRegionModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "user-planning-data": "write"
        },
        "x-subscriptionlevel": {
          "minimumPlan": "standard"
        }
      }
    },
    "/absenceregions/countries": {
      "get": {
        "tags": [
          "AbsenceRegions"
        ],
        "summary": "List of supported countries for absence regions.",
        "description": "Returns a list of supported countries for absence regions.\r\n            A country is defined by an ISO 3166-1 alpha-2 country code.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AbsenceRegionCountry"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/absenceregions/countries/{countryCode}/locations": {
      "get": {
        "tags": [
          "AbsenceRegions"
        ],
        "summary": "List of locations for a country.",
        "description": "Returns a list of all the locations of a country, expressed as ISO 3166-2 codes.\r\n            It will include the regions and subregions (sublocations) of the country if available.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "countryCode",
            "in": "path",
            "description": "The ISO 3166-1 alpha-2 country code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AbsenceRegionLocation"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/absenceregions/me/assign": {
      "put": {
        "tags": [
          "AbsenceRegions"
        ],
        "summary": "Assign/remove current user to/from an absence region.",
        "description": "Assigns or removes the current user to/from an absence region.\r\n            A user can be assigned to only one absence region.\r\n            As such, if a user is already assigned to an absence region, he will be removed from the previous one and assigned to the new one.\r\n            Providing a null region id will remove the user from any absence region.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The model assign users to the region.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignUserToAbsenceRegionForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/absenceregions/users/assign": {
      "put": {
        "tags": [
          "AbsenceRegions"
        ],
        "summary": "Assign/remove users to an absence region.",
        "description": "Only an admin or a user with UserPlanningData(write) permissions can assign/remove any user to an absence region.\r\n            A user can be assigned to only one absence region.\r\n            As such, if a user is already assigned to an absence region, he will be removed from the previous one and assigned to the new one.\r\n            Providing an empty list of user ids will remove all users from the absence region.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `user-planning-data:write` permissions.</Check>",
        "requestBody": {
          "description": "The model assign/remove users to/from the region.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignUsersToAbsenceRegionForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "user-planning-data": "write"
        }
      }
    },
    "/absenceregions/{absenceRegionId}": {
      "delete": {
        "tags": [
          "AbsenceRegions"
        ],
        "summary": "Deletes an absence region.",
        "description": "Deletes an absence region by id, unassigning all users from the absence region.\r\n            If there are workspace absences related to the region, they will be deleted as well.\r\n            If the absence region is the default absence region, it will simply be deleted. (no default absence region).\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `user-planning-data:write` permissions.</Check>",
        "parameters": [
          {
            "name": "absenceRegionId",
            "in": "path",
            "description": "The id of the absence region to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "user-planning-data": "write"
        }
      },
      "get": {
        "tags": [
          "AbsenceRegions"
        ],
        "summary": "Get an absence region by id.",
        "description": "Get an absence region by id.\r\n            It will include the details of the public holidays for the country and location.\r\n            Depending on the user's permissions, the visibility of users assigned to the regions may vary.\r\n            Admin will see all users assigned to all regions.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "absenceRegionId",
            "in": "path",
            "description": "The id of the absence region to fetch.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceRegionModelWithHolidayDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "AbsenceRegions"
        ],
        "summary": "Updates an absence region.",
        "description": "Updates an absence region.\r\n            It is possible to update the name, country code, location code, and default status of an absence region.\r\n            The name of the absence region must be unique.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `user-planning-data:write` permissions.</Check>",
        "parameters": [
          {
            "name": "absenceRegionId",
            "in": "path",
            "description": "The id of the absence region to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the absence region.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbsenceRegionForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsenceRegionModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "user-planning-data": "write"
        }
      }
    },
    "/absences": {
      "get": {
        "tags": [
          "Absences"
        ],
        "summary": "Returns all absences.",
        "description": "Admin or user planning data permissions are required, \r\notherwise only the absences of the current user are returned.",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Absence"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ]
      },
      "post": {
        "tags": [
          "Absences"
        ],
        "summary": "Creates a new absence.",
        "description": "User planning data permissions are required if the calling user\r\nis not the owner of the absence or admin.\r\nThe startOn and endOn get rounded to 00:00:00, 12:00:00, or 23:59:59 in UTC.\r\nThese values can be used to set a half-day (pre or post mid-day) absence, or absences that start or end at mid-day.\r\nThe end date needs to be the same or after the start date.\r\n\r\n<Info title=\"Subscription Level\">This endpoint requires the Standard plan or higher.</Info>",
        "requestBody": {
          "description": "The absence to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbsenceForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AbsenceForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Absence"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-subscriptionlevel": {
          "minimumPlan": "standard"
        }
      }
    },
    "/absences/{absenceId}": {
      "delete": {
        "tags": [
          "Absences"
        ],
        "summary": "Deletes the absence with the specified id.",
        "description": "User planning data permissions are required if the calling user\r\nis not the owner of the absence or admin.",
        "parameters": [
          {
            "name": "absenceId",
            "in": "path",
            "description": "The id of the absence to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ]
      },
      "get": {
        "tags": [
          "Absences"
        ],
        "summary": "Returns the absence with the specified id.",
        "description": "User planning data permissions are required if the calling user\r\nis not the owner of the absence or admin.",
        "parameters": [
          {
            "name": "absenceId",
            "in": "path",
            "description": "The id of the absence to get.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Absence"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ]
      },
      "put": {
        "tags": [
          "Absences"
        ],
        "summary": "Updates the absence with the specified id.",
        "description": "User planning data permissions are required if the calling user\r\nis not the owner of the absence or admin.\r\nThe startOn and endOn get rounded to 00:00:00, 12:00:00, or 23:59:59 in UTC.\r\nThese values can be used to set a half-day (pre or post mid-day) absence, or absences that start or end at mid-day.\r\nThe end date needs to be the same or after the start date.",
        "parameters": [
          {
            "name": "absenceId",
            "in": "path",
            "description": "The id of the absence to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model with the updated values.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AbsenceForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AbsenceForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Absence"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ]
      }
    },
    "/accounts/{accountId}": {
      "put": {
        "tags": [
          "Accounts"
        ],
        "summary": "Updates the account with the specified id.",
        "description": "Updates the account with the specified id.\r\nDoes not update the external account of the user.\r\nUse the 'accounts/connectToSocialAccount' or 'accounts/disconnectToSocialAccount' endpoints instead.\r\nIf the email of the account is changed, the email will not be changed immediately but a verification email will be sent to the new email address.\r\nThe email will only be changed after the user has verified the new email address.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "The id of the account.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the account.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AccountForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/api/v1/sync/{entityType}": {
      "get": {
        "tags": [
          "Sync"
        ],
        "summary": "Gets sync data for the specified entity type.",
        "description": "Returns a sync response containing updated entities and deleted entity Ids.\r\n            Returns only entities modified/deleted since the provided timestamp.\r\n            Returns no connected entities for now, only the ones of your own workspace but respects the permissions.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The type of entity to sync (supported: \"typeofwork\").",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Required timestamp to get changes since that time.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectSyncResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/apiusers": {
      "get": {
        "tags": [
          "ApiUsers"
        ],
        "summary": "Returns all API users.",
        "description": "Returns all API users.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:read` permissions.</Check>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiUser"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "read"
        }
      },
      "post": {
        "tags": [
          "ApiUsers"
        ],
        "summary": "Creates a new API user.",
        "description": "Creates a new API user.\r\nBeware: API users will also be returned in the /users response when including\r\narchived users.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "requestBody": {
          "description": "The API user to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserPostForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserPostForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUser"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/apiusers/{apiUserId}": {
      "delete": {
        "tags": [
          "ApiUsers"
        ],
        "summary": "Deletes the API user with the specified id.",
        "description": "Deletes the API user with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "apiUserId",
            "in": "path",
            "description": "The id of the API user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      },
      "get": {
        "tags": [
          "ApiUsers"
        ],
        "summary": "Returns the API user with the specified id.",
        "parameters": [
          {
            "name": "apiUserId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUser"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "read"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:read` permissions.</Check>"
      },
      "put": {
        "tags": [
          "ApiUsers"
        ],
        "summary": "Updates the API user with the specified id.",
        "description": "Updates the API user with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "apiUserId",
            "in": "path",
            "description": "The id of the API user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The new API user values.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ApiUserForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiUser"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/autopilot/availablealerts": {
      "get": {
        "tags": [
          "Autopilot"
        ],
        "summary": "Returns all available alerts for autopilots.",
        "description": "Returns all available alerts for autopilots.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "behind_schedule",
                  "overdue"
                ]
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/autopilot/{autopilotId}": {
      "get": {
        "tags": [
          "Autopilot"
        ],
        "summary": "Returns the autopilot with the specified id.",
        "description": "Returns the autopilot including its alerts.\r\nTo get the autopilot data the user needs to be the owner of the project or 'read' permissions\r\nof the feature 'project-master-data' globally or in his project role.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "autopilotId",
            "in": "path",
            "description": "The id of the autopilot.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Autopilot"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/clientapplications": {
      "get": {
        "tags": [
          "ClientApplications"
        ],
        "summary": "Returns all client applications.",
        "description": "Returns all client applications.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:read` permissions.</Check>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientApplication"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "read"
        }
      },
      "post": {
        "tags": [
          "ClientApplications"
        ],
        "summary": "Registers a new client application.",
        "description": "Registers a new client application.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "requestBody": {
          "description": "The client application model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientApplicationCreateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientApplicationCreateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/clientapplications/{clientId}": {
      "delete": {
        "tags": [
          "ClientApplications"
        ],
        "summary": "Deletes the specified client application.",
        "description": "Deletes the specified client application.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "The id of the client application.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "googlesheet"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      },
      "get": {
        "tags": [
          "ClientApplications"
        ],
        "summary": "Returns the client application with the specified id.",
        "description": "Returns the client application with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:read` permissions.</Check>",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "The id of the client application.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "googlesheet"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientApplication"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "read"
        }
      },
      "put": {
        "tags": [
          "ClientApplications"
        ],
        "summary": "Updates the client application with the specified id.",
        "description": "Updates the client application with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "The id of the client application.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "integration"
          }
        ],
        "requestBody": {
          "description": "The client application model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientApplicationUpdateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientApplication"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/clientapplications/{clientId}/generateapikey": {
      "post": {
        "tags": [
          "ClientApplications"
        ],
        "summary": "Generates an API key for the specified client application.",
        "description": "Generates an API key for the specified client application.\r\nRequires an API user.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:read` permissions.</Check>",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "The id of the client application.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "googlesheet"
          }
        ],
        "requestBody": {
          "description": "The model to generate an API key.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientApplicationApiKeyForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ClientApplicationApiKeyForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "read"
        }
      }
    },
    "/clientapplications/{clientId}/generatesecret": {
      "post": {
        "tags": [
          "ClientApplications"
        ],
        "summary": "Generates a new secret for the specified client application.",
        "description": "Generates a new secret for the specified client application.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "clientId",
            "in": "path",
            "description": "The id of the client application.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "googlesheet"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientApplicationGeneratePasswordResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/comments/{commentId}/externalfiles": {
      "post": {
        "tags": [
          "CommentFiles"
        ],
        "summary": "Endpoint to batch create external files without uploading.",
        "description": "Endpoint to create file infos with batch operation.\r\nCreated file infos don't have a version.",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "List of file forms.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalFileForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalFileForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/comments/{commentId}/files": {
      "delete": {
        "tags": [
          "CommentFiles"
        ],
        "summary": "Deletes the files of the specified comment.",
        "description": "Deletes the metadata and the different versions of the files.",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "CommentFiles"
        ],
        "summary": "Returns all files of the comment with the specified id.",
        "description": "Returns all file metadata of the comment with the specified id.",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileInfo"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CommentFiles"
        ],
        "summary": "Creates a new comment file for the comment with the specified id..",
        "description": "Uploads a new comment file for the comment with the specified id.\r\nUse this to upload a file as a form value along with the basic file meta data.\r\nThe file size must not exceed 1GB.",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/comments/{commentId}/files/byurl": {
      "post": {
        "tags": [
          "CommentFiles"
        ],
        "summary": "Uploads a new file by providing an url.",
        "description": "The file needs to be a public available url.\r\nThe file size must not exceed 100MB.",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The url, name and description of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilePostForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FilePostForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/comments/{commentId}/files/{fileId}": {
      "delete": {
        "tags": [
          "CommentFiles"
        ],
        "summary": "Deletes the comment file with the specified id.",
        "description": "Deletes the metadata and the different versions of the file.",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "CommentFiles"
        ],
        "summary": "Returns the file with the specified id of the comment with the specified id.",
        "description": "Returns the file metadata of the comment with the specified id.",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CommentFiles"
        ],
        "summary": "Updates the metadata of the comment file with the specified id.",
        "description": "Updates the metadata of the comment file with the specified id.",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the file with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/comments/{commentId}/files/{fileId}/changeentity": {
      "post": {
        "tags": [
          "CommentFiles"
        ],
        "summary": "Changes the comment this file belongs to.",
        "description": "Changes the comment this file belongs to.\r\nSwitch to the specified comment or to a global file\r\nif the 'EntityId' of the model is set to null.",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the entity information of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileEntityForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileEntityForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/comments/{commentId}/files/{fileId}/copy": {
      "post": {
        "tags": [
          "CommentFiles"
        ],
        "summary": "Copies the file to a new comment.",
        "description": "Copies the file to a new comment (meta and content).",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the entity information of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileCopyForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileCopyForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/comments/{commentId}/files/{fileId}/download": {
      "get": {
        "tags": [
          "CommentFiles"
        ],
        "summary": "Returns the content of the comment file with the specified id.",
        "description": "Returns the content of the comment file. Uses the latest file version.\r\nIf the comment file is an image and the width and height are set,\r\nthe image will be resized before it is returned.",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Set width to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Set height to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "description": "Whether to crop the image when resizing it.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/comments/{commentId}/files/{fileId}/pdf": {
      "get": {
        "tags": [
          "CommentFiles"
        ],
        "summary": "Returns the content of the file with the specified id as pdf.\r\ntype or conversion not possible.",
        "description": "Returns the content of the comment file. Uses the latest file version.",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "description": "If inline is false, content-disposition header is attachment.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/comments/{commentId}/files/{fileId}/shareurl": {
      "get": {
        "tags": [
          "CommentFiles"
        ],
        "summary": "Returns an url to share the file.",
        "description": "Returns a url to share the file.",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/comments/{commentId}/files/{fileId}/versions": {
      "get": {
        "tags": [
          "CommentFiles"
        ],
        "summary": "Returns all file versions of the specified comment file.",
        "description": "Returns all file versions of the specified comment file.",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileVersion"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CommentFiles"
        ],
        "summary": "Uploads a new version of the comment file with the specified id.",
        "description": "Uploads a new version of an comment file.\r\nUse this to upload a file as a form value along with the basic file meta data.\r\nThe file size must not exceed 1GB.",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVersion"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/comments/{commentId}/files/{fileId}/versions/{versionId}": {
      "get": {
        "tags": [
          "CommentFiles"
        ],
        "summary": "Returns the comment file version with the specified id.",
        "description": "Returns the comment file version with the specified id.",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The id of the file version.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVersion"
                }
              }
            }
          }
        }
      }
    },
    "/comments/{commentId}/files/{fileId}/versions/{versionId}/download": {
      "get": {
        "tags": [
          "CommentFiles"
        ],
        "summary": "Returns the content of the comment file version with the specified id.",
        "description": "Returns the content of the comment file version with the specified id.",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The id of the file version.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        }
      }
    },
    "/companies": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Returns all companies.",
        "description": "Returns all companies.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `company-master-data:read` permissions.</Check>",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Company"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "company-master-data": "read"
        }
      },
      "post": {
        "tags": [
          "Companies"
        ],
        "summary": "Creates a new company.",
        "description": "Creates a new company.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `company-master-data:write` permissions.</Check>",
        "requestBody": {
          "description": "The company to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "company-master-data": "write"
        }
      }
    },
    "/companies/deletetags": {
      "post": {
        "tags": [
          "CompanyTags"
        ],
        "summary": "Removes tag from all entities.",
        "description": "Removes tag from all projects.\r\nTo delete the tags the user needs 'write' permissions on the specified entity.\r\nReturns 204 NoContent if tag has been removed successfully.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The model to remove the tag.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTagForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTagForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/companies/industries": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Returns all company industries that are currently in use.",
        "description": "Returns all company industries that are currently in use.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `company-master-data:read` permissions.</Check>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "company-master-data": "read"
        }
      }
    },
    "/companies/tags": {
      "get": {
        "tags": [
          "CompanyTags"
        ],
        "summary": "Returns all tags that are currently in use.",
        "description": "Returns all tags that are currently in use ordered by count.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseTagModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/companies/{companyId}": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Returns the company with the specified id.",
        "description": "Returns the company with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `company-master-data:read` permissions.</Check>",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "company-master-data": "read"
        }
      },
      "put": {
        "tags": [
          "Companies"
        ],
        "summary": "Updates the company with the specified id.",
        "description": "Updates the company with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `company-master-data:write` permissions.</Check>",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The new company values.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "company-master-data": "write"
        }
      }
    },
    "/companies/{companyId}/addtags": {
      "post": {
        "tags": [
          "CompanyTags"
        ],
        "summary": "Adds a batch of new tags to the company with the specified id.",
        "description": "The request fails if one of the tags is invalid (e.g. empty or duplicate).\r\nTo create the tags the user needs 'write' permissions on the specified company.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to add tags.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseTagModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/companies/{companyId}/contactinfo": {
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Returns the contact infos of the company with the specified id.",
        "description": "Returns the contact infos of the company with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `company-master-data:read` permissions.</Check>",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactInfoForCompanies"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "company-master-data": "read"
        }
      },
      "post": {
        "tags": [
          "Companies"
        ],
        "summary": "Creates a new contact info for the company with the specified id.",
        "description": "Creates a new contact info for the company with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `company-master-data:write` permissions.</Check>",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The contact info to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactInfoForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactInfoForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfoForCompanies"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "company-master-data": "write"
        }
      }
    },
    "/companies/{companyId}/contactinfo/{contactInfoId}": {
      "delete": {
        "tags": [
          "Companies"
        ],
        "summary": "Deletes the contact info of the company with the specified id.",
        "description": "Deletes the contact info of the company with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `company-master-data:write` permissions.</Check>",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "contactInfoId",
            "in": "path",
            "description": "The id of the contact info.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "company-master-data": "write"
        }
      },
      "get": {
        "tags": [
          "Companies"
        ],
        "summary": "Returns the specified contact info of the company with the specified id.",
        "description": "Returns the specified contact info of the company with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `company-master-data:read` permissions.</Check>",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "contactInfoId",
            "in": "path",
            "description": "The id of the contact info.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfoForCompanies"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "company-master-data": "read"
        }
      },
      "put": {
        "tags": [
          "Companies"
        ],
        "summary": "Updates the contact info for the company with the specified id.",
        "description": "Updates the contact info for the company with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `company-master-data:write` permissions.</Check>",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "contactInfoId",
            "in": "path",
            "description": "The id of the contactInfo.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The contact info to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactInfoForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactInfoForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfoForCompanies"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "company-master-data": "write"
        }
      }
    },
    "/companies/{companyId}/delete": {
      "post": {
        "tags": [
          "Companies"
        ],
        "summary": "Deletes the company with the specified id.",
        "description": "There are several ways to delete a company.\r\n            Look into the property description of the post model to get detailed information.\r\n            <br />If the post is executed without a model, the default process 'delete-only-company' will be executed.\r\n            <br />For the operation 'delete-all-without-timeentries' project-master-data write permissions are required on all projects of the company.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `company-master-data:write` permissions.</Check>",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyDeleteForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "company-master-data": "write"
        }
      }
    },
    "/companies/{companyId}/deletetags": {
      "post": {
        "tags": [
          "CompanyTags"
        ],
        "summary": "Removes tags from the company with the specified id.",
        "description": "Removes tags from the project with the specified id.\r\nTo delete the tags the user needs 'write' permissions on the specified company.\r\nReturns 204 NoContent if all tags have been removed successfully.\r\nReturns 207 MultiStatus if at least one tag could not be removed, including the reasons.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to remove the tag.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteTagForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteTagForm"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/companies/{companyId}/externalfiles": {
      "post": {
        "tags": [
          "CompanyFiles"
        ],
        "summary": "Endpoint to batch create external files without uploading.",
        "description": "Endpoint to create file infos with batch operation.\r\nCreated file infos don't have a version.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "List of file forms.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalFileForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalFileForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{companyId}/files": {
      "delete": {
        "tags": [
          "CompanyFiles"
        ],
        "summary": "Deletes the files of the specified company.",
        "description": "Deletes the metadata and the different versions of the files.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "CompanyFiles"
        ],
        "summary": "Returns all files of the company with the specified id.",
        "description": "Returns all file metadata of the company with the specified id.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileInfo"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CompanyFiles"
        ],
        "summary": "Creates a new company file for the company with the specified id..",
        "description": "Uploads a new company file for the company with the specified id.\r\nUse this to upload a file as a form value along with the basic file meta data.\r\nThe file size must not exceed 1GB.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/companies/{companyId}/files/byurl": {
      "post": {
        "tags": [
          "CompanyFiles"
        ],
        "summary": "Uploads a new file by providing an url.",
        "description": "The file needs to be a public available url.\r\nThe file size must not exceed 100MB.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The url, name and description of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilePostForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FilePostForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{companyId}/files/{fileId}": {
      "delete": {
        "tags": [
          "CompanyFiles"
        ],
        "summary": "Deletes the company file with the specified id.",
        "description": "Deletes the metadata and the different versions of the file.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "CompanyFiles"
        ],
        "summary": "Returns the file with the specified id of the company with the specified id.",
        "description": "Returns the file metadata of the company with the specified id.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CompanyFiles"
        ],
        "summary": "Updates the metadata of the company file with the specified id.",
        "description": "Updates the metadata of the company file with the specified id.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the file with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{companyId}/files/{fileId}/changeentity": {
      "post": {
        "tags": [
          "CompanyFiles"
        ],
        "summary": "Changes the company this file belongs to.",
        "description": "Changes the company this file belongs to.\r\nSwitch to the specified company or to a global file\r\nif the 'EntityId' of the model is set to null.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the entity information of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileEntityForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileEntityForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{companyId}/files/{fileId}/copy": {
      "post": {
        "tags": [
          "CompanyFiles"
        ],
        "summary": "Copies the file to a new company.",
        "description": "Copies the file to a new company (meta and content).",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the entity information of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileCopyForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileCopyForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{companyId}/files/{fileId}/download": {
      "get": {
        "tags": [
          "CompanyFiles"
        ],
        "summary": "Returns the content of the company file with the specified id.",
        "description": "Returns the content of the company file. Uses the latest file version.\r\nIf the company file is an image and the width and height are set,\r\nthe image will be resized before it is returned.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Set width to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Set height to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "description": "Whether to crop the image when resizing it.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{companyId}/files/{fileId}/pdf": {
      "get": {
        "tags": [
          "CompanyFiles"
        ],
        "summary": "Returns the content of the file with the specified id as pdf.\r\ntype or conversion not possible.",
        "description": "Returns the content of the company file. Uses the latest file version.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "description": "If inline is false, content-disposition header is attachment.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{companyId}/files/{fileId}/shareurl": {
      "get": {
        "tags": [
          "CompanyFiles"
        ],
        "summary": "Returns an url to share the file.",
        "description": "Returns a url to share the file.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{companyId}/files/{fileId}/versions": {
      "get": {
        "tags": [
          "CompanyFiles"
        ],
        "summary": "Returns all file versions of the specified company file.",
        "description": "Returns all file versions of the specified company file.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileVersion"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CompanyFiles"
        ],
        "summary": "Uploads a new version of the company file with the specified id.",
        "description": "Uploads a new version of an company file.\r\nUse this to upload a file as a form value along with the basic file meta data.\r\nThe file size must not exceed 1GB.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVersion"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/companies/{companyId}/files/{fileId}/versions/{versionId}": {
      "get": {
        "tags": [
          "CompanyFiles"
        ],
        "summary": "Returns the company file version with the specified id.",
        "description": "Returns the company file version with the specified id.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The id of the file version.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVersion"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{companyId}/files/{fileId}/versions/{versionId}/download": {
      "get": {
        "tags": [
          "CompanyFiles"
        ],
        "summary": "Returns the content of the company file version with the specified id.",
        "description": "Returns the content of the company file version with the specified id.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The id of the file version.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        }
      }
    },
    "/companies/{companyId}/tags": {
      "get": {
        "tags": [
          "CompanyTags"
        ],
        "summary": "Returns the tags of the companies with the specified id.",
        "description": "Returns the tags of the company with the specified id ordered by name.\r\nTo read the tags the user needs 'read' permissions on the specified company.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseTagModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/companies/{companyId}/updatetags": {
      "post": {
        "tags": [
          "CompanyTags"
        ],
        "summary": "Updates a tag to the company with the specified id.",
        "description": "To update the tag the user needs 'write' permissions on the specified entity.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The model to add tags.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagUpdateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TagUpdateForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/customfielddefinitions": {
      "get": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Returns all custom field definitions.",
        "description": "The 'linkedProjectIds' are the project Ids that are linked to the custom field definition.\r\n                The 'linkedProjectIds' property will only be included when the 'includeLinkedProjectIds' parameter is set to 'true'.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "includeLinkedProjectIds",
            "in": "query",
            "description": "Whether to also include the linked project ids.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldDefinitionWithSelectionOptionsAndLinkedProjectIds"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Creates a new custom field definition.",
        "description": "Creates a new custom field definition. This custom field definition can then be linked to project templates and to tasks.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "requestBody": {
          "description": "The model containing the details for creating a new custom field definition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldDefinitionPostForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldDefinition"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/customfielddefinitions/{customFieldDefinitionId}": {
      "delete": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Deletes the custom field definition with the specified id.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "customFieldDefinitionId",
            "in": "path",
            "description": "The id of the custom field definition.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      },
      "put": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Updates an existing custom field definition with the specified id.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "customFieldDefinitionId",
            "in": "path",
            "description": "The id of the custom field definition.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the custom field definition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldDefinitionPutForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldDefinition"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/customfielddefinitions/{customFieldDefinitionId}/selectionoptions": {
      "post": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Creates a custom field selection option for an existing custom field definition.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "customFieldDefinitionId",
            "in": "path",
            "description": "The id of the custom field definition.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The form to create a custom field selection option.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldSelectionOptionsForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldDefinition"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/customfielddefinitions/{customFieldDefinitionId}/selectionoptions/{selectionOptionId}": {
      "delete": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Deletes a custom field selection option for an existing custom field definition.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "customFieldDefinitionId",
            "in": "path",
            "description": "The id of the custom field definition.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "selectionOptionId",
            "in": "path",
            "description": "The id of the selection option.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      },
      "put": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Updates a custom field selection option for an existing custom field definition.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "customFieldDefinitionId",
            "in": "path",
            "description": "The id of the custom field definition.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "selectionOptionId",
            "in": "path",
            "description": "The id of the selection option.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The form to update the custom field selection option.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldSelectionOptionsForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldDefinition"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/documents": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Returns all documents.",
        "description": "To retrieve a document, the user has to at least have 'read' permissions for the document.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "includeTrashedDocuments",
            "in": "query",
            "description": "Whether to also include trashed documents.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Creates a new document.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentPostForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/documents/trash/{documentId}/restore": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Restores the document with the specified id from the trash.",
        "description": "Please note that, after a successful response, this method will trigger a number of events that will\r\n            eventually update/recreate the document and the related entities such as document versions or its content.\r\n            <Check><b>Required Permissions</b>: The user has at least `manage` permissions for this document.</Check>",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document to restore.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "alsoRestoreChildren",
            "in": "query",
            "description": "Whether all children of this document should be restored.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/documents/{documentId}": {
      "delete": {
        "tags": [
          "Documents"
        ],
        "summary": "Deletes a document with the specified id, moving it to the trash section.",
        "description": "The document itself is deleted synchronously, while its children and related entities\r\n            are deleted asynchronously in the background if <paramref name=\"alsoDeleteChildren\" /> is true.\r\n            If <paramref name=\"alsoDeleteChildren\" /> is false, the children's parent references are updated to point to the deleted document's parent.\r\n            <Check><b>Required Permissions</b>: The user has at least `manage` permissions for this document.</Check>",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The document id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "alsoDeleteChildren",
            "in": "query",
            "description": "Whether all children of this document should be deleted.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Returns the document with the specified id.",
        "description": "<Check><b>Required Permissions</b>: The user has at least `read` permissions for this document.</Check>",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The document id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "Documents"
        ],
        "summary": "Updates the document with the specified id.",
        "description": "<Check><b>Required Permissions</b>: The user has at least `manage` permissions for this document.</Check>",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The document id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The document to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/documents/{documentId}/comments": {
      "delete": {
        "tags": [
          "DocumentComments"
        ],
        "summary": "Deletes all comments of the specified document.",
        "description": "Deletes all comments of the specified document.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "DocumentComments"
        ],
        "summary": "Returns all comments of the document with the specified id.",
        "description": "Returns all comments of the document with the specified id. The user needs read permissions on the document.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DocumentComments"
        ],
        "summary": "Creates a new comment on the document with the specified id.",
        "description": "Creates a new comment on the document with the specified id.\r\nThe user needs read permissions on the document to create a comment.\r\nA user can only create a comment for him/herself, except for admins and api users.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to create a comment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CommentForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{documentId}/comments/{commentId}": {
      "delete": {
        "tags": [
          "DocumentComments"
        ],
        "summary": "Deletes the comment with the specified id on the document with the specified id.",
        "description": "Deletes the comment with the specified id on the document with the specified id.\r\nThe delete includes the reactions of the comment.\r\nIf there are any replies to the comment, they will be deleted as well.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "DocumentComments"
        ],
        "summary": "Returns the comment with the specified id of the document with the specified id.",
        "description": "Returns the comment with the specified id of the document with the specified id.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comments.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DocumentComments"
        ],
        "summary": "Updates the comment with the specified id on the document with the specified id.",
        "description": "Updates the comment with the specified id on the document with the specified id.\r\nInReplyToCommentId is not allowed to be changed.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to update the comment with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentPutForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CommentPutForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{documentId}/comments/{commentId}/react": {
      "post": {
        "tags": [
          "DocumentComments"
        ],
        "summary": "Updates the reactions of the comment with the specified id on the document with the specified id.",
        "description": "Updates the reactions of the comment with the specified id on the document with the specified id.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to update the reactions of the comment with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReactionForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReactionForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/documents/{documentId}/content": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Returns the content of the current version of the document with the specified id.",
        "description": "<Check><b>Required Permissions</b>: The user has at least `read` permissions for this document.</Check>",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The document id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "streamAsFile",
            "in": "query",
            "description": "Whether the document's content should be streamed as a file.\r\n            By default, the document's content is returned in a model containing a property 'Content' holding the content as a string.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "Documents"
        ],
        "summary": "Updates the content of the document with the specified id.",
        "description": "<Check><b>Required Permissions</b>: The user has at least `manage` permissions for this document.</Check>",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The document id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DocumentContentForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/documents/{documentId}/contributors": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Adds a list of document contributors to a document with the specified id.",
        "description": "Recalculation of permissions for related entities considering the new document contributors\r\n            will be done in the background asynchronously.\r\n            <Check><b>Required Permissions</b>: The user has at least `manage` permissions for this document.</Check><Info>Adding document contributors will affect their access to the document.\r\n            Specifically the access of a particular user.</Info>",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The document id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The contributors.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContributorPostForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MinimalContributorModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/documents/{documentId}/contributors/{documentContributorId}": {
      "delete": {
        "tags": [
          "Documents"
        ],
        "summary": "Deletes the document contributor with the specified id.",
        "description": "Deletes the specific document contributor from a document. This operation cannot be performed on inherited document contributors, only explicit ones.\r\n            There will be recalculation of permissions for related entities considering the deleted document contributor.\r\n            <Check><b>Required Permissions</b>: The user has at least `manage` permissions for this document.</Check><Info>Deleting a document contributor will affect their access to the document.\r\n            Specifically the access of a particular user.</Info>",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The document to remove the contributor from, specified by its identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentContributorId",
            "in": "path",
            "description": "The document contributor to remove, specified by its identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "Documents"
        ],
        "summary": "Updates the document contributor with the specified id.",
        "description": "Updates the specific document contributor of a document.\r\n            There will be recalculation of permissions for related entities considering the updated document contributor.\r\n            <Check><b>Required Permissions</b>: The user has at least `manage` permissions for this document.</Check><Info>Updating a document contributor will affect their access to the document.\r\n            Specifically the access of a particular user.</Info>",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The document id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentContributorId",
            "in": "path",
            "description": "The document contributor id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The form.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributorForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MinimalContributorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/documents/{documentId}/duplicate": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Duplicates a document along its content, permissions, and children and descendants (document tree).",
        "description": "<Check><b>Required Permissions</b>: The user has at least `read` permissions for this document.</Check>",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The document id to of the document to duplicate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/documents/{documentId}/externalfiles": {
      "post": {
        "tags": [
          "DocumentFiles"
        ],
        "summary": "Endpoint to batch create external files without uploading.",
        "description": "Endpoint to create file infos with batch operation.\r\nCreated file infos don't have a version.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "List of file forms.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalFileForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalFileForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{documentId}/files": {
      "delete": {
        "tags": [
          "DocumentFiles"
        ],
        "summary": "Deletes the files of the specified document.",
        "description": "Deletes the metadata and the different versions of the files.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "DocumentFiles"
        ],
        "summary": "Returns all files of the document with the specified id.",
        "description": "Returns all file metadata of the document with the specified id.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileInfo"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DocumentFiles"
        ],
        "summary": "Creates a new document file for the document with the specified id..",
        "description": "Uploads a new document file for the document with the specified id.\r\nUse this to upload a file as a form value along with the basic file meta data.\r\nThe file size must not exceed 1GB.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/documents/{documentId}/files/byuploadid": {
      "post": {
        "tags": [
          "FileUpload"
        ],
        "summary": "Creates a file from an upload id.",
        "description": "After a file has been uploaded to an upload URL generated from the <see cref=\"T:Awork.Files.Service.Feature.FileUpload.Endpoints.PostGenerateUploadURL\" /> endpoint, this endpoint can be used to create a file document from the uploaded file by providing the upload id.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadByUploadIdForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{documentId}/files/byurl": {
      "post": {
        "tags": [
          "DocumentFiles"
        ],
        "summary": "Uploads a new file by providing an url.",
        "description": "The file needs to be a public available url.\r\nThe file size must not exceed 100MB.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The url, name and description of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilePostForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FilePostForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{documentId}/files/{fileId}": {
      "delete": {
        "tags": [
          "DocumentFiles"
        ],
        "summary": "Deletes the document file with the specified id.",
        "description": "Deletes the metadata and the different versions of the file.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "DocumentFiles"
        ],
        "summary": "Returns the file with the specified id of the document with the specified id.",
        "description": "Returns the file metadata of the document with the specified id.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DocumentFiles"
        ],
        "summary": "Updates the metadata of the document file with the specified id.",
        "description": "Updates the metadata of the document file with the specified id.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the file with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{documentId}/files/{fileId}/download": {
      "get": {
        "tags": [
          "DocumentFiles"
        ],
        "summary": "Returns the content of the document file with the specified id.",
        "description": "Returns the content of the document file. Uses the latest file version.\r\nIf the document file is an image and the width and height are set,\r\nthe image will be resized before it is returned.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Set width to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Set height to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "description": "Whether to crop the image when resizing it.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{documentId}/files/{fileId}/shareurl": {
      "get": {
        "tags": [
          "DocumentFiles"
        ],
        "summary": "Returns an url to share the file.",
        "description": "Returns a url to share the file.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{documentId}/files/{fileId}/versions": {
      "get": {
        "tags": [
          "DocumentFiles"
        ],
        "summary": "Returns all file versions of the specified document file.",
        "description": "Returns all file versions of the specified document file.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileVersion"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DocumentFiles"
        ],
        "summary": "Uploads a new version of the document file with the specified id.",
        "description": "Uploads a new version of an document file.\r\nUse this to upload a file as a form value along with the basic file meta data.\r\nThe file size must not exceed 1GB.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVersion"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/documents/{documentId}/files/{fileId}/versions/{versionId}": {
      "get": {
        "tags": [
          "DocumentFiles"
        ],
        "summary": "Returns the document file version with the specified id.",
        "description": "Returns the document file version with the specified id.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The id of the file version.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVersion"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{documentId}/files/{fileId}/versions/{versionId}/download": {
      "get": {
        "tags": [
          "DocumentFiles"
        ],
        "summary": "Returns the content of the document file version with the specified id.",
        "description": "Returns the content of the document file version with the specified id.",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The id of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The id of the file version.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{documentId}/teams": {
      "post": {
        "tags": [
          "Documents"
        ],
        "summary": "Adds a list of document teams to a document with the specified id.",
        "description": "Recalculation of permissions for related entities considering the new document teams\r\n            will be done in the background asynchronously.\r\n            <Check><b>Required Permissions</b>: The user has at least `manage` permissions for this document.</Check><Info>Adding document teams will affect their access to the document.\r\n            Specifically the access of a particular team.</Info>",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The document id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The forms.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityToTeamPostForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MinimalEntityToTeamModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/documents/{documentId}/teams/{documentToTeamId}": {
      "delete": {
        "tags": [
          "Documents"
        ],
        "summary": "Deletes the document team with the specified id.",
        "description": "Deletes the specific document team from a document. This operation cannot be performed on inherited document teams, only explicit ones.\r\n            There will be recalculation of permissions for related entities considering the deleted document team.\r\n            <Check><b>Required Permissions</b>: The user has at least `manage` permissions for this document.</Check><Info>Deleting a document team will affect their access to the document.\r\n            Specifically the access of a particular team.</Info>",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The document to remove a document to team-connection from, specified by its identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentToTeamId",
            "in": "path",
            "description": "The document to team to remove, specified by its identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "Documents"
        ],
        "summary": "Updates the document team with the specified id.",
        "description": "Updates the specific document team of a document.\r\n            There will be recalculation of permissions for related entities considering the updated document team.\r\n            <Check><b>Required Permissions</b>: The user has at least `manage` permissions for this document.</Check><Info>Updating a document team will affect their access to the document.\r\n            Specifically the access of a particular team.</Info>",
        "parameters": [
          {
            "name": "documentId",
            "in": "path",
            "description": "The document id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentToTeamId",
            "in": "path",
            "description": "The document to team id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The form.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityToTeamForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MinimalEntityToTeamModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/documentspaces": {
      "get": {
        "tags": [
          "DocumentSpaces"
        ],
        "summary": "Returns all document spaces.",
        "description": "To retrieve a document space, the user has to at least have 'read' permissions for the document space.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentSpaceModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "DocumentSpaces"
        ],
        "summary": "Creates a new document space.",
        "description": "<Check><b>Required Permissions</b>: The user has to be an admin.</Check>",
        "requestBody": {
          "description": "The document space to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentSpaceForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentSpaceModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/documentspaces/{documentSpaceId}": {
      "delete": {
        "tags": [
          "DocumentSpaces"
        ],
        "summary": "Deletes the document space with the specified id.",
        "description": "Corresponding documents and their related entities will be unrecoverably deleted in the background asynchronously.\r\n            <Check><b>Required Permissions</b>: The user has to be an admin.</Check>",
        "parameters": [
          {
            "name": "documentSpaceId",
            "in": "path",
            "description": "The document space id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentSpaceModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "get": {
        "tags": [
          "DocumentSpaces"
        ],
        "summary": "Returns the document space with the specified id.",
        "description": "<Check><b>Required Permissions</b>: The user has at least `read` permissions for this document space.</Check>",
        "parameters": [
          {
            "name": "documentSpaceId",
            "in": "path",
            "description": "The document space id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "DocumentSpaces"
        ],
        "summary": "Updates the document space with the specified id.",
        "description": "<Check><b>Required Permissions</b>: The user has to be an admin.</Check>\r\n\r\n<Info title=\"Subscription Level\">This endpoint requires the Professional plan or higher.</Info>",
        "parameters": [
          {
            "name": "documentSpaceId",
            "in": "path",
            "description": "The document space id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The document space to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentSpaceForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentSpaceModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        },
        "x-subscriptionlevel": {
          "minimumPlan": "professional"
        }
      }
    },
    "/documentspaces/{documentSpaceId}/contributors": {
      "post": {
        "tags": [
          "DocumentSpaces"
        ],
        "summary": "Adds a list of document space contributors to a document space with the specified id.",
        "description": "<Check><b>Required Permissions</b>: The user has to be an admin.</Check><Info>Adding document space contributors will affect their access to the document space and documents within that space.\r\n            Specifically the access of a particular user.</Info>",
        "parameters": [
          {
            "name": "documentSpaceId",
            "in": "path",
            "description": "The document space id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The contributor forms.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContributorPostForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MinimalContributorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/documentspaces/{documentSpaceId}/contributors/{documentSpaceContributorId}": {
      "delete": {
        "tags": [
          "DocumentSpaces"
        ],
        "summary": "Deletes the document space contributor with the specified id.",
        "description": "Deletes the specific document space contributor from a document space.\r\n            <Check><b>Required Permissions</b>: The user has to be an admin.</Check><Info>Deleting a document space contributor will affect their access to the document space and the documents within that space.\r\n            Specifically the access of a particular user.</Info>",
        "parameters": [
          {
            "name": "documentSpaceId",
            "in": "path",
            "description": "The document space to remove the contributor from, specified by its identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentSpaceContributorId",
            "in": "path",
            "description": "The document space contributor to remove, specified by its identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "DocumentSpaces"
        ],
        "summary": "Updates the document space contributor with the specified id.",
        "description": "Updates the specific document space contributor of a document space.\r\n            <Check><b>Required Permissions</b>: The user has to be an admin.</Check><Info>Updating a document space contributor will affect their access to the document space and documents within that space.\r\n            Specifically the access of a particular user.</Info>",
        "parameters": [
          {
            "name": "documentSpaceId",
            "in": "path",
            "description": "The document space id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentSpaceContributorId",
            "in": "path",
            "description": "The document space contributor id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The form.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContributorForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MinimalContributorModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/documentspaces/{documentSpaceId}/documents": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Returns all documents that belong to the document space with the specified id.",
        "description": "To retrieve a document, the user has to at least have 'read' permissions for the document within the document space.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "documentSpaceId",
            "in": "path",
            "description": "The document space id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/documentspaces/{documentSpaceId}/documents/trash": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Returns all deleted documents of the document space with the specified id.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "documentSpaceId",
            "in": "path",
            "description": "The document space id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/documentspaces/{documentSpaceId}/teams": {
      "post": {
        "tags": [
          "DocumentSpaces"
        ],
        "summary": "Adds a list of document space teams to a document space with the specified id.",
        "description": "<Check><b>Required Permissions</b>: The user has to be an admin.</Check><Info>Adding document space teams will affect their access to the document space and documents within that space.\r\n            Specifically the access of a particular team.</Info>",
        "parameters": [
          {
            "name": "documentSpaceId",
            "in": "path",
            "description": "The document space id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The forms.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EntityToTeamPostForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MinimalEntityToTeamModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/documentspaces/{documentSpaceId}/teams/{documentSpaceToTeamId}": {
      "delete": {
        "tags": [
          "DocumentSpaces"
        ],
        "summary": "Deletes the document space team with the specified id.",
        "description": "Deletes the specific document space team from a document space.\r\n            <Check><b>Required Permissions</b>: The user has to be an admin.</Check><Info>Deleting a document space team will affect their access to the document space and the documents within that space.\r\n            Specifically the access of a particular team.</Info>",
        "parameters": [
          {
            "name": "documentSpaceId",
            "in": "path",
            "description": "The document space to remove a document space to team-connection from, specified by its identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentSpaceToTeamId",
            "in": "path",
            "description": "The document space to team to remove, specified by its identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "DocumentSpaces"
        ],
        "summary": "Updates the document space team with the specified id.",
        "description": "Updates the specific document space team of a document space.\r\n            <Check><b>Required Permissions</b>: The user has to be an admin.</Check><Info>Updating a document space team will affect their access to the document space and documents within that space.\r\n            Specifically the access of a particular team.</Info>",
        "parameters": [
          {
            "name": "documentSpaceId",
            "in": "path",
            "description": "The document space id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentSpaceToTeamId",
            "in": "path",
            "description": "The document space to team id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The form.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityToTeamForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MinimalEntityToTeamModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/files/generateuploadurl": {
      "post": {
        "tags": [
          "FileUpload"
        ],
        "summary": "Generates a URL to upload a file to.",
        "description": "Generates a URL that can be used to upload a file. Use the returned upload id to create a file entry. See <see cref=\"T:Awork.Files.Service.Feature.FileUpload.Endpoints.PostUploadByUploadId\" /> for more information.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateUploadUrlResponseModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/files/images/companies/{companyId}": {
      "delete": {
        "tags": [
          "Images"
        ],
        "summary": "Deletes the profile image of the company with the specified id.",
        "description": "Deletes the profile image of the company with the specified id.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Returns the image of the company with the specified id.",
        "description": "Returns the image of the company with the specified id.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Set width to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Set height to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "description": "Whether to crop the image when resizing it.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Uploads a new profile image.",
        "description": "The profile image file needs to be sent in the body as multipart data.\r\nThe file size must not exceed 100MB.",
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "The id of the company the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/files/images/contactpersons/{contactpersonId}": {
      "delete": {
        "tags": [
          "Images"
        ],
        "summary": "Deletes the profile image of the contactperson with the specified id.",
        "description": "Deletes the profile image of the contactperson with the specified id.",
        "parameters": [
          {
            "name": "contactpersonId",
            "in": "path",
            "description": "The id of the contactperson the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Returns the image of the contactperson with the specified id.",
        "description": "Returns the image of the contactperson with the specified id.",
        "parameters": [
          {
            "name": "contactpersonId",
            "in": "path",
            "description": "The id of the contactperson the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Set width to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Set height to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "description": "Whether to crop the image when resizing it.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Uploads a new profile image.",
        "description": "The profile image file needs to be sent in the body as multipart data.\r\nThe file size must not exceed 100MB.",
        "parameters": [
          {
            "name": "contactpersonId",
            "in": "path",
            "description": "The id of the contactperson the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/files/images/projects/{projectId}": {
      "delete": {
        "tags": [
          "Images"
        ],
        "summary": "Deletes the profile image of the project with the specified id.",
        "description": "Deletes the profile image of the project with the specified id.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Returns the image of the project with the specified id.",
        "description": "Returns the image of the project with the specified id.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Set width to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Set height to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "description": "Whether to crop the image when resizing it.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Uploads a new profile image.",
        "description": "The profile image file needs to be sent in the body as multipart data.\r\nThe file size must not exceed 100MB.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/files/images/projecttemplates/{projecttemplateId}": {
      "delete": {
        "tags": [
          "Images"
        ],
        "summary": "Deletes the profile image of the projecttemplate with the specified id.",
        "description": "Deletes the profile image of the projecttemplate with the specified id.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Returns the image of the projecttemplate with the specified id.",
        "description": "Returns the image of the projecttemplate with the specified id.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Set width to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Set height to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "description": "Whether to crop the image when resizing it.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Uploads a new profile image.",
        "description": "The profile image file needs to be sent in the body as multipart data.\r\nThe file size must not exceed 100MB.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/files/images/users/{userId}": {
      "delete": {
        "tags": [
          "Images"
        ],
        "summary": "Deletes the profile image of the user with the specified id.",
        "description": "Deletes the profile image of the user with the specified id.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Returns the image of the user with the specified id.",
        "description": "Returns the image of the user with the specified id.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Set width to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Set height to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "description": "Whether to crop the image when resizing it.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Uploads a new profile image.",
        "description": "The profile image file needs to be sent in the body as multipart data.\r\nThe file size must not exceed 100MB.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/files/images/workspaces/{workspaceId}": {
      "delete": {
        "tags": [
          "Images"
        ],
        "summary": "Deletes the profile image of the workspace with the specified id.",
        "description": "Deletes the profile image of the workspace with the specified id.",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Returns the image of the workspace with the specified id.",
        "description": "Returns the image of the workspace with the specified id.",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Set width to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Set height to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "description": "Whether to crop the image when resizing it.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "Uploads a new profile image.",
        "description": "The profile image file needs to be sent in the body as multipart data.\r\nThe file size must not exceed 100MB.",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/files/images/{entityType}": {
      "get": {
        "tags": [
          "SharedFiles"
        ],
        "summary": "Returns the public profile image.",
        "description": "Returns the public available profile image of a user/workspace or a default image if none is available.\r\nFor users, the default is a generated image of the user's initials.",
        "parameters": [
          {
            "name": "entityType",
            "in": "path",
            "description": "The entity type for which we are requesting the image. Can be 'user' or 'workspace'",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "The token to allow access.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ]
      }
    },
    "/files/{fileId}/download": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Returns the content of the file with the specified id.",
        "description": "Returns the content of the latest file version.\r\nIf the file is an image and the width and height are set,\r\nthe image will resized before it is returned.\r\nThe get the content it is necessary to have the 'read' permissions on the\r\nentity the file is related to.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Set width to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Set height to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "description": "Whether to crop the image when resizing it.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "enlarge",
            "in": "query",
            "description": "Whether to enlarge the image if the width/height are bigger than the original image.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "inline",
            "in": "query",
            "description": "If inline is true, content-disposition header is inline, else it is attachment.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/files/{fileId}/pdf": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Returns the content of the file with the specified id as pdf.",
        "description": "Returns the content of the latest file version as pdf.\r\nAll kinds of MS Office document types are supported.\r\nTo get the content you must have the 'read' permissions on the\r\nentity the file is related to.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "description": "If inline is true, content-disposition header is inline, else it is attachment.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/invitations": {
      "post": {
        "tags": [
          "Invitations"
        ],
        "summary": "Invites a user to the workspace.",
        "description": "Invites the user with the email address to the workspace with the specified id.\r\nSends an invitation email to the user with a link to accept the invitation.\r\nFor automated invitation flows, sending the email can be skipped by setting the\r\n'skipSendingEmail' flag to 'true'.\r\nAdditionally, the invitation code, which is valid for 24 hours,\r\nis returned so that the caller can accept the invitation right away.",
        "requestBody": {
          "description": "The model to invite a user to the workspace.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invitation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Invitation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvitationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ]
      }
    },
    "/invitations/accept": {
      "post": {
        "tags": [
          "Invitations"
        ],
        "summary": "Accepts the invitation with the invitation code.",
        "requestBody": {
          "description": "The invitation code received when creating the invitation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptInvitation"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptInvitation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ]
      }
    },
    "/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns the currently logged-in user and workspace.",
        "description": "Returns the currently logged-in user, including workspace information.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAndWorkspace"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/allavailabletasks": {
      "get": {
        "tags": [
          "AssignedTasks"
        ],
        "summary": "Returns all tasks the user is allowed to see.",
        "description": "Returns all tasks the user is allowed to see. This contains\r\nproject tasks if the user has \"project-planning\" permissions,\r\nall assigned tasks and also\r\nprivate tasks created by the user and assigned to other users.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user. Not required on the /me endpoint.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/assignedtasks": {
      "get": {
        "tags": [
          "AssignedTasks"
        ],
        "summary": "Returns all tasks assigned to the user.",
        "description": "Returns all tasks assigned to a user.\r\nIf a user gets his own tasks, the private tasks are part of the result as well.\r\nIf you need only tasks of projects in status 'progress', set the 'inProgress' parameter to 'true'.\r\nThe assigned on from and to parameters are optional, but both must be provided if you want to use the filter.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user. Not required on the /me endpoint.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "inProgress",
            "in": "query",
            "description": "Whether the project of a task is in progress or not.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "assignedOnFrom",
            "in": "query",
            "description": "The value to filter the task assignments for. If this value is set, tasks are returned\r\nonly when the assignment date for the provided userId is greater or equal.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "assignedOnTo",
            "in": "query",
            "description": "The value to filter the task assignments for. If this value is set, tasks are returned only\r\nwhen the assignment date for the provided userId is less or equal.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/assignedtasks/{taskId}": {
      "get": {
        "tags": [
          "AssignedTasks"
        ],
        "summary": "Returns the assigned task with the specified id.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user. Not required on the /me endpoint.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>"
      }
    },
    "/me/dashboards": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Returns the dashboards of the current user.",
        "description": "Returns the dashboards of the current user.\r\n\r\n<Check title=\"Required Permissions\">The user must be the creator.</Check>",
        "parameters": [
          {
            "name": "includeWidgets",
            "in": "query",
            "description": "Include the widgets of the dashboards in the results. Not required. False by default.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dashboard"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "owner": "true"
        }
      }
    },
    "/me/otherprivatetasks": {
      "get": {
        "tags": [
          "PrivateTasks"
        ],
        "summary": "Returns all private tasks that a user created and assigned to someone else.",
        "description": "Private tasks are always created for the current user but can be reassigned to other users afterwards.\r\nThis route returns all private tasks that were originally created by the user but were reassigned to someone else.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user. Not required when using the /me route.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/otherprivatetasks/{taskId}": {
      "get": {
        "tags": [
          "PrivateTasks"
        ],
        "summary": "Returns a private tasks that a user created and assigned to someone else.",
        "description": "Private tasks are always created for the current user but can be reassigned to other users afterwards.\r\nThis route returns all private tasks that were origianally created by the user but were reassigned to someone else.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user. Not required when using the /me route.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the private task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/otherprivatetasks/{taskId}/checklistitems": {
      "get": {
        "tags": [
          "ChecklistItems"
        ],
        "summary": "Returns the checklist items for a private task with the specified id.",
        "description": "The user needs to be the creator of the task.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user. Not required when using the /me route.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItem"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/otherprivatetasks/{taskId}/checklistitems/{checklistItemId}": {
      "get": {
        "tags": [
          "ChecklistItems"
        ],
        "summary": "Returns a checklist item for a private task with the specified id.",
        "description": "The user needs to be the creator of the task.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user. Not required when using the /me route.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "checklistItemId",
            "in": "path",
            "description": "The id of the checklist item.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistItem"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/permissions": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Returns the permissions of the currently logged-in user.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPermissionInfoExternal"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>"
      }
    },
    "/me/privatedocuments": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Returns the requesting user's private documents.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/privatedocuments/trash": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Returns the requesting user's private deleted documents.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/privatetasks": {
      "get": {
        "tags": [
          "PrivateTasks"
        ],
        "summary": "Returns all private tasks of the user with the specified id.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user. Not required when using the /me route.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>"
      }
    },
    "/me/privatetasks/tags": {
      "get": {
        "tags": [
          "PrivateTasks"
        ],
        "summary": "Returns all tags of the private tasks.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseTagModelWithCount"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>"
      }
    },
    "/me/privatetasks/taskstatuses": {
      "get": {
        "tags": [
          "PrivateTasks"
        ],
        "summary": "Returns the task statuses for private tasks.",
        "description": "Returns the task statuses for private tasks.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskStatus"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/privatetasks/{taskId}": {
      "get": {
        "tags": [
          "PrivateTasks"
        ],
        "summary": "Returns the private task with the specified id.",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user. Not required when using the /me route.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>"
      }
    },
    "/me/privatetasks/{taskId}/checklistitems": {
      "get": {
        "tags": [
          "ChecklistItems"
        ],
        "summary": "Returns the checklist for a private task with the specified id.",
        "description": "The user needs to be assigned to the task.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user. Not required when using the /me route.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItem"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/privatetasks/{taskId}/checklistitems/{checklistItemId}": {
      "get": {
        "tags": [
          "ChecklistItems"
        ],
        "summary": "Returns a checklist item for a private task with the specified id.",
        "description": "The user needs to be assigned to the task.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user. Not required when using the /me route.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "checklistItemId",
            "in": "path",
            "description": "The id of the checklist item.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistItem"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/projecttasks": {
      "get": {
        "tags": [
          "ProjectTasks"
        ],
        "summary": "Returns all project tasks that the current user can see.",
        "description": "Returns the project tasks for which the current user has read permissions.\r\nThe returned tasks depend on the global permissions and on the projects the\r\nuser is a member of.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/shareddocuments": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Returns all documents that were shared with the requesting user.",
        "description": "This includes documents where the user has been explicitly granted permissions,\r\n            is part of a team with read permissions, or is part of the workspace with read permissions.\r\n            Excludes documents where the user already has permissions from the space they're in,\r\n            the project they're in, or when they're the user's own private documents.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/tasks/tags": {
      "get": {
        "tags": [
          "AssignedTasks"
        ],
        "summary": "Returns all tags the user is allowed to see.\r\nYou can filter the tags by task model query constraints.",
        "description": "Returns all tags from the available tasks of the user ordered by name.\r\nThe user making the request needs to be assigned to the task or needs\r\nread permissions on the feature \"project-planning-data\" for project tasks or\r\nread permissions on the \"entity-master-data\" of the entity of the task.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user. Not required on the me/ endpoint.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseTagModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/taskviews": {
      "get": {
        "tags": [
          "TaskViews"
        ],
        "summary": "Returns all task views that the user subscribed to.",
        "description": "Returns all task views that the current user subscribed to.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskView"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "TaskViews"
        ],
        "summary": "Creates a new task view and directly subscribes the user to it.",
        "description": "Creates a new task view. The user will automatically subscribe to it in the process.\r\nIf the provided filter string is invalid the request will fail with status 400.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The model to create the task view.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskViewForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskViewForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskView"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/taskviews/subscribe": {
      "post": {
        "tags": [
          "TaskViews"
        ],
        "summary": "Subscribes the current user to a shared task view.",
        "description": "Subscribes the user to a shared task view.\r\nAfterwards the user can retrieve the matching tasks from /me/taskViews/id/tasks.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The model for the subscription business operation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskViewSubscriptionForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskViewSubscriptionForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/taskviews/unsubscribe": {
      "post": {
        "tags": [
          "TaskViews"
        ],
        "summary": "Terminates a subscription of a user to a shared task view.",
        "description": "Removes the subscription from a user to a task view. Unsunscribing only works for shared\r\ntask views.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The model for the unsubscription business operation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskViewSubscriptionForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskViewSubscriptionForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/taskviews/{taskViewId}": {
      "delete": {
        "tags": [
          "TaskViews"
        ],
        "summary": "Deletes an existing task view that is specified by an id.",
        "description": "Deletes a task view. This also removes all subscriptions of the task view.\r\nShared task views can be deleted by the original author or users with admin permissions.\r\nPrivate task views can only be deleted by the original author.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskViewId",
            "in": "path",
            "description": "The id to specify the task view.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "get": {
        "tags": [
          "TaskViews"
        ],
        "summary": "Returns a single task view from a user.",
        "description": "Returns one task view that is specified by the id that the current user subscribed to.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskViewId",
            "in": "path",
            "description": "The task view id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskView"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "TaskViews"
        ],
        "summary": "Updates an existing task view.",
        "description": "Updates an existing task view.\r\nIf the provided filter string is invalid the request will fail with status 400.\r\nOnly the original author can update a non-shared task view. Shared task views can only be updated by the\r\noriginal author or someone with project planning permissions.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskViewId",
            "in": "path",
            "description": "The id of the task view that will be updated.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the task view.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskViewPutForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskViewPutForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskView"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/taskviews/{taskViewId}/tasks": {
      "get": {
        "tags": [
          "TaskViews"
        ],
        "summary": "Returns all the tasks of a task view.",
        "description": "Applies the filter of a task view the current user subscribed to and returns all matching tasks.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskViewId",
            "in": "path",
            "description": "The id of the task view.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/me/timeentries/last": {
      "get": {
        "tags": [
          "TimeEntries"
        ],
        "summary": "Returns the last time entry of a specified user.",
        "description": "The last time entry is always the last one that was started.\r\n            Time entries which are started in the future are ignored.\r\n            If a time entry does not have a start time, 12.00 am is automatically assumed as the start time\r\n            for comparison with other time entries from the same day.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or the creator.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user. Not required if the me route is used.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeTracking"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "owner": "true"
        }
      }
    },
    "/me/timetracking/pause": {
      "post": {
        "tags": [
          "TimeTracking"
        ],
        "summary": "Pauses a running time tracking for a user.",
        "description": "If there is already a paused time tracking nothing happens. If there is no running time tracking, returns NoContent.\r\n\r\n<Check title=\"Required Permissions\">The user must be the creator.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user. Not required if the me route is used.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeTracking"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "owner": "true"
        }
      }
    },
    "/me/timetracking/resume": {
      "post": {
        "tags": [
          "TimeTracking"
        ],
        "summary": "Resumes a paused time tracking for a user.",
        "description": "If there is already a running time tracking nothing happens. If there is no running time tracking, returns NoContent.\r\n\r\n<Check title=\"Required Permissions\">The user must be the creator.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user. Not required if the me route is used.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeTracking"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "owner": "true"
        }
      }
    },
    "/me/timetracking/start": {
      "post": {
        "tags": [
          "TimeTracking"
        ],
        "summary": "Starts a new time tracking for a user.",
        "description": "If there is already a running/paused time tracking it will be stopped automatically in order to start the new one.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or the creator.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user. Not required if the me route is used.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to start a time tracking.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartTimeTrackingForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeTracking"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "owner": "true"
        }
      }
    },
    "/me/timetracking/stop": {
      "post": {
        "tags": [
          "TimeTracking"
        ],
        "summary": "Stops the currently running time tracking of the specified user.",
        "description": "There is no request body necessary for this operation.\r\n            For this operation to work there must be a running time tracking for the user.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or the creator.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The id of the user. Not required if the me route is used.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeTracking"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "owner": "true"
        }
      }
    },
    "/permissions/features": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Returns all available features.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "https://www.awork.com"
                ]
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>"
      }
    },
    "/permissions/projectfeatures": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Returns all available project features.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "https://www.awork.com"
                ]
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>"
      }
    },
    "/projectmilestones": {
      "get": {
        "tags": [
          "ProjectMilestones"
        ],
        "summary": "Returns all project milestones the user is allowed to see.",
        "description": "The user only gets returned all milestones of projects he has 'read' permissions\r\nof feature 'project-planning-data' for.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectMilestone"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "ProjectMilestones"
        ],
        "summary": "Creates a new project milestone.",
        "description": "The user needs 'write' permissions\r\nof feature 'project-planning-data' to get the data.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The model to create a project milestone.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectMilestonePostForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectMilestonePostForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMilestone"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projectmilestones/{milestoneId}": {
      "get": {
        "tags": [
          "ProjectMilestones"
        ],
        "summary": "Returns the specified project milestone.",
        "description": "The user needs 'read' permissions\r\nof feature 'project-planning-data' to get the data.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "milestoneId",
            "in": "path",
            "description": "The id of the milestone.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMilestone"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projectmilestones/{projectMilestoneId}": {
      "delete": {
        "tags": [
          "ProjectMilestones"
        ],
        "summary": "Deletes the project milestone with the specified id.",
        "description": "The user needs 'write' permissions\r\nof feature 'project-planning-data' to get the data.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectMilestoneId",
            "in": "path",
            "description": "The id of the project milestone.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "ProjectMilestones"
        ],
        "summary": "Updates the project milestone with the specified id.",
        "description": "The user needs 'write' permissions\r\nof feature 'project-planning-data' to get the data.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectMilestoneId",
            "in": "path",
            "description": "The id of the project milestone.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the project milestone.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectMilestonePutForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectMilestonePutForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMilestone"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projectroles": {
      "get": {
        "tags": [
          "ProjectRoles"
        ],
        "summary": "Returns all project roles.",
        "description": "Returns all project roles.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "includeMembers",
            "in": "query",
            "description": "If set, all the assigned members to that role a included in the response. Default is true.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectRole"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "ProjectRoles"
        ],
        "summary": "Creates a new project role.",
        "description": "Creates a new project role.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "requestBody": {
          "description": "The model used to create a project role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRoleForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRoleForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRole"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/projectroles/byuserid/{userId}": {
      "get": {
        "tags": [
          "ProjectRoles"
        ],
        "summary": "Returns all project roles of a user.",
        "description": "Returns all project roles of the specified user.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectRole"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projectroles/{projectRoleId}": {
      "get": {
        "tags": [
          "ProjectRoles"
        ],
        "summary": "Returns the project role with the specified id.",
        "description": "Returns the project role with the specified id.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectRoleId",
            "in": "path",
            "description": "The id of the project role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRole"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "ProjectRoles"
        ],
        "summary": "Updates the project role with the specified id.",
        "description": "Updates the project role with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectRoleId",
            "in": "path",
            "description": "The id of the project role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the project role with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRoleForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRoleForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectRole"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/projectroles/{projectRoleId}/delete": {
      "post": {
        "tags": [
          "ProjectRoles"
        ],
        "summary": "Deletes the project role with the specified id.",
        "description": "Deletes the project role with the specified id.\r\nWhen you want to delete a project role which is still in use,\r\nyou are required to specify which role the currently assigned members should be assigned to instead.\r\nIf the default role gets deleted, the migration role becomes the new default project role.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectRoleId",
            "in": "path",
            "description": "The id of the project role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to delete the project role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRoleDeleteForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRoleDeleteForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/projectroles/{projectRoleId}/permissions": {
      "get": {
        "tags": [
          "ProjectRoles"
        ],
        "summary": "Returns all permissions of the project role with the specified id.",
        "parameters": [
          {
            "name": "projectRoleId",
            "in": "path",
            "description": "The id of the project role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionOfProjectRole"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>"
      },
      "post": {
        "tags": [
          "ProjectRoles"
        ],
        "summary": "Creates, updates or deletes a permission of a project role with the specified id.",
        "description": "Creates, updates or deletes a permission of the project role.\r\nIf the permission already exist, and the 'AccessLevels' property of the model is not empty,\r\nthe permission will be updated. If the 'AccessLevels' property of the model is empty,\r\nthe permission will be deleted.\r\nThe permission will be created if it does not exist.\r\n\r\n<Info title=\"Subscription Level\">This endpoint requires the Standard plan or higher.</Info>\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectRoleId",
            "in": "path",
            "description": "The id of the project role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the permissions.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionOfRoleForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionOfRoleForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionOfProjectRole"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        },
        "x-subscriptionlevel": {
          "minimumPlan": "standard"
        }
      }
    },
    "/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Returns all projects.",
        "description": "Returns all projects the user has `read` permissions of feature `project-master-data` for.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Creates a new project.",
        "description": "Creates a new project.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-create:write` permissions.</Check>",
        "requestBody": {
          "description": "The model used to create a project.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendedProjectForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendedProjectForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-create": "write"
        }
      }
    },
    "/projects/deletetags": {
      "post": {
        "tags": [
          "ProjectTags"
        ],
        "summary": "Removes tag from all entities.",
        "description": "Removes tag from all projects or project templates.\r\nTo delete the tags the user needs 'write' permissions on the specified project.\r\nReturns 204 NoContent if tag has been removed successfully.",
        "requestBody": {
          "description": "The model with the tag name.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTagForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTagForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/projects/projecttasks/tags": {
      "get": {
        "tags": [
          "ProjectTasks"
        ],
        "summary": "Returns all tags of the project tasks.",
        "description": "Returns all tags of the project tasks.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseTagModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/tags": {
      "get": {
        "tags": [
          "ProjectTags"
        ],
        "summary": "Returns all tags that are currently in use for the given project type.",
        "description": "Returns all tags that are currently in use for the given project type ordered by name.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseTagModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/welcomeproject": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Creates the preconfigured project in the language of the user.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-create": "write"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-create:write` permissions.</Check>"
      }
    },
    "/projects/{projectId}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Returns the project with the specified id.",
        "description": "Returns the project with the specified id if the user has `read` permissions of feature `project-master-data`.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Updates the project with the specified id.",
        "description": "Updates the project with the specified id.\r\nSpecial handling for retainer projects:\r\nIf the project has at least one Retainer, the IsRetainer flag is automatically set to true.\r\nFor retainer projects, the TimeBudget cannot be set. Instead the TimeBudget is the sum of all retainer budgets.\r\n            \r\n<Check><b>Required Permissions</b>: The user has to be the creator of the project or needs `write` permissions of the feature `project-master-data`.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the project with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectPutForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectPutForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/activities": {
      "get": {
        "tags": [
          "ProjectActivities"
        ],
        "summary": "Returns all activities of the project with the specified id.",
        "description": "The activities contain information about the type of the activity, which property was changed and by whom.\r\nThis contains changes to first-level properties of the project, like name, description, status, etc., as well as several related entities, such as tags, assignments, etc.\r\nThis does not include activities of sub-entities, like tasks of a project or comments on a task.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/addprojectmember": {
      "post": {
        "tags": [
          "ProjectMembers"
        ],
        "summary": "Adds a project member to the project with the specified id.",
        "description": "Adds a project member to the project with the specified id.\r\n             The new project member can also be set as a responsible project member, but only if no other member of this project is responsible.\r\n             It is necessary that the project role is available in this project, otherwise the member cannot be added.\r\n             A project role is available when they are connected to the specified project type of the project.\r\n             A user can only be added to the project once.\r\n            \r\n             <Check><b>Required Permissions</b>: The user has to be the creator of the project or needs `manage` permissions of the feature `project-master-data`.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to add the project member.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectMemberForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMember"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/addtags": {
      "post": {
        "tags": [
          "ProjectTags"
        ],
        "summary": "Adds a batch of new tags to the project with the specified id.",
        "description": "The request fails if one of the tags is invalid (e.g. empty or duplicate).\r\nTo create the tags the user needs 'write' permissions on the specified project.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to add tags.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseTagModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/addtaskbundle": {
      "post": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Adds the task bundle to the entity with the specified id.",
        "description": "Adds the task bundle to the project with the specified id.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to add the task bundle to the project.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTaskBundleForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AddTaskBundleForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/allfiles": {
      "get": {
        "tags": [
          "ProjectFiles"
        ],
        "summary": "Returns all files of the project with the specified id.",
        "description": "Returns all files of the project including the ones of tasks linked to that project, with the specified id.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the entity.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedFileInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/automations": {
      "get": {
        "tags": [
          "ProjectAutomations"
        ],
        "summary": "Returns all automations for a project.",
        "description": "Returns all automations of the project with the specified id.\r\nTo get the the automation data the user needs to be the owner of the project or\r\nhave 'read' permissions of the feature 'project-master-data' globally or in his project role.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Automation"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "ProjectAutomations"
        ],
        "summary": "Creates a new automation for the specified project.",
        "description": "Creates a new automation for the project with the specified id.\r\nThe user needs to be the owner of the project or have 'write' permissions of\r\nthe feature 'project-master-data' globally or in the project.\r\n\r\n<Info title=\"Subscription Level\">This endpoint requires the Standard plan or higher.</Info>\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to create the automation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationTriggerForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationTriggerForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automation"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        },
        "x-subscriptionlevel": {
          "minimumPlan": "standard"
        }
      }
    },
    "/projects/{projectId}/automations/{automationId}": {
      "delete": {
        "tags": [
          "ProjectAutomations"
        ],
        "summary": "Deletes the specified automation for a given project.",
        "description": "Deletes the specified automation for a given project.\r\nAlso deletes all actions connected to the automation.\r\nThe user needs to be the owner of the project or have 'write' permissions of\r\nthe feature 'project-master-data' globally or in the project.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "automationId",
            "in": "path",
            "description": "The id of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "get": {
        "tags": [
          "ProjectAutomations"
        ],
        "summary": "Returns a specific automation from a project.",
        "description": "Returns a specific automation of the project with the specified id.\r\nReturns NotFound if the automation doesnt exist.\r\nTo get the the automation data the user needs to be the owner of the project or\r\nhave 'read' permissions of the feature 'project-master-data' globally or in his project role.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "automationId",
            "in": "path",
            "description": "The id of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automation"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "ProjectAutomations"
        ],
        "summary": "Updates the automation with the specified id.",
        "description": "Updates the automation with the specified id.\r\nThe user needs to be the owner of the project or have 'write' permissions of\r\nthe feature 'project-master-data' globally or in the project.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "automationId",
            "in": "path",
            "description": "The id of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the automation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationPutForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationPutForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automation"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/automations/{automationId}/actions": {
      "get": {
        "tags": [
          "ProjectActions"
        ],
        "summary": "Gets the actions of an automation.",
        "description": "Gets all actions including their values of an automation.\r\nThe user needs to be owner of the project or needs permission 'read' of\r\nthe feature 'project-master-data' globally or in the project.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "automationId",
            "in": "path",
            "description": "The id of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Action"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "ProjectActions"
        ],
        "summary": "Creates a new action for an automation.",
        "description": "Creates a new action including its values for an automation.\r\nThe user needs to be owner of the project or needs permission 'write' of\r\nthe feature 'project-master-data' globally or in the project.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "automationId",
            "in": "path",
            "description": "The id of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to create an action.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ActionForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/automations/{automationId}/actions/{actionId}": {
      "delete": {
        "tags": [
          "ProjectActions"
        ],
        "summary": "Deletes an action for an automation.",
        "description": "Deletes an action for an automation including all its values.\r\nThe user needs to be owner of the project or needs permission 'write' of\r\nthe feature 'project-master-data' globally or in the project.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "automationId",
            "in": "path",
            "description": "The id of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "The id of the action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "get": {
        "tags": [
          "ProjectActions"
        ],
        "summary": "Gets a specific action for an automation.",
        "description": "Get a specific action including its values of an automation.\r\nThe user needs to be owner of the project or needs permission 'read' of\r\nthe feature 'project-master-data' globally or in the project.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "automationId",
            "in": "path",
            "description": "The id of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "The id of the action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "ProjectActions"
        ],
        "summary": "Updates a specifc action of an automation.",
        "description": "Updates an exsting action including its values for an automation.\r\nThe user needs to be owner of the project or needs permission 'write' of\r\nthe feature 'project-master-data' globally or in the project.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "automationId",
            "in": "path",
            "description": "The id of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "The id of the action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update an action.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ActionForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/automations/{automationId}/actions/{actionId}/updateorder": {
      "post": {
        "tags": [
          "ProjectActions"
        ],
        "summary": "Updates the order of a given action.",
        "description": "Updates the order of a given action in the list of actions of the specific automation.\r\nIf the order isn't changed, the order will not be updated.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "automationId",
            "in": "path",
            "description": "The id of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "The id of the action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the order.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/autopilot": {
      "delete": {
        "tags": [
          "Autopilot"
        ],
        "summary": "Deletes the autopilot of the project with the specified id.",
        "description": "Deletes the autopilot of the project with the specified id.\r\nTo access and modify the autopilot data the user needs to be the owner of the project or\r\nmust have 'read' permissions of the feature 'project-master-data' globally or in his project role.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Autopilot"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "get": {
        "tags": [
          "Autopilot"
        ],
        "summary": "Returns the autopilot of the project with the specified id.",
        "description": "Returns NoContent if the project does not have an autopilot setup.\r\nTo get the autopilot data the user needs to be the owner of the project or\r\nmust have 'read' permissions of the feature 'project-master-data' globally or in his project role.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Autopilot"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "Autopilot"
        ],
        "summary": "Creates a new autopilot for the project with the specified id.",
        "description": "Creates a new autopilot for the project with the specified id.\r\nAlso creates and enables all alerts for the new autopilot.\r\nFor this action, the user needs to be the owner of the project or must have 'read' permissions\r\nof the feature 'project-master-data' globally or in his project role.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to create the autopilot.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutopilotPostForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AutopilotPostForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Autopilot"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "Autopilot"
        ],
        "summary": "Updates the autopilot of the project with the specified id.",
        "description": "Updates the autopilot of the project with the specified id.\r\nTo access and modify the autopilot data the user needs to be the owner of the project or\r\nmust have 'read' permissions of the feature 'project-master-data' globally or in his project role.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to update the autopilot.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutopilotPutForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AutopilotPutForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Autopilot"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/changeprojecttype": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Changes the project type of the project with the specified id.",
        "description": "Changes the project type of the project with the specified id.\r\n            \r\n<Check><b>Required Permissions</b>: The user has to be the creator of the project or needs `write` permissions of the feature `project-master-data`.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the project type.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeProjectTypeForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeProjectTypeForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/changestatus": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Changes the status of the project with the specified id.",
        "description": "Changes the status of the project with the specified id.\r\nThe project status must be associated with the project type used by the project.\r\nThis potentially adds task bundles to the project and informs the project members about the status change.\r\nIf the project is already in the specified status, nothing happens.\r\n            \r\n<Check><b>Required Permissions</b>: The user has to be the creator of the project or needs `write` permissions of the feature `project-master-data`.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the project status.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeProjectStatusForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeProjectStatusForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/comments": {
      "delete": {
        "tags": [
          "ProjectComments"
        ],
        "summary": "Deletes all comments of the specified project.",
        "description": "Deletes all comments of the specified project.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "ProjectComments"
        ],
        "summary": "Returns all comments of the project with the specified id.",
        "description": "Returns all comments of the project with the specified id. The user needs read permissions on the project.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ProjectComments"
        ],
        "summary": "Creates a new comment on the project with the specified id.",
        "description": "Creates a new comment on the project with the specified id.\r\nThe user needs read permissions on the project to create a comment.\r\nA user can only create a comment for him/herself, except for admins and api users.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to create a comment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CommentForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/comments/{commentId}": {
      "delete": {
        "tags": [
          "ProjectComments"
        ],
        "summary": "Deletes the comment with the specified id on the project with the specified id.",
        "description": "Deletes the comment with the specified id on the project with the specified id.\r\nThe delete includes the reactions of the comment.\r\nIf there are any replies to the comment, they will be deleted as well.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "ProjectComments"
        ],
        "summary": "Returns the comment with the specified id of the project with the specified id.",
        "description": "Returns the comment with the specified id of the project with the specified id.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comments.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProjectComments"
        ],
        "summary": "Updates the comment with the specified id on the project with the specified id.",
        "description": "Updates the comment with the specified id on the project with the specified id.\r\nInReplyToCommentId is not allowed to be changed.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to update the comment with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentPutForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CommentPutForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/comments/{commentId}/react": {
      "post": {
        "tags": [
          "ProjectComments"
        ],
        "summary": "Updates the reactions of the comment with the specified id on the project with the specified id.",
        "description": "Updates the reactions of the comment with the specified id on the project with the specified id.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to update the reactions of the comment with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReactionForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReactionForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/projects/{projectId}/createtaskstatuses": {
      "post": {
        "tags": [
          "ProjectTasks"
        ],
        "summary": "Creates new task statuses for the specified project.",
        "description": "Creates new task statuses from the project template for the the specified project.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-planning-data:write` permissions or `project-create:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The form with the project template id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskStatusesForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskStatusesForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-planning-data": "write",
          "project-create": "write"
        }
      }
    },
    "/projects/{projectId}/customfielddefinitions": {
      "get": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Returns all custom field definitions linked to the project.",
        "description": "Permissions: The user either needs to have the project master data read permission or needs to have access to at least one task in the project.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldDefinitionWithSelectionOptionsAndLinkedProjectIds"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/customfielddefinitions/{customFieldDefinitionId}": {
      "put": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Updates the order of a custom field definition linked to a project.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-master-data:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "customFieldDefinitionId",
            "in": "path",
            "description": "The custom field definition id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the order of the custom field definition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldOrderPutForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldOrderForm"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-master-data": "write"
        }
      }
    },
    "/projects/{projectId}/delete": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Deletes the project with the specified id.",
        "description": "Deletes the project with the specified id.\r\nIn the default case the related tasks of this project will also be deleted and the related time entries of this project and all tasks loose the relation to the deleted project and tasks.\r\nTo delete the time entries as well, you can set the `deleteTimeTrackings` property of the request to `true`.\r\n            \r\n<Check><b>Required Permissions</b>: The user has to be the creator of the project or needs `write` permissions of the feature `project-master-data`.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The data to delete the project.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDeleteForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDeleteForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/deletetags": {
      "post": {
        "tags": [
          "ProjectTags"
        ],
        "summary": "Removes tags from the project with the specified id.",
        "description": "Removes tags from the project with the specified id.\r\nTo delete the tags the user needs 'write' permissions on the specified project.\r\nReturns 204 NoContent if all tags have been removed successfully.\r\nReturns 207 MultiStatus if at least one tag could not be removed, including the reasons.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to remove the tag.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteTagForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteTagForm"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/projects/{projectId}/documents": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Returns all documents that belong to the project with the specified id.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/documents/trash": {
      "get": {
        "tags": [
          "Documents"
        ],
        "summary": "Endpoint to get all deleted documents that belong to a specific project.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The project id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/externalfiles": {
      "post": {
        "tags": [
          "ProjectFiles"
        ],
        "summary": "Endpoint to batch create external files without uploading.",
        "description": "Endpoint to create file infos with batch operation.\r\nCreated file infos don't have a version.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "List of file forms.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalFileForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalFileForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/files": {
      "delete": {
        "tags": [
          "ProjectFiles"
        ],
        "summary": "Deletes the files of the specified project.",
        "description": "Deletes the metadata and the different versions of the files.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "ProjectFiles"
        ],
        "summary": "Returns all files of the project with the specified id.",
        "description": "Returns all file metadata of the project with the specified id.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileInfo"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ProjectFiles"
        ],
        "summary": "Creates a new project file for the project with the specified id..",
        "description": "Uploads a new project file for the project with the specified id.\r\nUse this to upload a file as a form value along with the basic file meta data.\r\nThe file size must not exceed 1GB.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/projects/{projectId}/files/byuploadid": {
      "post": {
        "tags": [
          "FileUpload"
        ],
        "summary": "Creates a file from an upload id.",
        "description": "After a file has been uploaded to an upload URL generated from the <see cref=\"T:Awork.Files.Service.Feature.FileUpload.Endpoints.PostGenerateUploadURL\" /> endpoint, this endpoint can be used to create a file project from the uploaded file by providing the upload id.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadByUploadIdForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/files/byurl": {
      "post": {
        "tags": [
          "ProjectFiles"
        ],
        "summary": "Uploads a new file by providing an url.",
        "description": "The file needs to be a public available url.\r\nThe file size must not exceed 100MB.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The url, name and description of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilePostForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FilePostForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/files/{fileId}": {
      "delete": {
        "tags": [
          "ProjectFiles"
        ],
        "summary": "Deletes the project file with the specified id.",
        "description": "Deletes the metadata and the different versions of the file.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "ProjectFiles"
        ],
        "summary": "Returns the file with the specified id of the project with the specified id.",
        "description": "Returns the file metadata of the project with the specified id.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProjectFiles"
        ],
        "summary": "Updates the metadata of the project file with the specified id.",
        "description": "Updates the metadata of the project file with the specified id.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the file with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/files/{fileId}/changeentity": {
      "post": {
        "tags": [
          "ProjectFiles"
        ],
        "summary": "Changes the project this file belongs to.",
        "description": "Changes the project this file belongs to.\r\nSwitch to the specified project or to a global file\r\nif the 'EntityId' of the model is set to null.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the entity information of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileEntityForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileEntityForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/files/{fileId}/copy": {
      "post": {
        "tags": [
          "ProjectFiles"
        ],
        "summary": "Copies the file to a new project.",
        "description": "Copies the file to a new project (meta and content).",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the entity information of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileCopyForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileCopyForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/files/{fileId}/download": {
      "get": {
        "tags": [
          "ProjectFiles"
        ],
        "summary": "Returns the content of the project file with the specified id.",
        "description": "Returns the content of the project file. Uses the latest file version.\r\nIf the project file is an image and the width and height are set,\r\nthe image will be resized before it is returned.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Set width to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Set height to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "description": "Whether to crop the image when resizing it.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/files/{fileId}/pdf": {
      "get": {
        "tags": [
          "ProjectFiles"
        ],
        "summary": "Returns the content of the file with the specified id as pdf.\r\ntype or conversion not possible.",
        "description": "Returns the content of the project file. Uses the latest file version.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "description": "If inline is false, content-disposition header is attachment.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/files/{fileId}/shareurl": {
      "get": {
        "tags": [
          "ProjectFiles"
        ],
        "summary": "Returns an url to share the file.",
        "description": "Returns a url to share the file.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/files/{fileId}/versions": {
      "get": {
        "tags": [
          "ProjectFiles"
        ],
        "summary": "Returns all file versions of the specified project file.",
        "description": "Returns all file versions of the specified project file.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileVersion"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ProjectFiles"
        ],
        "summary": "Uploads a new version of the project file with the specified id.",
        "description": "Uploads a new version of an project file.\r\nUse this to upload a file as a form value along with the basic file meta data.\r\nThe file size must not exceed 1GB.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVersion"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/projects/{projectId}/files/{fileId}/versions/{versionId}": {
      "get": {
        "tags": [
          "ProjectFiles"
        ],
        "summary": "Returns the project file version with the specified id.",
        "description": "Returns the project file version with the specified id.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The id of the file version.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVersion"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/files/{fileId}/versions/{versionId}/download": {
      "get": {
        "tags": [
          "ProjectFiles"
        ],
        "summary": "Returns the content of the project file version with the specified id.",
        "description": "Returns the content of the project file version with the specified id.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The id of the file version.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/linkcustomfielddefinition": {
      "post": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Links a custom field definition to a project.",
        "description": "When the definition is unlinked from a task, all values of the custom field will be removed from the task.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to link the the custom field definition to a project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkCustomFieldDefinitionForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/members": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Returns the project members of the project with the specified id.",
        "description": "Returns the project members of the project with the specified id.\r\n            \r\n<Check><b>Required Permissions</b>: The user has to be the creator of the project or needs `read` permissions of the feature `project-master-data`.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectMember"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/milestones": {
      "get": {
        "tags": [
          "ProjectMilestones"
        ],
        "summary": "Returns all project milestones of the specified project.",
        "description": "The user needs 'read' permissions\r\nof feature 'project-planning-data' to get the data.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectMilestone"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/projectstatuses": {
      "post": {
        "tags": [
          "ProjectStatuses"
        ],
        "summary": "Creates a new project status for a project.",
        "description": "Creates a new project status.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to creates a new project status.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectStatusForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectStatusForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ]
      }
    },
    "/projects/{projectId}/projecttasks": {
      "get": {
        "tags": [
          "ProjectTasks"
        ],
        "summary": "Returns all project tasks of the project with the specified id.",
        "description": "To get the task with the specified id 'read' permissions on the feature project-planning-data are necessary.\r\nOtherwise returns only assigned tasks.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/projecttasks/{taskId}": {
      "get": {
        "tags": [
          "ProjectTasks"
        ],
        "summary": "Returns the project task with the specified id.",
        "description": "To get the task with the specified id 'read' permissions on the feature project-planning-data are necessary.\r\nBut the assignee has also the permissions to get the task.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/projecttasks/{taskId}/changeproject": {
      "post": {
        "tags": [
          "ProjectTasks"
        ],
        "summary": "Changes the project of the task with the specified id.",
        "description": "Changes the project of the task with the specified id.\r\n            This call also moves all subtasks of the task to the new project.\r\n            This also changes the tracked time sum of the new project and the previous project.\r\n            The related time entries of this task will also be moved to the new project.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the project of the task.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeProjectForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/projecttasks/{taskId}/checklistitems": {
      "get": {
        "tags": [
          "ChecklistItems"
        ],
        "summary": "Returns the checklist items for a project task with the specified id.",
        "description": "To retrieve the checklist items of a project task either 'read' permissions on the 'project-planning-data' feature are\r\nrequired or the user needs to be assigned.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItem"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/projecttasks/{taskId}/checklistitems/{checklistItemId}": {
      "get": {
        "tags": [
          "ChecklistItems"
        ],
        "summary": "Returns a checklist item for a project task with the specified id.",
        "description": "To retrieve the checklist item of a project task either 'read' permissions on the 'project-planning-data' feature are\r\nrequired\r\nor the user needs to be assigned.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "checklistItemId",
            "in": "path",
            "description": "The id of the checklist item.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistItem"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/removeprojectmember": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Removes a project member from the project with the specified id.",
        "description": "Removes a project member from the project with the specified id.\r\n            \r\n<Check><b>Required Permissions</b>: The user has to be the creator of the project or needs `manage` permissions of the feature `project-master-data`.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to remove the project member.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectMemberRemoveForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectMemberRemoveForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/retainers": {
      "get": {
        "tags": [
          "Retainers"
        ],
        "summary": "Endpoint to get all retainers for a project.",
        "description": "The user must have the ProjectMasterData read permission for the project to access this endpoint.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Retainer"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "Retainers"
        ],
        "summary": "Endpoint to create a new retainer for a project.",
        "description": "As soon as a retainer is created for a project, the project will be marked as a retainer project.\r\n            Based on the Start and End dates of the retainer, the retainer budgets will be created automatically.\r\n            Retainers cannot overlap. There can only be one active retainer per project at a time (no end date and/or including the current date).\r\n            \r\n            The user needs to have the ProjectMasterData write permission for the project to access this endpoint.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project to create the retainer for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The form to create a new retainer.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetainerForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Retainer"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/retainers/{retainerId}": {
      "delete": {
        "tags": [
          "Retainers"
        ],
        "summary": "Endpoint to delete a retainer for a project. Deletes all related retainer budgets.",
        "description": "The user must have the ProjectMasterData write permission for the project to access this endpoint.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "retainerId",
            "in": "path",
            "description": "The id of the retainer to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "get": {
        "tags": [
          "Retainers"
        ],
        "summary": "Endpoint to get a retainer for a project by id.",
        "description": "The user must have the ProjectMasterData read permission for the project to access this endpoint.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "retainerId",
            "in": "path",
            "description": "The id of the retainer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Retainer"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "Retainers"
        ],
        "summary": "Endpoint to update the retainer for a project.",
        "description": "The end date of the retainer can only be updated via the POST /setDates endpoint.\r\n            The start date, the retainer period, and the timezone can not be updated. Delete the retainer and create a new one instead.\r\n            \r\n            The user needs to have the ProjectMasterData write permission for the project to access this endpoint.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "retainerId",
            "in": "path",
            "description": "The id of the retainer.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The form to update the retainer.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetainerForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Retainer"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/tags": {
      "get": {
        "tags": [
          "ProjectTags"
        ],
        "summary": "Returns the tags of the project with the specified id.",
        "description": "Returns the tags of the project with the specified id ordered by name.\r\nTo read the tags the user needs 'read' permissions on the specified project.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseTagModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/taskdependencies": {
      "get": {
        "tags": [
          "TaskDependencies"
        ],
        "summary": "Returns all task dependencies for a specific project.",
        "description": "<Check><b>Required Permissions</b>: To get all dependencies of a project, the user needs project planning permissions on that project.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project dependency.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskDependency"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/tasklists": {
      "get": {
        "tags": [
          "TaskLists"
        ],
        "summary": "Returns all task lists of the entity with the specified id.",
        "description": "The permission check in this function is dynamically based on the entity name.\r\nIn the cases where the user tries to get the project task lists,\r\nthe user needs read permissions on the project-planning-data feature.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "showArchived",
            "in": "query",
            "description": "Include archived task lists in the results. Not required. False by default.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskList"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "TaskLists"
        ],
        "summary": "Creates a new task list.",
        "description": "To create a new project task list, the user needs manage permissions on the project-planning-data feature.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to create a project task.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskListForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskListForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/tasklists/{taskListId}": {
      "get": {
        "tags": [
          "TaskLists"
        ],
        "summary": "Returns the task list with the specified id.",
        "description": "The permission check in this function is dynamically based on the entity name.\r\nIn the cases where the user tries to get the project task lists,\r\nthe user needs read permissions on the project-planning-data feature.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListId",
            "in": "path",
            "description": "The id of the task list.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "TaskLists"
        ],
        "summary": "Updates the task list with the specified id.",
        "description": "To update a project task list, the user needs manage permissions on the project-planning-data feature.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the entity.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListId",
            "in": "path",
            "description": "The id of the task list.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to update the task list with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskListPutForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskListPutForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/tasklists/{taskListId}/addtasks": {
      "post": {
        "tags": [
          "TaskLists"
        ],
        "summary": "Adds the tasks to the task list with the specified id.",
        "description": "Adds the tasks to the task list with the specified id.\r\nTo add a new task to a project task list, the user needs manage permissions on the project-planning-data feature.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListId",
            "in": "path",
            "description": "The id of the task list.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The ids of the tasks to add to the list.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaskToTaskList"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaskToTaskList"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReorderingResult"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/tasklists/{taskListId}/changeproject": {
      "post": {
        "tags": [
          "TaskLists"
        ],
        "summary": "Changes the project of the task list with the specified id.",
        "description": "This endpoint also moves all tasks and time entries to the new project.\r\n            This will also change the tracked time sum of the old and new projects.\r\n            The task status mapping will move all tasks of a certain status to the new provided status on the mapping.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListId",
            "in": "path",
            "description": "The id of the task list.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the project of the task list.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeProjectFormForTaskLists"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/tasklists/{taskListId}/copy": {
      "post": {
        "tags": [
          "TaskLists"
        ],
        "summary": "Creates a copy of the task list.",
        "description": "A new task list will be created with the same name as the original one.\r\n            All tasks and subtasks will also be copied in this operation.\r\n            Comments, files and activity logs are not copied.\r\n            To copy a task list, the user needs to have 'ProjectPlanning'\r\n            permissions in general or in the project the task list belongs to.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/tasklists/{taskListId}/delete": {
      "post": {
        "tags": [
          "TaskLists"
        ],
        "summary": "Deletes the task list with the specified id.",
        "description": "To delete project task list, the user needs manage permissions on the project-planning-data feature.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the entity.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListId",
            "in": "path",
            "description": "The id of the task list.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The form used to delete the task list with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskListDeleteForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskListDeleteForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/tasklists/{taskListId}/removetasks": {
      "post": {
        "tags": [
          "TaskLists"
        ],
        "summary": "Removes the tasks from the task list with the specified id.",
        "description": "To remove a task from a project task list, the user needs manage permissions on the project-planning-data feature.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListId",
            "in": "path",
            "description": "The id of the task list.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The ids of the tasks to remove from the list.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "example": [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "example": [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/tasklists/{taskListId}/setarchived": {
      "post": {
        "tags": [
          "TaskLists"
        ],
        "summary": "Archives or unarchives the task list with the specified id.",
        "description": "Archives or unarchives the task list with the specified id.\r\nAn archived task list still exists but is not editable anymore.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project the task list is related to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListId",
            "in": "path",
            "description": "Id of the task list which will be archived.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to archive the task list.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivedTaskListForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivedTaskListForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ]
      }
    },
    "/projects/{projectId}/tasklists/{taskListId}/tasks/{taskId}": {
      "get": {
        "tags": [
          "TaskLists"
        ],
        "summary": "Returns the task with the specified id in the specified task list.",
        "description": "To get a project task from the project task list, the user needs read permissions on the project-planning-data feature\r\nor the current user must be assigned to the task with the specified id.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListId",
            "in": "path",
            "description": "The id of the task list.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/tasklists/{taskListId}/tasks/{taskId}/updateorder": {
      "post": {
        "tags": [
          "TaskLists"
        ],
        "summary": "Updates the order of a task in a task list.",
        "description": "To update the order of tasks in a project task list, the user needs manage permissions on the\r\nproject-planning-data feature.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListId",
            "in": "path",
            "description": "The id of the task list.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to update the order of the task in the task list with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskInTaskListUpdateOrderForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskInTaskListUpdateOrderForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReorderingResult"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/tasklists/{taskListId}/updateorder": {
      "post": {
        "tags": [
          "TaskLists"
        ],
        "summary": "Updates the order of a task list.",
        "description": "To update the order of project task lists, the user needs manage permissions on the project-planning-data feature.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListId",
            "in": "path",
            "description": "The id of the task list.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to update the order of the task list with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/taskstatuses": {
      "get": {
        "tags": [
          "ProjectTasks"
        ],
        "summary": "Returns all task statuses of the project with the specified id.",
        "description": "Returns all task statuses of the project with the specified id.\r\nTo get the task statuses, the user need at least read permissions on feature Project-Master-Data.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskStatus"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "ProjectTasks"
        ],
        "summary": "Creates a new task status for the specified project.",
        "description": "Creates a new task status for the specified project.\r\nTo create the task status, the user need write permissions on feature Project-Planning.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to create a new task status.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskStatusForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskStatusForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/taskstatuses/{taskStatusId}": {
      "get": {
        "tags": [
          "ProjectTasks"
        ],
        "summary": "Returns the task status of the project with the specified id.",
        "description": "Returns the task status of the project with the specified id.\r\nTo get the task status, the user need at least read permissions on feature Project-Master-Data.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskStatusId",
            "in": "path",
            "description": "The id of the task status.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "ProjectTasks"
        ],
        "summary": "Updates a task status for the specified project.",
        "description": "Updates a task status for the specified project.\r\nTo update the task status, the user need write permissions on feature Project-Master-Data.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskStatusId",
            "in": "path",
            "description": "The id of the task status.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update a task status.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskStatusForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskStatusForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/taskstatuses/{taskStatusId}/delete": {
      "post": {
        "tags": [
          "ProjectTasks"
        ],
        "summary": "Deletes the task status with the specified id.",
        "description": "Deletes the project's task status with the specified id.\r\nTo delete the task status, the user need write permissions on feature Project-Master-Data.\r\nIf the status still has related tasks, it's necessary to provide another task status\r\nto move the  tasks to.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskStatusId",
            "in": "path",
            "description": "The id of the task status.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to delete the task status.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskStatusDeleteForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskStatusDeleteForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/timeentries": {
      "get": {
        "tags": [
          "TimeEntries"
        ],
        "summary": "Returns all time entries of a specified project.",
        "description": "The projectName parameter defines the main project of which to fetch the time entries.\r\n            Supported types are: 'projects' and 'tasks'.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeTracking"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}/typeofwork": {
      "get": {
        "tags": [
          "ProjectTasks"
        ],
        "summary": "Returns the type of work for the project with the specified id.\n            .",
        "description": "The project can be a connected or a workspace project.\r\n            User must have at least 'read' permissions on the 'project-planning-data' feature.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TypeOfWork"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/unlinkcustomfielddefinition": {
      "post": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Unlinks a custom field definition from a project.",
        "description": "When the definition is unlinked from a task, all values of the custom field will be removed from the task.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-master-data:read` permissions.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to unlink the the custom field definition from a project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlinkCustomFieldDefinitionForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-master-data": "read"
        }
      }
    },
    "/projects/{projectId}/updateprojectmember": {
      "post": {
        "tags": [
          "ProjectMembers"
        ],
        "summary": "Updates the role of a project member of the project with the specified id.",
        "description": "Changes the role of a project member.\r\n             The project member can also be set as a responsible project member, but only if no other member of this project is\r\n             responsible.\r\n             It is necessary that the project role is available in this project, otherwise the member cannot be updated.\r\n             A project role is available when they are connected to the specified project type of the project.\r\n            \r\n             <Check><b>Required Permissions</b>: The user has to be the creator of the project or needs `manage` permissions of the feature `project-master-data`.</Check>",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the project member.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectMemberForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMember"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projects/{projectId}/updateprojectstatusorder": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Updates the order of a project status.",
        "description": "Updates the order of a project status.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The project status with updated order.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectStatusOrderForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectStatusOrderForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ]
      }
    },
    "/projects/{projectId}/updatetags": {
      "post": {
        "tags": [
          "ProjectTags"
        ],
        "summary": "Updates a tag to the project with the specified id.",
        "description": "To update the tag the user needs 'write' permissions on the specified project.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model with the tags to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagUpdateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TagUpdateForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/projectstatuses": {
      "get": {
        "tags": [
          "ProjectStatuses"
        ],
        "summary": "Returns all project statuses.",
        "description": "Returns all project statuses.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "showArchived",
            "in": "query",
            "description": "Include archived statuses in the results. Not required. False by default.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectStatus"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projectstatuses/{projectStatusId}": {
      "get": {
        "tags": [
          "ProjectStatuses"
        ],
        "summary": "Returns the project status with the specified id.",
        "description": "Returns the project status with the specified id.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectStatusId",
            "in": "path",
            "description": "The id of the project status.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "ProjectStatuses"
        ],
        "summary": "Updates the project status with the specified id.",
        "description": "Updates the project status with the specified id.",
        "parameters": [
          {
            "name": "projectStatusId",
            "in": "path",
            "description": "The id of the project status.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the project status.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectStatusForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectStatusForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ]
      }
    },
    "/projectstatuses/{projectStatusId}/delete": {
      "post": {
        "tags": [
          "ProjectStatuses"
        ],
        "summary": "Deletes the project status with the specified id.",
        "description": "Deletes the project status with the specified id. If it was a status of a project and the project is currently having\r\nthat status, a new status needs to be passed.",
        "parameters": [
          {
            "name": "projectStatusId",
            "in": "path",
            "description": "Id of the task status which will be deleted.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to delete the status.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectStatusDeleteForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectStatusDeleteForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ]
      }
    },
    "/projectstatuses/{projectStatusId}/setarchived": {
      "post": {
        "tags": [
          "ProjectStatuses"
        ],
        "summary": "Archives or unarchives the project status with the specified id.",
        "description": "Archives or unarchives the project status with the specified id.\r\nAn archived project status still exists for all projects currently using it,\r\nbut projects can no longer be moved to this status.",
        "parameters": [
          {
            "name": "projectStatusId",
            "in": "path",
            "description": "The id of the status which will be changed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to archive or unarchive the project type.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivedForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivedForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ]
      }
    },
    "/projecttemplates": {
      "get": {
        "tags": [
          "ProjectTemplates"
        ],
        "summary": "Returns all existing project templates.",
        "description": "Returns all existing project templates.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectTemplate"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "ProjectTemplates"
        ],
        "summary": "Creates a new project template.",
        "description": "Creates a new project template.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "requestBody": {
          "description": "The model to create the project template.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectTemplateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectTemplateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/projecttemplates/deletetags": {
      "post": {
        "tags": [
          "ProjectTemplateTags"
        ],
        "summary": "Removes tag from all entities.",
        "description": "Removes tag from all projects or project templates.\r\nTo delete the tags the user needs 'write' permissions on the specified projecttemplate.\r\nReturns 204 NoContent if tag has been removed successfully.",
        "requestBody": {
          "description": "The model with the tag name.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTagForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTagForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/projecttemplates/tags": {
      "get": {
        "tags": [
          "ProjectTemplateTags"
        ],
        "summary": "Returns all tags that are currently in use for the given projecttemplate type.",
        "description": "Returns all tags that are currently in use for the given projecttemplate type ordered by name.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseTagModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projecttemplates/{projectTemplateId}": {
      "delete": {
        "tags": [
          "ProjectTemplates"
        ],
        "summary": "Deletes the project template with the specified id.",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>"
      },
      "get": {
        "tags": [
          "ProjectTemplates"
        ],
        "summary": "Returns the project template with the specified id.",
        "description": "Returns the project template with the specified id and the related statuses.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "ProjectTemplates"
        ],
        "summary": "Updates the project template with the specified id.",
        "description": "Updates the project template with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the project template.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectTemplateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectTemplateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/projecttemplates/{projectTemplateId}/automations": {
      "get": {
        "tags": [
          "ProjectTemplateAutomations"
        ],
        "summary": "Returns all automations for a projecttemplate.",
        "description": "Returns all automations of the projecttemplate with the specified id.\r\nTo get the automation data the user needs the 'read' permissons of\r\nthe feature 'project-manage-config' globally.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Automation"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "ProjectTemplateAutomations"
        ],
        "summary": "Creates a new automation for a given projecttemplate.",
        "description": "Creates a new automation of the projecttemplate with the specified id.\r\nTo create the the automation the user needs to have 'write' permissions of\r\nthe feature 'project-manage-config' globally.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationTriggerForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationTriggerForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automation"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/projecttemplates/{projectTemplateId}/automations/{automationId}": {
      "delete": {
        "tags": [
          "ProjectTemplateAutomations"
        ],
        "summary": "Deletes the specified automation for a given projecttemplate.",
        "description": "Deletes the specified automation with its trigger and all its values.\r\nTo delete the the automation the user needs to have 'write' permissions of\r\nthe feature 'project-manage-config' globally.\r\nIf the 'removeFromProject' boolean is set to true, all automations in projects of that\r\nproject template created from that automation template are deleted aswell.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "automationId",
            "in": "path",
            "description": "The id of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "removeFromProjects",
            "in": "query",
            "description": "Whether to delete the automation also from all projects of the projecttemplate.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      },
      "get": {
        "tags": [
          "ProjectTemplateAutomations"
        ],
        "summary": "Returns a specific automation for a projecttemplate.",
        "description": "Returns a specific automation of the projecttemplate with the specified id.\r\nReturns NotFound if the automation doesnt exist.\r\nTo get the the automation data the user needs to have 'read' permissions of\r\nthe feature 'project-manage-config' globally.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:read` permissions.</Check>",
        "parameters": [
          {
            "name": "automationId",
            "in": "path",
            "description": "The id of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automation"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "read"
        }
      },
      "put": {
        "tags": [
          "ProjectTemplateAutomations"
        ],
        "summary": "Updates the automation with the specified id for a given projecttemplate.",
        "description": "Updates the specified automation for a specific projecttemplate.\r\nTo update the the automation the user needs to have 'write' permissions of\r\nthe feature 'project-manage-config' globally.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "automationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectTemplateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationPutForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationPutForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automation"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/projecttemplates/{projectTemplateId}/automations/{automationId}/actions": {
      "get": {
        "tags": [
          "ProjectTemplateActions"
        ],
        "summary": "Gets the actions of an automation of a project template.",
        "description": "Returns all actions for a specific automation of a project template including all its values.\r\nThe user needs 'read' permissions of the feature 'project-manage-config' to view action data.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:read` permissions.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "automationId",
            "in": "path",
            "description": "The id of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Action"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "read"
        }
      },
      "post": {
        "tags": [
          "ProjectTemplateActions"
        ],
        "summary": "Creates a new action for an automation of a projecttemplate.",
        "description": "Creates an action for a specific automation of a projecttemplate including all its values.\r\nThe user needs 'write' permissions of the feature 'project-manage-config' to create action data.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "automationId",
            "in": "path",
            "description": "The id of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to create an action.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ActionForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/projecttemplates/{projectTemplateId}/automations/{automationId}/actions/{actionId}": {
      "delete": {
        "tags": [
          "ProjectTemplateActions"
        ],
        "summary": "Deletes an action for an automation of a projecttemplate.",
        "description": "Deletes an action for a specific automation of a projecttemplate including all its values.\r\nThe user needs 'write' permissions of the feature 'project-manage-config' to delete action data.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "automationId",
            "in": "path",
            "description": "The id of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "The id of the action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      },
      "get": {
        "tags": [
          "ProjectTemplateActions"
        ],
        "summary": "Gets a specific action for an automation of a projecttemplate.",
        "description": "Returns a specific action for a specific automation of a projecttemplate including all its values.\r\nThe user needs 'read' permissions of the feature 'project-manage-config' to view action data.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:read` permissions.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "automationId",
            "in": "path",
            "description": "The id of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "The id of the action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "read"
        }
      },
      "put": {
        "tags": [
          "ProjectTemplateActions"
        ],
        "summary": "Updates a specifc action of an automation of a projecttemplate.",
        "description": "Returns an updated action for a specific automation of a projecttemplate including all its values.\r\nThe user needs 'write' permissions of the feature 'project-manage-config' to update action data.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "automationId",
            "in": "path",
            "description": "The id of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "The id of the action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update an action.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ActionForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/projecttemplates/{projectTemplateId}/automations/{automationId}/actions/{actionId}/updateorder": {
      "post": {
        "tags": [
          "ProjectTemplateActions"
        ],
        "summary": "Updates the order of a given action.",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "automationId",
            "in": "path",
            "description": "The id of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "The id of the action.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the order.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>"
      }
    },
    "/projecttemplates/{projectTemplateId}/automations/{automationId}/reapply": {
      "post": {
        "tags": [
          "ProjectTemplateAutomations"
        ],
        "summary": "Reapplies the automation to all projects of this specific project template.",
        "description": "Returns NotFound if the automation doesnt exist.\r\nTo execute this you need to have 'write' permissions of\r\nthe feature 'project-manage-config' globally.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "automationId",
            "in": "path",
            "description": "The id of the automation.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/projecttemplates/{projectTemplateId}/customfielddefinitions": {
      "get": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Returns all custom field definitions linked to a project template.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldDefinitionWithSelectionOptions"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projecttemplates/{projectTemplateId}/customfielddefinitions/{customFieldDefinitionId}": {
      "put": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Updates the order of a custom field definition for a project template.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "customFieldDefinitionId",
            "in": "path",
            "description": "The custom field definition id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the order of the custom field definition.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldOrderPutForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/projecttemplates/{projectTemplateId}/linkcustomfielddefinition": {
      "post": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Links a custom field definition to a project template.",
        "description": "When the definition is unlinked from a task, all values of the custom field will be removed from the task.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to link the custom field definition to a project template",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkCustomFieldDefinitionForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/projecttemplates/{projectTemplateId}/milestones": {
      "get": {
        "tags": [
          "ProjectMilestoneTemplates"
        ],
        "summary": "Returns all milestone templates of the given project template.",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectMilestoneTemplate"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "read"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:read` permissions.</Check>"
      },
      "post": {
        "tags": [
          "ProjectMilestoneTemplates"
        ],
        "summary": "Creates a new milestone template for the given project template.",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the milestone.",
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string",
              "example": "Internal Review"
            },
            "example": "Internal Review"
          },
          {
            "name": "Color",
            "in": "query",
            "description": "The color of the milestone.",
            "schema": {
              "maxLength": 14,
              "minLength": 0,
              "type": "string",
              "example": "green"
            },
            "example": "green"
          },
          {
            "name": "RelativeDueDate",
            "in": "query",
            "description": "Relative amount of days the milestone is due after the project creation date\r\nwhen a project gets created with the corresponding project template.",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 7
            },
            "example": 7
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMilestoneTemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>"
      }
    },
    "/projecttemplates/{projectTemplateId}/milestones/{milestoneId}": {
      "delete": {
        "tags": [
          "ProjectMilestoneTemplates"
        ],
        "summary": "Deletes a milestone for the given project template.",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "milestoneId",
            "in": "path",
            "description": "The id of the milestone template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>"
      },
      "get": {
        "tags": [
          "ProjectMilestoneTemplates"
        ],
        "summary": "Returns a milestone by id for the given project template.",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "milestoneId",
            "in": "path",
            "description": "The id of the milestone template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMilestoneTemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "read"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:read` permissions.</Check>"
      },
      "put": {
        "tags": [
          "ProjectMilestoneTemplates"
        ],
        "summary": "Updates a milestone template for the given project template.",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "milestoneId",
            "in": "path",
            "description": "The id of the milestone template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the milestone.",
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string",
              "example": "Internal Review"
            },
            "example": "Internal Review"
          },
          {
            "name": "Color",
            "in": "query",
            "description": "The color of the milestone.",
            "schema": {
              "maxLength": 14,
              "minLength": 0,
              "type": "string",
              "example": "green"
            },
            "example": "green"
          },
          {
            "name": "RelativeDueDate",
            "in": "query",
            "description": "Relative amount of days the milestone is due after the project creation date\r\nwhen a project gets created with the corresponding project template.",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 7
            },
            "example": 7
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectMilestoneTemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>"
      }
    },
    "/projecttemplates/{projectTemplateId}/projectstatuses": {
      "post": {
        "tags": [
          "ProjectStatuses"
        ],
        "summary": "Creates a new project status.",
        "description": "Creates a new project status.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to creates a new project status.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectStatusForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectStatusForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/projecttemplates/{projectTemplateId}/setcustomfields": {
      "post": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Sets the custom fields for a project template.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template to set the custom fields for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model containing the details for setting the custom fields for a project template.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomFieldPostForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/projecttemplates/{projectTemplateId}/taskbundle": {
      "get": {
        "tags": [
          "ProjectTemplates"
        ],
        "summary": "Returns the task bundle id which is linked to the template.",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskBundleResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>"
      }
    },
    "/projecttemplates/{projectTemplateId}/taskstatuses": {
      "get": {
        "tags": [
          "ProjectTasks"
        ],
        "summary": "Returns all task statuses of the project template with the specified id.",
        "description": "Returns all task statuses of the project template with the specified id.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskStatus"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "ProjectTasks"
        ],
        "summary": "Creates a new task status for the specified project template.",
        "description": "Creates a new task status for the specified project template.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to create a new task status.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskStatusForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskStatusForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/projecttemplates/{projectTemplateId}/taskstatuses/{taskStatusId}": {
      "delete": {
        "tags": [
          "ProjectTasks"
        ],
        "summary": "Deletes the task status of the project template with the specified id.",
        "description": "Deletes the project task status with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskStatusId",
            "in": "path",
            "description": "The id of the task status.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      },
      "get": {
        "tags": [
          "ProjectTasks"
        ],
        "summary": "Returns the task status of the project template with the specified id.",
        "description": "Returns the task status of the project template with the specified id.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskStatusId",
            "in": "path",
            "description": "The id of the task status.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "ProjectTasks"
        ],
        "summary": "Updates a task status for the specified project template.",
        "description": "Updates a task status for the specified project template.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskStatusId",
            "in": "path",
            "description": "The id of the task status.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update a task status.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskStatusForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskStatusForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/projecttemplates/{projectTemplateId}/unlinkcustomfielddefinition": {
      "post": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Unlinks a custom field definition from a projectTemplate.",
        "description": "When the definition is unlinked from a task, all values of the custom field will be removed from the task.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of projectTemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to unlink the the custom field definition from a projectTemplate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlinkCustomFieldDefinitionForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/projecttemplates/{projectTemplateId}/updateprojectstatusorder": {
      "post": {
        "tags": [
          "ProjectTemplates"
        ],
        "summary": "Updates the order of a project status.",
        "description": "Updates the order of a project status.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectTemplateId",
            "in": "path",
            "description": "The id of the project template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The project status with updated order.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectStatusOrderForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectStatusOrderForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/projecttemplates/{projecttemplateId}/addtags": {
      "post": {
        "tags": [
          "ProjectTemplateTags"
        ],
        "summary": "Adds a batch of new tags to the projecttemplate with the specified id.",
        "description": "The request fails if one of the tags is invalid (e.g. empty or duplicate).\r\nTo create the tags the user needs 'write' permissions on the specified projecttemplate.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to add tags.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseTagModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projecttemplates/{projecttemplateId}/deletetags": {
      "post": {
        "tags": [
          "ProjectTemplateTags"
        ],
        "summary": "Removes tags from the projecttemplate with the specified id.",
        "description": "Removes tags from the projecttemplate with the specified id.\r\nTo delete the tags the user needs 'write' permissions on the specified projecttemplate.\r\nReturns 204 NoContent if all tags have been removed successfully.\r\nReturns 207 MultiStatus if at least one tag could not be removed, including the reasons.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to remove the tag.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteTagForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteTagForm"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/projecttemplates/{projecttemplateId}/externalfiles": {
      "post": {
        "tags": [
          "ProjectTemplateFiles"
        ],
        "summary": "Endpoint to batch create external files without uploading.",
        "description": "Endpoint to create file infos with batch operation.\r\nCreated file infos don't have a version.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "List of file forms.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalFileForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalFileForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/projecttemplates/{projecttemplateId}/files": {
      "delete": {
        "tags": [
          "ProjectTemplateFiles"
        ],
        "summary": "Deletes the files of the specified projecttemplate.",
        "description": "Deletes the metadata and the different versions of the files.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "ProjectTemplateFiles"
        ],
        "summary": "Returns all files of the projecttemplate with the specified id.",
        "description": "Returns all file metadata of the projecttemplate with the specified id.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileInfo"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ProjectTemplateFiles"
        ],
        "summary": "Creates a new projecttemplate file for the projecttemplate with the specified id..",
        "description": "Uploads a new projecttemplate file for the projecttemplate with the specified id.\r\nUse this to upload a file as a form value along with the basic file meta data.\r\nThe file size must not exceed 1GB.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/projecttemplates/{projecttemplateId}/files/byurl": {
      "post": {
        "tags": [
          "ProjectTemplateFiles"
        ],
        "summary": "Uploads a new file by providing an url.",
        "description": "The file needs to be a public available url.\r\nThe file size must not exceed 100MB.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The url, name and description of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilePostForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FilePostForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/projecttemplates/{projecttemplateId}/files/{fileId}": {
      "delete": {
        "tags": [
          "ProjectTemplateFiles"
        ],
        "summary": "Deletes the projecttemplate file with the specified id.",
        "description": "Deletes the metadata and the different versions of the file.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "ProjectTemplateFiles"
        ],
        "summary": "Returns the file with the specified id of the projecttemplate with the specified id.",
        "description": "Returns the file metadata of the projecttemplate with the specified id.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProjectTemplateFiles"
        ],
        "summary": "Updates the metadata of the projecttemplate file with the specified id.",
        "description": "Updates the metadata of the projecttemplate file with the specified id.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the file with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/projecttemplates/{projecttemplateId}/files/{fileId}/changeentity": {
      "post": {
        "tags": [
          "ProjectTemplateFiles"
        ],
        "summary": "Changes the projecttemplate this file belongs to.",
        "description": "Changes the projecttemplate this file belongs to.\r\nSwitch to the specified projecttemplate or to a global file\r\nif the 'EntityId' of the model is set to null.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the entity information of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileEntityForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileEntityForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/projecttemplates/{projecttemplateId}/files/{fileId}/copy": {
      "post": {
        "tags": [
          "ProjectTemplateFiles"
        ],
        "summary": "Copies the file to a new projecttemplate.",
        "description": "Copies the file to a new projecttemplate (meta and content).",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the entity information of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileCopyForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileCopyForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/projecttemplates/{projecttemplateId}/files/{fileId}/download": {
      "get": {
        "tags": [
          "ProjectTemplateFiles"
        ],
        "summary": "Returns the content of the projecttemplate file with the specified id.",
        "description": "Returns the content of the projecttemplate file. Uses the latest file version.\r\nIf the projecttemplate file is an image and the width and height are set,\r\nthe image will be resized before it is returned.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Set width to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Set height to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "description": "Whether to crop the image when resizing it.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/projecttemplates/{projecttemplateId}/files/{fileId}/pdf": {
      "get": {
        "tags": [
          "ProjectTemplateFiles"
        ],
        "summary": "Returns the content of the file with the specified id as pdf.\r\ntype or conversion not possible.",
        "description": "Returns the content of the projecttemplate file. Uses the latest file version.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "description": "If inline is false, content-disposition header is attachment.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/projecttemplates/{projecttemplateId}/files/{fileId}/shareurl": {
      "get": {
        "tags": [
          "ProjectTemplateFiles"
        ],
        "summary": "Returns an url to share the file.",
        "description": "Returns a url to share the file.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/projecttemplates/{projecttemplateId}/files/{fileId}/versions": {
      "get": {
        "tags": [
          "ProjectTemplateFiles"
        ],
        "summary": "Returns all file versions of the specified projecttemplate file.",
        "description": "Returns all file versions of the specified projecttemplate file.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileVersion"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ProjectTemplateFiles"
        ],
        "summary": "Uploads a new version of the projecttemplate file with the specified id.",
        "description": "Uploads a new version of an projecttemplate file.\r\nUse this to upload a file as a form value along with the basic file meta data.\r\nThe file size must not exceed 1GB.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVersion"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/projecttemplates/{projecttemplateId}/files/{fileId}/versions/{versionId}": {
      "get": {
        "tags": [
          "ProjectTemplateFiles"
        ],
        "summary": "Returns the projecttemplate file version with the specified id.",
        "description": "Returns the projecttemplate file version with the specified id.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The id of the file version.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVersion"
                }
              }
            }
          }
        }
      }
    },
    "/projecttemplates/{projecttemplateId}/files/{fileId}/versions/{versionId}/download": {
      "get": {
        "tags": [
          "ProjectTemplateFiles"
        ],
        "summary": "Returns the content of the projecttemplate file version with the specified id.",
        "description": "Returns the content of the projecttemplate file version with the specified id.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The id of the file version.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        }
      }
    },
    "/projecttemplates/{projecttemplateId}/tags": {
      "get": {
        "tags": [
          "ProjectTemplateTags"
        ],
        "summary": "Returns the tags of the projecttemplate with the specified id.",
        "description": "Returns the tags of the projecttemplate with the specified id ordered by name.\r\nTo read the tags the user needs 'read' permissions on the specified projecttemplate.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseTagModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projecttemplates/{projecttemplateId}/updatetags": {
      "post": {
        "tags": [
          "ProjectTemplateTags"
        ],
        "summary": "Updates a tag to the projecttemplate with the specified id.",
        "description": "To update the tag the user needs 'write' permissions on the specified projecttemplate.",
        "parameters": [
          {
            "name": "projecttemplateId",
            "in": "path",
            "description": "The id of the projecttemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model with the tags to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagUpdateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TagUpdateForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/projecttimebookings": {
      "get": {
        "tags": [
          "TimeBookings"
        ],
        "summary": "Returns a list of time bookings.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeBooking"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "TimeBookings"
        ],
        "summary": "Creates a new time booking for a given project and user.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The data to create a new time booking.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeBookingForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeBooking"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projecttimebookings/{timeBookingId}": {
      "delete": {
        "tags": [
          "TimeBookings"
        ],
        "summary": "Deletes a time booking by id.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "timeBookingId",
            "in": "path",
            "description": "The id of the time booking.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "TimeBookings"
        ],
        "summary": "Updates a given time booking.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "timeBookingId",
            "in": "path",
            "description": "The id of the time booking.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated data for the time booking.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeBookingForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeBooking"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projecttypes": {
      "get": {
        "tags": [
          "ProjectTypes"
        ],
        "summary": "Returns all existing project types.",
        "description": "Returns all existing project types.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "showArchived",
            "in": "query",
            "description": "Include archived project types in the results. Optional. False by default.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectType"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "ProjectTypes"
        ],
        "summary": "Creates a new project type.",
        "description": "Creates a new project type.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "requestBody": {
          "description": "The model to create the project type.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectTypeForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectTypeForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectType"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/projecttypes/icons": {
      "get": {
        "tags": [
          "ProjectTypes"
        ],
        "summary": "Gets all possible icons for project types.",
        "description": "Returns all possible icons for project types.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/projecttypes/{projectTypeId}": {
      "get": {
        "tags": [
          "ProjectTypes"
        ],
        "summary": "Returns the project type with the specified id.",
        "description": "Returns the project type with the specified id.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "projectTypeId",
            "in": "path",
            "description": "The id of the project type.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectType"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "ProjectTypes"
        ],
        "summary": "Updates the project type with the specified id.",
        "description": "Updates the project type with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectTypeId",
            "in": "path",
            "description": "The id of the project type.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the project type.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectTypeForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectTypeForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectType"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/projecttypes/{projectTypeId}/delete": {
      "post": {
        "tags": [
          "ProjectTypes"
        ],
        "summary": "Deletes the project type with the specified id.",
        "description": "Deletes the project type with the specified id.\r\nIf an id of a new type is provided, projects will be updated to reference the new type.\r\nIf no id of a new type is provided, the type will be removed from the projects.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectTypeId",
            "in": "path",
            "description": "The id of the project type.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to delete the project type.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteProjectTypeForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteProjectTypeForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/projecttypes/{projectTypeId}/setarchived": {
      "post": {
        "tags": [
          "ProjectTypes"
        ],
        "summary": "Archives or unarchives the project type with the specified id.",
        "description": "Archives or unarchives the project type with the specified id. Archived objects can not be used any longer but\r\nstill exist for being referenced by other entities.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "projectTypeId",
            "in": "path",
            "description": "Id of the type which will be changed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The archiving model object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivedForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivedForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectType"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Returns all roles of the workspace.",
        "description": "Returns all roles of the workspace.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:read` permissions.</Check>",
        "parameters": [
          {
            "name": "showArchived",
            "in": "query",
            "description": "Include archived roles in the results. Optional. False by default.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "read"
        }
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Creates a new role.",
        "description": "Creates a new role.\r\n\r\n<Info title=\"Subscription Level\">This endpoint requires the Standard plan or higher.</Info>\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "requestBody": {
          "description": "The model used to create a role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RoleForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        },
        "x-subscriptionlevel": {
          "minimumPlan": "standard"
        }
      }
    },
    "/roles/moveuser": {
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Moves a user from their current role to another role.",
        "description": "Moves a user from their current role to another role.\r\n            At least one user needs to remain in the admin role.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "requestBody": {
          "description": "The model to change the project of the task.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveUserInRole"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/roles/{roleId}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Returns the role with the specified id.",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The id of the role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "read"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:read` permissions.</Check>"
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Updates the role with the specified id.",
        "description": "Updates the role with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The id of the role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the role with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RoleForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/roles/{roleId}/adduser": {
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Adds the user to the Role with the specified id.",
        "description": "Adds the user to the Role with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The id of the role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to add the user to the role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInRoleForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserInRoleForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/roles/{roleId}/deactivatedmenuitems": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Returns all deactivated menu items for the role with the specified id.",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The id of the role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "https://www.awork.com"
                ]
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "read"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:read` permissions.</Check>"
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Creates, updates the deactivated menu items for the role with the specified id.",
        "description": "Creates, updates the deactivated menu items for the role with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The id of the role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The menu items to deactivate.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/roles/{roleId}/delete": {
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Deletes the role with the specified id.",
        "description": "If there are still users in this role an id of a different role must be specified\r\nto move the users to that role.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The id of the role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The delete model for roles.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRoleForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteRoleForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/roles/{roleId}/permissions": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Returns all permissions of the role with the specified id.",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The id of the role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PermissionOfGlobalRole"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "read"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:read` permissions.</Check>"
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Creates, updates or deletes a permission of the role with the specified id.",
        "description": "Creates, updates or deletes a permission of the role.\r\nIf the permission already exist, and the 'AccessLevels' property of the model is not empty,\r\nthe permission will be updated. If the 'AccessLevels' property of the model is empty,\r\nthe permission will be deleted.\r\nThe permission will be created if it does not exist.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The id of the role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the permissions.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionOfRoleForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionOfRoleForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionOfGlobalRole"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/roles/{roleId}/setarchived": {
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Archives or unarchives the role with the specified id.",
        "description": "Archives or unarchives the role with the specified id.\r\nAn archived role still exists for all users currently using it,\r\nbut users can no longer be assigned to this role.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "Id of the role which will be archived.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to archive the role.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivedForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivedForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      }
    },
    "/roles/{roleId}/users": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Returns all users of the role with the specified id.",
        "description": "Returns all users of the role with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:read` permissions.</Check>",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The id of the role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInRole"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "read"
        }
      }
    },
    "/roles/{roleId}/users/{userId}/activate": {
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Activates the user with the specified id.",
        "description": "Activates the user with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The id of the role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/roles/{roleId}/users/{userId}/deactivate": {
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Deactivates the user with the specified id.",
        "description": "Deactivates the user with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "The id of the role.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/roles/{roleName}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Returns the role with the specified name.",
        "parameters": [
          {
            "name": "roleName",
            "in": "path",
            "description": "The name of the role.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Designer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "read"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:read` permissions.</Check>"
      }
    },
    "/search": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Performs a full-text search across workspace entities.",
        "description": "This endpoint enables powerful full-text search capabilities across multiple types.\r\nIt returns a ranked list of matching entities based on relevance and respects user permissions.\r\n\r\nThe search functionality includes:\r\n- Cross-entity search across various entity types in the workspace\r\n- Relevance-based scoring and ranking of results\r\n- Respecting user access permissions for all returned results\r\n- Customizable result filtering by entity type and status\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "searchTerm",
            "in": "query",
            "description": "The term to search for. Max. 50 characters. Required.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchTypes",
            "in": "query",
            "description": "Comma-separated list of types to search for, or 'all'. \r\nDefault: all types.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "top",
            "in": "query",
            "description": "Count of top results. Default: 20.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeClosedAndStuck",
            "in": "query",
            "description": "If true, the result will include entities where the status is closed, stuck and done.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResults"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/sharedfiles": {
      "get": {
        "tags": [
          "SharedFiles"
        ],
        "summary": "Returns the shared file.",
        "description": "Returns the shared file.",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "The token to allow access.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ]
      }
    },
    "/taskbundles": {
      "get": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Returns all global task bundles.",
        "description": "Returns all global task bundles.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskBundle"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Creates a new task bundle.",
        "description": "Creates a new task bundle.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "requestBody": {
          "description": "The model used to create a new task bundle.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskBundleForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskBundleForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskBundle"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      }
    },
    "/taskbundles/fromproject/{projectId}": {
      "post": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Creates a new task bundle from the specified project.",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskBundleFromProjectForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaskBundleFromProjectForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskBundle"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>"
      }
    },
    "/taskbundles/fromtasklist/{taskListId}": {
      "post": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Creates a new task bundle from the specified task list.\r\nTurns the tasks, task list and TaskToTaskLists into templates.",
        "parameters": [
          {
            "name": "taskListId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskBundleFromTaskListForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskBundleFromTaskListForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskBundle"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>"
      }
    },
    "/taskbundles/icons": {
      "get": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Returns all possible icons for a task bundle.",
        "description": "Returns all possible icons for a task bundle.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/taskbundles/{taskBundleId}": {
      "delete": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Deletes the task bundle with the specified id.",
        "description": "Deletes the task bundle with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      },
      "get": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Returns the task bundle with the specified id.",
        "description": "Returns the task bundle with the specified id.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskBundle"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Updates the task bundle with the specified id.",
        "description": "Updates the task bundle with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to update the task bundle with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskBundleForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskBundleForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskBundle"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      }
    },
    "/taskbundles/{taskBundleId}/copy": {
      "post": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Creates a new task bundle with the information of the specified task bundle.",
        "description": "Creates the taskbundle, task templates, task list templates, task template to task list templates and copies the\r\nattachments.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyTaskBundleForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CopyTaskBundleForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskBundle"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      }
    },
    "/taskbundles/{taskBundleId}/taskdependencytemplates": {
      "get": {
        "tags": [
          "TaskDependencyTemplates"
        ],
        "summary": "Returns all task dependency templates for a given task bundle.",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskDependencyTemplate"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "read"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:read` permissions.</Check>"
      },
      "post": {
        "tags": [
          "TaskDependencyTemplates"
        ],
        "summary": "Creates a task dependency template for two task templates of the given task bundle.",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The form to create a task dependency template.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskDependencyTemplateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskDependencyTemplateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDependencyTemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>"
      }
    },
    "/taskbundles/{taskBundleId}/taskdependencytemplates/{taskDependencyTemplateId}": {
      "delete": {
        "tags": [
          "TaskDependencyTemplates"
        ],
        "summary": "Deletes the task dependency template from the task bundle.",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskDependencyTemplateId",
            "in": "path",
            "description": "The id of the task dependency template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>"
      },
      "get": {
        "tags": [
          "TaskDependencyTemplates"
        ],
        "summary": "Returns a task dependency template by id for a given task bundle.",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskDependencyTemplateId",
            "in": "path",
            "description": "The id of the task dependency template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDependencyTemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "read"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:read` permissions.</Check>"
      }
    },
    "/taskbundles/{taskBundleId}/tasklisttemplates": {
      "get": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Returns all task list templates of the task bundle with the specified id.",
        "description": "Returns all task list templates of the task bundle with the specified id.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskList"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Creates a new task list template for the task bundle with the specified id.",
        "description": "Creates a new task list template for the task bundle with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to create a new task list template.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskListForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskListForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      }
    },
    "/taskbundles/{taskBundleId}/tasklisttemplates/{taskListTemplateId}": {
      "delete": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Deletes the task list template for the task bundle with the specified id.",
        "description": "Deletes the task list template for the task bundle with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListTemplateId",
            "in": "path",
            "description": "The id of the task list.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      },
      "get": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Returns the task list template of the task bundle with the specified id.",
        "description": "Returns the task list template of the task bundle with the specified id.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListTemplateId",
            "in": "path",
            "description": "The id of the task list template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Updates the task list template for the task bundle with the specified id.",
        "description": "Updates the task list template for the task bundle with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListTemplateId",
            "in": "path",
            "description": "The id of the task list.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to update the task list template with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskListBundlePutForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskListBundlePutForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      }
    },
    "/taskbundles/{taskBundleId}/tasklisttemplates/{taskListTemplateId}/addtasktemplates": {
      "post": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Adds the task templates to the task list template with the specified id.",
        "description": "Adds the task templates to the task list template with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListTemplateId",
            "in": "path",
            "description": "The id of the task list template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The ids of the task templates to add to the list.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaskTemplateToTaskListTemplate"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TaskTemplateToTaskListTemplate"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReorderingResult"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      }
    },
    "/taskbundles/{taskBundleId}/tasklisttemplates/{taskListTemplateId}/removetasktemplates": {
      "post": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Removes the task templates from the task list template with the specified id.",
        "description": "Removes the task templates from the task list template with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListTemplateId",
            "in": "path",
            "description": "The id of the task list template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The ids of the tasks to remove from the list.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "example": [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "example": [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      }
    },
    "/taskbundles/{taskBundleId}/tasklisttemplates/{taskListTemplateId}/tasktemplates": {
      "get": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Returns the task templates in the specified task list template.",
        "description": "Returns the task templates in the specified task list template.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListTemplateId",
            "in": "path",
            "description": "The id of the task list template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskTemplate"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/taskbundles/{taskBundleId}/tasklisttemplates/{taskListTemplateId}/tasktemplates/{taskTemplateId}": {
      "get": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Returns the task template with the specified id in the specified task list template.",
        "description": "Returns the task template with the specified id in the specified task list template.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the entity.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListTemplateId",
            "in": "path",
            "description": "The id of the task list.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskTemplateId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskTemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/taskbundles/{taskBundleId}/tasklisttemplates/{taskListTemplateId}/tasktemplates/{taskTemplateId}/updateorder": {
      "post": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Updates the order of a task template in a task list template.",
        "description": "To update the order of tasks in a project task list, the user needs manage permissions on the\r\nproject-planning-data feature.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the entity.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListTemplateId",
            "in": "path",
            "description": "The id of the task list.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskTemplateId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to update the order of the task template in the task list template with the\r\nspecified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskInTaskListUpdateOrderForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskInTaskListUpdateOrderForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      }
    },
    "/taskbundles/{taskBundleId}/tasklisttemplates/{taskListTemplateId}/updateorder": {
      "post": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Updates the order of a task list template in a task bundle.",
        "description": "Updates the order of a task list template in a task bundle.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskListTemplateId",
            "in": "path",
            "description": "The id of the task list.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to update the order of the task list template with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      }
    },
    "/taskbundles/{taskBundleId}/tasktemplates": {
      "get": {
        "tags": [
          "TaskTemplates"
        ],
        "summary": "Returns all task templates of the task bundle with the specified id.",
        "description": "Returns all task templates of the task bundle with the specified id.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskTemplate"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "TaskTemplates"
        ],
        "summary": "Creates a new task template for the task bundle with the specified id.",
        "description": "Creates a new task template for the task bundle with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The form used to create a new task template.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskTemplateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskTemplateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskTemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      }
    },
    "/taskbundles/{taskBundleId}/tasktemplates/{taskTemplateId}": {
      "delete": {
        "tags": [
          "TaskTemplates"
        ],
        "summary": "Deletes the task template for the task bundle with the specified id.",
        "description": "Deletes the task template for the task bundle with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskTemplateId",
            "in": "path",
            "description": "The id of the task template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      },
      "get": {
        "tags": [
          "TaskTemplates"
        ],
        "summary": "Returns the task template of the task bundle with the specified id.",
        "description": "Returns the task template of the task bundle with the specified id.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskTemplateId",
            "in": "path",
            "description": "The id of the task template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskTemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "TaskTemplates"
        ],
        "summary": "Updates the task template for the task bundle with the specified id.",
        "description": "Updates the task template for the task bundle with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "taskBundleId",
            "in": "path",
            "description": "The id of the task bundle.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskTemplateId",
            "in": "path",
            "description": "The id of the task template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to update the task template with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskTemplateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskTemplateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskTemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      }
    },
    "/taskbundles/{taskBundleId}/tasktemplates/{taskTemplateId}/setassignees": {
      "post": {
        "tags": [
          "TaskTemplates"
        ],
        "summary": "Assigns a list of users to task templates.",
        "description": "Users that are not passed and are already assigned will be removed.\r\nRemoves existing task template assignments and adds the new assignment.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "taskTemplateId",
            "in": "path",
            "description": "The id of the task template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskBundleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The list of users to assign by id.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "example": [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "example": [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      }
    },
    "/taskdependencies": {
      "post": {
        "tags": [
          "TaskDependencies"
        ],
        "summary": "Creates a new task dependency.",
        "description": "<Check><b>Required Permissions</b>: To create a task dependency, the user needs to be the assignee of both tasks or have `ProjectPlanning`\r\n            permissions in general or in the project the tasks are related to.</Check>",
        "requestBody": {
          "description": "The model used to create a task dependency.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskDependencyForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDependency"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/taskdependencies/{taskDependencyId}": {
      "delete": {
        "tags": [
          "TaskDependencies"
        ],
        "summary": "Deletes a task dependency.",
        "description": "<Check><b>Required Permissions</b>: To delete a task dependency, the user needs to be the assignee of both tasks or have 'ProjectPlanning'\r\n            permissions in general or in the project the task are related to.</Check>",
        "parameters": [
          {
            "name": "taskDependencyId",
            "in": "path",
            "description": "The id of the task dependency.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Creates a new task.",
        "description": "Can be a project task or a user's private task.\r\n            To create a task, the user needs to be the assignee of the task or 'ProjectPlanning'\r\n            permissions in general or in the project the task is related to.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The model used to create a task.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralTaskPostForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/assignuserbyemail": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Assigns a new user to a tasks by email invitation.",
        "description": "For the invitation, the role of the user has to be specified. The user is then invited to the workspace and assigned to the task.\r\nThe user will receive an email with the invitation link, as well as a redirect to the task.\r\nThe new user will replace any currently existing task assignments.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The model to assign the user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignByEmailForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AssignByEmailForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/batch/{operation}": {
      "post": {
        "tags": [
          "TasksBatch"
        ],
        "summary": "Edits multiple tasks using the specified operation.",
        "description": "The user is only allowed to edit tasks they have permissions for. The same applies for related entities like time entries.\r\nReturns MultiStatus. Includes the list of successful and failed tasks.\r\nReturns BadRequest if the validation for either operation or form fails.\r\n\r\nSupported Operations:\r\nmovetoproject: Moves all tasks to a new project.\r\nmovetotasklist: Moves all tasks to a new task list inside the same project.\r\nsetdates: Sets the due and optionally start date for all tasks.\r\naddtags: Adds a list of tags to all tasks in the list that don't already have the tag.\r\ndelete: Deletes all tasks. Optional including time trackings.\r\nchangetypeofwork: Changes the type of work for a list of tasks. Optionally also for the related timetrackings.\r\nassignusers: Assigns a list of users to a list of tasks.\r\nunassignusers: Unassigns a list of users from a list of tasks. If the UserIds are not provided, all users are unassigned.\r\nsetprio: Sets the prio flag for a list of tasks.\r\nchangetaskstatus: Sets the task status for a list of tasks.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "operation",
            "in": "path",
            "description": "The name of the operation to execute on the given tasks.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The form with additional info for the batch operation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchOperationForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BatchOperationForm"
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/changebasetypes": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Changes the base type for a batch of tasks.",
        "description": "Changes the base type for a batch of tasks.\r\nThis operation will remove the task from the lists it is in.\r\nIf the task is a parent task, all subtasks are changed as well.\r\nIf the task has task dependencies to tasks not in the given list of task ids, those will be removed as well.\r\nIf the task baseType is already the correct base type, no changes are made.\r\nThe status of the task is matched automatically to the first status of the new basetype based on order and type.\r\n            \r\n<Check><b>Required Permissions</b>: The required permissions depend on the base type of the task. If the task is a project task, `write` permissions on the `project-planning-data` feature are required. For a user's private task, no special permissions are required.</Check><Info> Returns `204 NoContent` if all tasks have been changed successfully. Returns `207 MultiStatus` if at least one task could not be changed, including the reasons.</Info>",
        "requestBody": {
          "description": "The model to change types.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TasksChangeBaseTypesForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TasksChangeBaseTypesForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "207": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/changelists": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Changes the lists of tasks.",
        "description": "Adds tasks to lists, removes them and reorders tasks within lists.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The form to change the lists of tasks.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChangeTaskListsForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeTaskListsForm"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/changestatuses": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Changes statuses of tasks.",
        "description": "Changes statuses of several tasks.\r\n            \r\n<Check><b>Required Permissions</b>: The required permissions depend on the base type of the task. If the task is a project task, `write` permissions on the `project-planning-data` feature are required. For a user's private task, no special permissions are required.</Check><Info> Returns `204 NoContent` if all tasks have been changed successfully. Returns `207 MultiStatus` if at least one task could not be changed, including the reasons.</Info>",
        "requestBody": {
          "description": "The model to change statuses.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChangeStatusForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChangeStatusForm"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "207": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/changesubtasks": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Changes the parent task and the order of subtasks.",
        "description": "Changes parent task and order of subtasks. If the parent task of a subtask changed, its lists, base type and entity\r\n            will change to match the parent ones.\r\n            It is not possible to change a task to subtask if the task already has subtasks.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The model used to change a subtask.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChangeSubtasksPostForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/changesubtaskstoparent": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Convert subtasks to a parent task.",
        "description": "Convert subtasks to a parent task. If list ids are not provided it will keep the same lists as the old parent task,\r\n            placing the task as last item in the lists.\r\n            If multiple list ids are provided per task, the lists will be overwritten with the lists provided. In this case, if an\r\n            order is not provided, it will be put as the last item in the list.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The model used to change a subtask.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChangeSubtasksToParentPostForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/changetypeofwork": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Changes the type of work for a batch of tasks.",
        "description": "Changes the type of work for a batch of tasks and their related time entries.\r\n            \r\n<Check><b>Required Permissions</b>: The required permissions depend on the base type of the task. If the task is a project task, `write` permissions on the `project-planning-data` feature are required. For a user's private tasks, no special permissions are required.</Check><Info>Returns `204 NoContent` if all tasks have been changed successfully. Returns `207 MultiStatus` if at least one task could not be changed, including the reasons.</Info>",
        "requestBody": {
          "description": "The model to change types.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TasksChangeTypesForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TasksChangeTypesForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "207": {
            "description": "Success"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/delete": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Deletes several tasks.",
        "description": "Deletes the specified tasks.\r\nBy default, the related time entries of these tasks loose the relation to the deleted tasks.\r\nIn order to delete the time entires as well, you need to set the 'DeleteTimeTrackings' property to true.\r\n            \r\n<Check><b>Required Permissions</b>: The required permissions depend on the base type of the task. If the task is a project task, `write` permissions on the `project-planning-data` feature are required. For a user's private task, no special permissions are required.</Check><Info>Returns `204 NoContent` if all tasks have been deleted successfully. Returns `207 MultiStatus` if at least one task could not be deleted, including the reasons.</Info>",
        "requestBody": {
          "description": "The model to delete tasks.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TasksDeleteForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TasksDeleteForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "207": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IErrorResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/deletetags": {
      "post": {
        "tags": [
          "TaskTags"
        ],
        "summary": "Removes tag from all entities.",
        "description": "Removes tag from all tasks.\r\nTo delete the tags the user needs 'write' permissions on the specified entity.\r\nReturns 204 NoContent if tag has been removed successfully.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "isPrivateTask",
            "in": "query",
            "description": "If the entity is a private task.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "The model to remove the tag.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTagForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTagForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/settaskpriority": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Set the priority of the task with the specified id.",
        "requestBody": {
          "description": "The model to change the priority.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskSetPrioForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskSetPrioForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>"
      }
    },
    "/tasks/tags": {
      "get": {
        "tags": [
          "TaskTags"
        ],
        "summary": "Returns all tags that are currently in use.",
        "description": "Returns all tags that are currently in use ordered by count.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseTagModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/{entityId}/addtags": {
      "post": {
        "tags": [
          "TaskTags"
        ],
        "summary": "Adds a batch of new tags to the entity with the specified id.",
        "description": "The request fails if one of the tags is invalid (e.g. empty or duplicate).\r\nTo create the tags the user needs 'write' permissions on the specified entity.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "The id of the entity.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to add tags.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseTagModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/{entityId}/deletetags": {
      "post": {
        "tags": [
          "TaskTags"
        ],
        "summary": "Removes tags from the entity with the specified id.",
        "description": "Removes tags from the project with the specified id.\r\nTo delete the tags the user needs 'write' permissions on the specified entity.\r\nReturns 204 NoContent if all tags have been removed successfully.\r\nReturns 207 MultiStatus if at least one tag could not be removed, including the reasons.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "The id of the entity.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to remove the tag.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteTagForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteTagForm"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/{entityId}/tags": {
      "get": {
        "tags": [
          "TaskTags"
        ],
        "summary": "Returns the tags of the entity with the specified id.",
        "description": "Returns the tags of the entity with the specified id ordered by name.\r\nTo read the tags the user needs 'read' permissions on the specified entity.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "entityId",
            "in": "path",
            "description": "The id of the entity.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseTagModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/{entityId}/updatetags": {
      "post": {
        "tags": [
          "TaskTags"
        ],
        "summary": "Updates a tag to the entity with the specified id.",
        "description": "To update the tag the user needs 'write' permissions on the specified entity.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "isPrivateTask",
            "in": "query",
            "description": "If the entity is a private task.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The model to add tags.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagUpdateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TagUpdateForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/{taskId}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Returns the task with the specified id.",
        "description": "The required permissions depend on the base type of the task.\r\n            If the task is a project task, 'read' permissions on the 'project-planning-data' feature are required.\r\n            For a user's private task, no special permissions are required.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Updates the task with the specified id.",
        "description": "To update the task, the user needs to be the assignee of the task or 'ProjectPlanning'\r\n            permissions in general or in the project the task is related to.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "updateTaskPlannedDuration",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralTaskForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/{taskId}/activities": {
      "get": {
        "tags": [
          "TaskActivities"
        ],
        "summary": "Returns all activities of the task with the specified id.",
        "description": "The activities contain information about the type of the activity, which property was changed and by whom.\r\nThis contains changes to first-level properties of the task, like name, description, status, etc., as well as several related entities, such as tags, assignments, etc.\r\nThis does not include activities of sub-entities, like tasks of a project or comments on a task.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/checklistitems": {
      "get": {
        "tags": [
          "ChecklistItems"
        ],
        "summary": "Returns the checklist items for a task with the specified id.",
        "description": "The required permissions depend on the base type of the task.\r\nIf the task is a project task, either 'read' permissions on the 'project-planning-data' feature are required or the\r\nuser needs to be assigned.\r\nFor a user's private task, no special permissions are required.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItem"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "ChecklistItems"
        ],
        "summary": "Creates a checklist item for a task with the specified id.",
        "description": "The required permissions depend on the base type of the task.\r\nIf the task is a project task, either 'write' permissions on the 'project-master-data' feature are required or the user\r\nneeds to be assigned.\r\nFor a user's private task, no special permissions are required.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to create the checklist item.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChecklistItemForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChecklistItemForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistItem"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/{taskId}/checklistitems/tosubtasks": {
      "post": {
        "tags": [
          "ChecklistItems"
        ],
        "summary": "Convert all checklist items of the specified task to subtasks.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task containing the checklist items to convert.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/{taskId}/checklistitems/{checklistItemId}": {
      "delete": {
        "tags": [
          "ChecklistItems"
        ],
        "summary": "Deletes a checklist item for a task with the specified id.",
        "description": "The required permissions depend on the base type of the task.\r\nIf the task is a project task, either 'write' permissions on the 'project-master-data' feature are required or the user\r\nneeds to be assigned.\r\nFor a user's private task, no special permissions are required.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "checklistItemId",
            "in": "path",
            "description": "The id of the checklist item.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "get": {
        "tags": [
          "ChecklistItems"
        ],
        "summary": "Returns the checklist item for a task with the specified id.",
        "description": "The required permissions depend on the base type of the task.\r\nIf the task is a project task, either 'read' permissions on the 'project-planning-data' feature are required or the\r\nuser needs to be assigned.\r\nFor a user's private task, no special permissions are required.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "checklistItemId",
            "in": "path",
            "description": "The id of the checklist item.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistItem"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "ChecklistItems"
        ],
        "summary": "Updates a checklist item for a task with the specified id.",
        "description": "The required permissions depend on the base type of the task.\r\nIf the task is a project task, either 'write' permissions on the 'project-master-data' feature are required or the user\r\nneeds to be assigned.\r\nFor a user's private task, no special permissions are required.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "checklistItemId",
            "in": "path",
            "description": "The id of the checklist item.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the checklist item.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChecklistItemForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChecklistItemForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistItem"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/{taskId}/comments": {
      "delete": {
        "tags": [
          "TaskComments"
        ],
        "summary": "Deletes all comments of the specified task.",
        "description": "Deletes all comments of the specified task.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "TaskComments"
        ],
        "summary": "Returns all comments of the task with the specified id.",
        "description": "Returns all comments of the task with the specified id. The user needs read permissions on the task.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TaskComments"
        ],
        "summary": "Creates a new comment on the task with the specified id.",
        "description": "Creates a new comment on the task with the specified id.\r\nThe user needs read permissions on the task to create a comment.\r\nA user can only create a comment for him/herself, except for admins and api users.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to create a comment.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CommentForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/comments/{commentId}": {
      "delete": {
        "tags": [
          "TaskComments"
        ],
        "summary": "Deletes the comment with the specified id on the task with the specified id.",
        "description": "Deletes the comment with the specified id on the task with the specified id.\r\nThe delete includes the reactions of the comment.\r\nIf there are any replies to the comment, they will be deleted as well.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "TaskComments"
        ],
        "summary": "Returns the comment with the specified id of the task with the specified id.",
        "description": "Returns the comment with the specified id of the task with the specified id.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comments.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TaskComments"
        ],
        "summary": "Updates the comment with the specified id on the task with the specified id.",
        "description": "Updates the comment with the specified id on the task with the specified id.\r\nInReplyToCommentId is not allowed to be changed.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to update the comment with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentPutForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CommentPutForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/comments/{commentId}/react": {
      "post": {
        "tags": [
          "TaskComments"
        ],
        "summary": "Updates the reactions of the comment with the specified id on the task with the specified id.",
        "description": "Updates the reactions of the comment with the specified id on the task with the specified id.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "description": "The id of the comment.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to update the reactions of the comment with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReactionForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReactionForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/tasks/{taskId}/copy": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Creates a copy of the specified task.",
        "description": "Comments, files and activity logs are not copied.\r\n            To copy a task, the user needs to be the assignee of the task or 'ProjectPlanning'\r\n            permissions in general or in the project the task is related to.\r\n            If the task is a parent task, it will also copy its subtasks.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/{taskId}/deleterecurrency": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Deletes a recurrency rule for an existing task.",
        "description": "To delete a recurrency, the user needs to be the assignee of the task or 'ProjectPlanning'\r\npermissions in general or in the project the task is related to.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/{taskId}/externalfiles": {
      "post": {
        "tags": [
          "TaskFiles"
        ],
        "summary": "Endpoint to batch create external files without uploading.",
        "description": "Endpoint to create file infos with batch operation.\r\nCreated file infos don't have a version.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "List of file forms.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalFileForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalFileForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/files": {
      "delete": {
        "tags": [
          "TaskFiles"
        ],
        "summary": "Deletes the files of the specified task.",
        "description": "Deletes the metadata and the different versions of the files.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "TaskFiles"
        ],
        "summary": "Returns all files of the task with the specified id.",
        "description": "Returns all file metadata of the task with the specified id.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileInfo"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TaskFiles"
        ],
        "summary": "Creates a new task file for the task with the specified id..",
        "description": "Uploads a new task file for the task with the specified id.\r\nUse this to upload a file as a form value along with the basic file meta data.\r\nThe file size must not exceed 1GB.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/tasks/{taskId}/files/byuploadid": {
      "post": {
        "tags": [
          "FileUpload"
        ],
        "summary": "Creates a file from an upload id.",
        "description": "After a file has been uploaded to an upload URL generated from the <see cref=\"T:Awork.Files.Service.Feature.FileUpload.Endpoints.PostGenerateUploadURL\" /> endpoint, this endpoint can be used to create a file task from the uploaded file by providing the upload id.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadByUploadIdForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/files/byurl": {
      "post": {
        "tags": [
          "TaskFiles"
        ],
        "summary": "Uploads a new file by providing an url.",
        "description": "The file needs to be a public available url.\r\nThe file size must not exceed 100MB.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The url, name and description of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilePostForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FilePostForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/files/{fileId}": {
      "delete": {
        "tags": [
          "TaskFiles"
        ],
        "summary": "Deletes the task file with the specified id.",
        "description": "Deletes the metadata and the different versions of the file.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "TaskFiles"
        ],
        "summary": "Returns the file with the specified id of the task with the specified id.",
        "description": "Returns the file metadata of the task with the specified id.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TaskFiles"
        ],
        "summary": "Updates the metadata of the task file with the specified id.",
        "description": "Updates the metadata of the task file with the specified id.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the file with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/files/{fileId}/changeentity": {
      "post": {
        "tags": [
          "TaskFiles"
        ],
        "summary": "Changes the task this file belongs to.",
        "description": "Changes the task this file belongs to.\r\nSwitch to the specified task or to a global file\r\nif the 'EntityId' of the model is set to null.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the entity information of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileEntityForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileEntityForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/files/{fileId}/copy": {
      "post": {
        "tags": [
          "TaskFiles"
        ],
        "summary": "Copies the file to a new task.",
        "description": "Copies the file to a new task (meta and content).",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the entity information of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileCopyForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileCopyForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/files/{fileId}/download": {
      "get": {
        "tags": [
          "TaskFiles"
        ],
        "summary": "Returns the content of the task file with the specified id.",
        "description": "Returns the content of the task file. Uses the latest file version.\r\nIf the task file is an image and the width and height are set,\r\nthe image will be resized before it is returned.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Set width to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Set height to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "description": "Whether to crop the image when resizing it.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/files/{fileId}/pdf": {
      "get": {
        "tags": [
          "TaskFiles"
        ],
        "summary": "Returns the content of the file with the specified id as pdf.\r\ntype or conversion not possible.",
        "description": "Returns the content of the task file. Uses the latest file version.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "description": "If inline is false, content-disposition header is attachment.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/files/{fileId}/shareurl": {
      "get": {
        "tags": [
          "TaskFiles"
        ],
        "summary": "Returns an url to share the file.",
        "description": "Returns a url to share the file.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/files/{fileId}/versions": {
      "get": {
        "tags": [
          "TaskFiles"
        ],
        "summary": "Returns all file versions of the specified task file.",
        "description": "Returns all file versions of the specified task file.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileVersion"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TaskFiles"
        ],
        "summary": "Uploads a new version of the task file with the specified id.",
        "description": "Uploads a new version of an task file.\r\nUse this to upload a file as a form value along with the basic file meta data.\r\nThe file size must not exceed 1GB.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVersion"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/tasks/{taskId}/files/{fileId}/versions/{versionId}": {
      "get": {
        "tags": [
          "TaskFiles"
        ],
        "summary": "Returns the task file version with the specified id.",
        "description": "Returns the task file version with the specified id.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The id of the file version.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVersion"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/files/{fileId}/versions/{versionId}/download": {
      "get": {
        "tags": [
          "TaskFiles"
        ],
        "summary": "Returns the content of the task file version with the specified id.",
        "description": "Returns the content of the task file version with the specified id.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The id of the file version.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/recurrency": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Gets the recurrency rule for the specified task.",
        "description": "<Check>\r\n  <b>Required Permissions</b>: `read` permissions on the task.</Check>\r\n<Info>Returns `404 NotFound` if no recurrence rule exists.</Info>",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecurrencyModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/{taskId}/setassignees": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Assigns a list of users to a given task",
        "description": "If a userId of an existing assignment is not present, the user will be unassigned from the task.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "updateTaskPlannedDuration",
            "in": "query",
            "description": "Whether to update the task's planned duration based on the assignments (default: true for backwards compatibility).",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "The list of user ids to assign.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "example": [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "example": [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/{taskId}/setcustomfields": {
      "post": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Sets the custom fields for a task.",
        "description": "The required properties depend on the type of the custom field.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task to set the custom fields for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model containing the details for setting the custom fields for a task.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomFieldPostForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/{taskId}/setplannedefforts": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Modifies a list of planned efforts of a given task.",
        "description": "Only the efforts passed in the request will be updated, ignoring any missing effort.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "updateTaskPlannedDuration",
            "in": "query",
            "description": "Whether to update the task's planned duration based on the manual efforts (default: true for backwards compatibility).",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "requestBody": {
          "description": "The list of planned efforts to be modified.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlannedEffortForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PlannedEffortForm"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/{taskId}/setrecurrency": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "To add or update a recurrency rule for an existing task.",
        "description": "To delete a recurrency, the user needs to be the assignee of the task or 'ProjectPlanning'\r\npermissions in general or in the project the task is related to. The following properties are copied to the new task:\r\nName, Description\r\nChecklist items, Attachments, Watchers, Assignee, Initial status, Tags, Type of Work, Priority, Estimate.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRecurrencyForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TaskRecurrencyForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/{taskId}/taskdependencies": {
      "get": {
        "tags": [
          "TaskDependencies"
        ],
        "summary": "Returns all task dependencies for a specific task.",
        "description": "<Check><b>Required Permissions</b>: To get all dependencies of a task, the user needs project planning permissions on that project or be assigned to that task.</Check>",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskDependency"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasks/{taskId}/timeentries": {
      "get": {
        "tags": [
          "TimeEntries"
        ],
        "summary": "Returns all time entries of a specified task.",
        "description": "The taskName parameter defines the main task of which to fetch the time entries.\r\n            Supported types are: 'projects' and 'tasks'.",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeTracking"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tasks/{taskId}/updateorder": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Updates the order of the task with the specified id.",
        "description": "Updates the order of the task of a specific task status for project tasks.\r\nIf it is a private task it updates the order of the private tasks of the user.\r\nThis can have an impact of other tasks as well.\r\nIf the task is not appended to the end, the other tasks of the project within the same task status will get a new order.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to update the order of the task with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReorderingResult"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/taskschedules": {
      "get": {
        "tags": [
          "TaskSchedules"
        ],
        "summary": "Returns a list of task schedules.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskSchedule"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "TaskSchedules"
        ],
        "summary": "Creates a new task schedule for a given task and a given user.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The data to create a new task schedule from.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskScheduleForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskSchedule"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/taskschedules/bytaskid/{taskId}": {
      "post": {
        "tags": [
          "TaskSchedules"
        ],
        "summary": "Creates task schedules from a task by id.",
        "description": "Creates task schedules from a task by id. The task must have start and due date and at least one assignee.\r\n            If more than one user is assigned to the task, then the user needs to opt in to create task schedules for all assignees\r\n            by setting the\r\n            'createSchedulesForAllAssignees' query param to true. This requires admin or feature permissions.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "createSchedulesForAllAssignees",
            "in": "query",
            "description": "Whether schedules should be created for all assignees of the task.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/taskschedules/{taskScheduleId}": {
      "delete": {
        "tags": [
          "TaskSchedules"
        ],
        "summary": "Deletes a task schedule by id.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskScheduleId",
            "in": "path",
            "description": "The id of the task schedule.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "get": {
        "tags": [
          "TaskSchedules"
        ],
        "summary": "Returns a task schedule by id.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskScheduleId",
            "in": "path",
            "description": "The id of the task schedule.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskSchedule"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "TaskSchedules"
        ],
        "summary": "Updates a given task schedule.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskScheduleId",
            "in": "path",
            "description": "The id of the task schedule.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The task schedule data to update a task schedule.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskSchedulePutForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskSchedule"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasktemplates/{taskTemplateId}": {
      "get": {
        "tags": [
          "TaskTemplates"
        ],
        "summary": "Returns the task template with the specified id.",
        "description": "Returns the task template with the specified id.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskTemplateId",
            "in": "path",
            "description": "The id of the task template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskTemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/tasktemplates/{taskTemplateId}/checklistitemtemplates": {
      "get": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Returns the checklist item templates for a task template with the specified id.",
        "description": "To access the task template, 'read' permissions on the 'project-planning-data' feature or\r\non the 'project-manage-config' feature are required.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:read` permissions.</Check>",
        "parameters": [
          {
            "name": "taskTemplateId",
            "in": "path",
            "description": "The id of the task template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemTemplate"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "read"
        }
      },
      "post": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Creates a checklist item template for a task template with the specified id.",
        "description": "To access the task template, 'write' permissions on the 'project-planning-data' feature or\r\non the 'project-manage-config' feature are required.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "taskTemplateId",
            "in": "path",
            "description": "The id of the task template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to create the checklist item template.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChecklistItemTemplateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChecklistItemTemplateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistItemTemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      }
    },
    "/tasktemplates/{taskTemplateId}/checklistitemtemplates/{checklistItemTemplateId}": {
      "delete": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Deletes a checklist item template for a task template with the specified id.",
        "description": "To access the task template, 'write' permissions on the 'project-planning-data' feature or\r\non the 'project-manage-config' feature are required.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "taskTemplateId",
            "in": "path",
            "description": "The id of the task template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "checklistItemTemplateId",
            "in": "path",
            "description": "The id of the checklist item template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      },
      "get": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Returns the checklist item template for a task template with the specified id.",
        "description": "To access the task template, 'read' permissions on the 'project-planning-data' feature or\r\non the 'project-manage-config' feature are required.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:read` permissions.</Check>",
        "parameters": [
          {
            "name": "taskTemplateId",
            "in": "path",
            "description": "The id of the task template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "checklistItemTemplateId",
            "in": "path",
            "description": "The id of the checklist item template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItemTemplate"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "read"
        }
      },
      "put": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Updates a checklist item template for a task template with the specified id.",
        "description": "To access the task template, 'write' permissions on the 'project-planning-data' feature or\r\non the 'project-manage-config' feature are required.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "taskTemplateId",
            "in": "path",
            "description": "The id of the task template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "checklistItemTemplateId",
            "in": "path",
            "description": "The id of the checklist item template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the checklist item template.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChecklistItemTemplateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ChecklistItemTemplateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistItemTemplate"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      }
    },
    "/tasktemplates/{taskTemplateId}/recurrency": {
      "get": {
        "tags": [
          "TaskBundles"
        ],
        "summary": "Returns the existing recurrency rule for one task template.",
        "parameters": [
          {
            "name": "taskTemplateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskRecurrencyForm"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>"
      }
    },
    "/tasktemplates/{taskTemplateId}/setcustomfields": {
      "post": {
        "tags": [
          "CustomFields"
        ],
        "summary": "Sets the custom fields for a task template.",
        "description": "The required properties depend on the type of the custom field. Only task templates which are linked to a project template are allowed to have custom fields set.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "taskTemplateId",
            "in": "path",
            "description": "The id of the task template to set the custom fields for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model containing the details for setting the custom fields for a task template.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CustomFieldPostForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/tasktemplates/{taskTemplateId}/taskdependencytemplates": {
      "get": {
        "tags": [
          "TaskDependencyTemplates"
        ],
        "summary": "Returns the task dependency templates for a given task template.",
        "parameters": [
          {
            "name": "taskTemplateId",
            "in": "path",
            "description": "The id of the task template.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskDependencyTemplate"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "read"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:read` permissions.</Check>"
      }
    },
    "/tasktemplates/{tasktemplateId}/externalfiles": {
      "post": {
        "tags": [
          "TaskTemplateFiles"
        ],
        "summary": "Endpoint to batch create external files without uploading.",
        "description": "Endpoint to create file infos with batch operation.\r\nCreated file infos don't have a version.",
        "parameters": [
          {
            "name": "tasktemplateId",
            "in": "path",
            "description": "The id of the tasktemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "List of file forms.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalFileForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalFileForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/tasktemplates/{tasktemplateId}/files": {
      "delete": {
        "tags": [
          "TaskTemplateFiles"
        ],
        "summary": "Deletes the files of the specified tasktemplate.",
        "description": "Deletes the metadata and the different versions of the files.",
        "parameters": [
          {
            "name": "tasktemplateId",
            "in": "path",
            "description": "The id of the tasktemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "TaskTemplateFiles"
        ],
        "summary": "Returns all files of the tasktemplate with the specified id.",
        "description": "Returns all file metadata of the tasktemplate with the specified id.",
        "parameters": [
          {
            "name": "tasktemplateId",
            "in": "path",
            "description": "The id of the tasktemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileInfo"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TaskTemplateFiles"
        ],
        "summary": "Creates a new tasktemplate file for the tasktemplate with the specified id..",
        "description": "Uploads a new tasktemplate file for the tasktemplate with the specified id.\r\nUse this to upload a file as a form value along with the basic file meta data.\r\nThe file size must not exceed 1GB.",
        "parameters": [
          {
            "name": "tasktemplateId",
            "in": "path",
            "description": "The id of the tasktemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/tasktemplates/{tasktemplateId}/files/byuploadid": {
      "post": {
        "tags": [
          "FileUpload"
        ],
        "summary": "Creates a file from an upload id.",
        "description": "After a file has been uploaded to an upload URL generated from the <see cref=\"T:Awork.Files.Service.Feature.FileUpload.Endpoints.PostGenerateUploadURL\" /> endpoint, this endpoint can be used to create a file tasktemplate from the uploaded file by providing the upload id.",
        "parameters": [
          {
            "name": "tasktemplateId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadByUploadIdForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/tasktemplates/{tasktemplateId}/files/byurl": {
      "post": {
        "tags": [
          "TaskTemplateFiles"
        ],
        "summary": "Uploads a new file by providing an url.",
        "description": "The file needs to be a public available url.\r\nThe file size must not exceed 100MB.",
        "parameters": [
          {
            "name": "tasktemplateId",
            "in": "path",
            "description": "The id of the tasktemplate the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The url, name and description of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilePostForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FilePostForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/tasktemplates/{tasktemplateId}/files/{fileId}": {
      "delete": {
        "tags": [
          "TaskTemplateFiles"
        ],
        "summary": "Deletes the tasktemplate file with the specified id.",
        "description": "Deletes the metadata and the different versions of the file.",
        "parameters": [
          {
            "name": "tasktemplateId",
            "in": "path",
            "description": "The id of the tasktemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "TaskTemplateFiles"
        ],
        "summary": "Returns the file with the specified id of the tasktemplate with the specified id.",
        "description": "Returns the file metadata of the tasktemplate with the specified id.",
        "parameters": [
          {
            "name": "tasktemplateId",
            "in": "path",
            "description": "The id of the tasktemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TaskTemplateFiles"
        ],
        "summary": "Updates the metadata of the tasktemplate file with the specified id.",
        "description": "Updates the metadata of the tasktemplate file with the specified id.",
        "parameters": [
          {
            "name": "tasktemplateId",
            "in": "path",
            "description": "The id of the tasktemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the file with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/tasktemplates/{tasktemplateId}/files/{fileId}/changeentity": {
      "post": {
        "tags": [
          "TaskTemplateFiles"
        ],
        "summary": "Changes the tasktemplate this file belongs to.",
        "description": "Changes the tasktemplate this file belongs to.\r\nSwitch to the specified tasktemplate or to a global file\r\nif the 'EntityId' of the model is set to null.",
        "parameters": [
          {
            "name": "tasktemplateId",
            "in": "path",
            "description": "The id of the tasktemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the entity information of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileEntityForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileEntityForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/tasktemplates/{tasktemplateId}/files/{fileId}/copy": {
      "post": {
        "tags": [
          "TaskTemplateFiles"
        ],
        "summary": "Copies the file to a new tasktemplate.",
        "description": "Copies the file to a new tasktemplate (meta and content).",
        "parameters": [
          {
            "name": "tasktemplateId",
            "in": "path",
            "description": "The id of the tasktemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the entity information of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileCopyForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileCopyForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/tasktemplates/{tasktemplateId}/files/{fileId}/download": {
      "get": {
        "tags": [
          "TaskTemplateFiles"
        ],
        "summary": "Returns the content of the tasktemplate file with the specified id.",
        "description": "Returns the content of the tasktemplate file. Uses the latest file version.\r\nIf the tasktemplate file is an image and the width and height are set,\r\nthe image will be resized before it is returned.",
        "parameters": [
          {
            "name": "tasktemplateId",
            "in": "path",
            "description": "The id of the tasktemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Set width to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Set height to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "description": "Whether to crop the image when resizing it.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/tasktemplates/{tasktemplateId}/files/{fileId}/pdf": {
      "get": {
        "tags": [
          "TaskTemplateFiles"
        ],
        "summary": "Returns the content of the file with the specified id as pdf.\r\ntype or conversion not possible.",
        "description": "Returns the content of the tasktemplate file. Uses the latest file version.",
        "parameters": [
          {
            "name": "tasktemplateId",
            "in": "path",
            "description": "The id of the tasktemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "description": "If inline is false, content-disposition header is attachment.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/tasktemplates/{tasktemplateId}/files/{fileId}/shareurl": {
      "get": {
        "tags": [
          "TaskTemplateFiles"
        ],
        "summary": "Returns an url to share the file.",
        "description": "Returns a url to share the file.",
        "parameters": [
          {
            "name": "tasktemplateId",
            "in": "path",
            "description": "The id of the tasktemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/tasktemplates/{tasktemplateId}/files/{fileId}/versions": {
      "get": {
        "tags": [
          "TaskTemplateFiles"
        ],
        "summary": "Returns all file versions of the specified tasktemplate file.",
        "description": "Returns all file versions of the specified tasktemplate file.",
        "parameters": [
          {
            "name": "tasktemplateId",
            "in": "path",
            "description": "The id of the tasktemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileVersion"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TaskTemplateFiles"
        ],
        "summary": "Uploads a new version of the tasktemplate file with the specified id.",
        "description": "Uploads a new version of an tasktemplate file.\r\nUse this to upload a file as a form value along with the basic file meta data.\r\nThe file size must not exceed 1GB.",
        "parameters": [
          {
            "name": "tasktemplateId",
            "in": "path",
            "description": "The id of the tasktemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVersion"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/tasktemplates/{tasktemplateId}/files/{fileId}/versions/{versionId}": {
      "get": {
        "tags": [
          "TaskTemplateFiles"
        ],
        "summary": "Returns the tasktemplate file version with the specified id.",
        "description": "Returns the tasktemplate file version with the specified id.",
        "parameters": [
          {
            "name": "tasktemplateId",
            "in": "path",
            "description": "The id of the tasktemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The id of the file version.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVersion"
                }
              }
            }
          }
        }
      }
    },
    "/tasktemplates/{tasktemplateId}/files/{fileId}/versions/{versionId}/download": {
      "get": {
        "tags": [
          "TaskTemplateFiles"
        ],
        "summary": "Returns the content of the tasktemplate file version with the specified id.",
        "description": "Returns the content of the tasktemplate file version with the specified id.",
        "parameters": [
          {
            "name": "tasktemplateId",
            "in": "path",
            "description": "The id of the tasktemplate.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The id of the file version.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        }
      }
    },
    "/taskviews": {
      "get": {
        "tags": [
          "TaskViews"
        ],
        "summary": "Returns all task views that are shared within the workspace.",
        "description": "Returns all task views. Task views that are not shared are not considered.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskView"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/taskviews/{taskViewId}": {
      "get": {
        "tags": [
          "TaskViews"
        ],
        "summary": "Returns a single task view that is shared within the workspace.",
        "description": "Returns one task view that is specified by the id. Task views that not are shared are not considered.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "taskViewId",
            "in": "path",
            "description": "The id of the task view.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskView"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/teams": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Returns all teams.",
        "description": "If the include query params aren't set or false, the specified collection property is null in the response.\r\nIf the include param is true, but there are no entities in the collection, an empty collection is returned.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "includeUserIds",
            "in": "query",
            "description": "Whether the user ids should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeProjectIds",
            "in": "query",
            "description": "Whether the project ids should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Team"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Creates a new team.",
        "description": "Creates a new team.\r\nNo validations are done for color and icon property, can be any string.\r\nThrows IllegalOperationException if team with the same name already exists.\r\n\r\n<Info title=\"Subscription Level\">This endpoint requires the Standard plan or higher.</Info>\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin.</Check>",
        "requestBody": {
          "description": "The team to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TeamForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true"
        },
        "x-subscriptionlevel": {
          "minimumPlan": "standard"
        }
      }
    },
    "/teams/{teamId}": {
      "delete": {
        "tags": [
          "Teams"
        ],
        "summary": "Deletes the team with the specified id.",
        "description": "Deletes the team with the specified id.\r\nDeletes all related UserInTeamEntities, ProjectInTeamEntities, DocumentToTeamEntities and DocumentSpaceToTeamEntities as well.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin.</Check>",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "The id of the team.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true"
        }
      },
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Returns the team with the specified id.",
        "description": "Returns the team with the specified id.\r\nReturns NotFound if the team doesn't exist.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "The id of the team.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "includeUserIds",
            "in": "query",
            "description": "Whether the user ids should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeProjectIds",
            "in": "query",
            "description": "Whether the project ids should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "Teams"
        ],
        "summary": "Updates the team with the specified id.",
        "description": "Updates the team with the specified id.\r\nOnly updates properties which are not null or whitespace.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin.</Check>",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "The id of the team.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "includeUserIds",
            "in": "query",
            "description": "Whether the user ids should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeProjectIds",
            "in": "query",
            "description": "Whether the project ids should be included.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "The new team values.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TeamForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true"
        }
      }
    },
    "/teams/{teamId}/addprojects": {
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Adds projects to a team.",
        "description": "Returns the created project in team entities.\r\nThrows BadRequestException if project ids are null or empty.\r\nThrows IllegalOperationException if projects fetched from ids failed or returned no projects.\r\nThrwos IllegalOperationException if projects are already connected to the team.\r\nOnly creates the project in team entities for projects the user has 'write' permissions of feature\r\n'project-master-data' for or is the owner.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "The team id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The ids of the projects to add.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "example": [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "example": [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectInTeam"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/teams/{teamId}/addusers": {
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Adds users to a team.",
        "description": "Returns the created user in team entities.\r\nThrows BadRequestException if user ids are null or empty.\r\nThrows IllegalOperationException if users fetched from ids failed, returned no users or misses a user from the userIds.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin.</Check>",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "The team id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The ids of users to add.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "example": [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "example": [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInTeam"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true"
        }
      }
    },
    "/teams/{teamId}/removeprojects": {
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Removes projects from a team.",
        "description": "Throws BadRequestException if project ids are null or empty.\r\nThrows BadRequestException if no project in teams could be found for supplied project ids.\r\nValidates the project ids by checking if entries exists for that project in the database.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "The team id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The ids of projects to remove.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "example": [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "example": [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/teams/{teamId}/removeusers": {
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Removes users from a team.",
        "parameters": [
          {
            "name": "teamId",
            "in": "path",
            "description": "The team id.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The ids of users to remove.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "example": [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              },
              "example": [
                "123e4567-e89b-12d3-a456-426614174000"
              ]
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin.</Check>"
      }
    },
    "/temporaryfiles": {
      "get": {
        "tags": [
          "TemporaryFiles"
        ],
        "summary": "Returns all temporary files of the current user.",
        "description": "Returns the meta information of all temporary files\r\nof the current user.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileInfo"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "TemporaryFiles"
        ],
        "summary": "Creates a new temporary file.",
        "description": "Uploads a new temporary file.\r\nUse this to upload a file as a form value along with the basic file meta data.\r\nThe file size must not exceed 1GB.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/temporaryfiles/{fileId}": {
      "get": {
        "tags": [
          "TemporaryFiles"
        ],
        "summary": "Returns the temporary file with the specified id.",
        "description": "Returns the meta information of the temporary file\r\nof the current user.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "TemporaryFiles"
        ],
        "summary": "Updates the meta information of the temporary file with the specified id.",
        "description": "Updates the meta information of the temporary file with the specified id.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the temporary file with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/temporaryfiles/{fileId}/download": {
      "get": {
        "tags": [
          "TemporaryFiles"
        ],
        "summary": "Returns the content of the temporary file with the specified id.",
        "description": "Returns the content of the temporary file.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/temporaryfiles/{fileId}/setentity": {
      "post": {
        "tags": [
          "TemporaryFiles"
        ],
        "summary": "Sets the temporary file to a global or entity file.",
        "description": "Links the temporary file to the specified entity or switches\r\nto a global file if the 'EntityId' of the model is set to null.\r\nThe file is no longer a temporary file afterwards and\r\nbecomes visible.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to set the entity information of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileEntityForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileEntityForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/timebookings": {
      "get": {
        "tags": [
          "TimeBookings"
        ],
        "summary": "Returns a list of time bookings.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeBooking"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "TimeBookings"
        ],
        "summary": "Creates a new time booking for a given project and user.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The data to create a new time booking.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeBookingForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeBooking"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/timebookings/{timeBookingId}": {
      "delete": {
        "tags": [
          "TimeBookings"
        ],
        "summary": "Deletes a time booking by id.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "timeBookingId",
            "in": "path",
            "description": "The id of the time booking.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "TimeBookings"
        ],
        "summary": "Updates a given time booking.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "timeBookingId",
            "in": "path",
            "description": "The id of the time booking.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The updated data for the time booking.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeBookingForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeBooking"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/timeentries": {
      "get": {
        "tags": [
          "TimeEntries"
        ],
        "summary": "Returns all time entries.",
        "description": "Returns all time entries.\r\n            Depending on the time entry, the calling users has to have several permissions to get the time entry.\r\n            No permissions are required if the calling user is owner of this time entry (this includes external timetrackings from connected projects).\r\n            If the calling user is not the creator of the time entry and the time entry is connected to a project, 'write'\r\n            permissions on the 'project-timetracking' feature are necessary (this does NOT include external timetrackings from connected projects).\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "searchReindex",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeTracking"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "TimeEntries"
        ],
        "summary": "Creates a new time entry.",
        "description": "Creates a new time entry.\r\n            Depending on the time entry, the calling users has to have several permissions to create the time entry.\r\n            No permissions are required if the calling user is owner of this time entry.\r\n            If the calling user is not the creator of the time entry and the time entry is connected to a project, 'write'\r\n            permissions\r\n            on the 'project-timetracking' feature are necessary.\r\n            If the time entry is connected to a task, the user needs to be assignee of this task or the user needs permissions on:\r\n            'project-planning-data' if it is a project task.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The form to create a time entry.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeEntryPostForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeTracking"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/timeentries/batch/{operation}": {
      "post": {
        "tags": [
          "TimeEntries"
        ],
        "summary": "Edits multiple time entries using the specified operation.",
        "description": "The user is only allowed to edit time entries they have permissions for.\r\n            Returns MultiStatus. Includes the list of successfully changed, not found, unauthorized, and invalid time entry ids.\r\n            Returns BadRequest if the validation of the form fails, f.e. the new type of work cannot be found.\r\n            \r\n            Supported Operations:\r\n            delete: Deletes all time entries. Only admins can delete already billed time entries.\r\n            setTypeOfWork: Changes the type of work for a list of time entries. TODO: check if only admins should be able to change\r\n            for billed.\r\n            setIsBillable: Changes the billability for a list of time entries. Already billed time entries can only be changed to\r\n            being unbillable by admins. In this case, the IsBilled flag is also set to false.\r\n            setIsBilled: Changes the billing status for a list of time entries. Only admins can change the billing status back to\r\n            unbilled for already billed time entries.\r\n            setProject: Changes the project for a list of time entries. Only admins can change the project for already billed time\r\n            entries. Setting the project unsets the previous project and task.\r\n            setTask: Changes the task for a list of time entries. Only admins can change the task for already billed time entries.\r\n            Setting the task automatically sets the project if that task is a project task.\r\n            setUser: Changes the user for a list of time entries. Only admins can change the user for already billed time entries.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "operation",
            "in": "path",
            "description": "The name of the operation to execute on the given time entries. Valid values are: delete,\r\nsetTypeOfWork, setIsBillable, setIsBilled, setProject, setTask, setUser.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The form with additional info for the batch operation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeEntryBatchOperationForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiStatusResult"
                }
              }
            }
          },
          "207": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiStatusResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/timeentries/delete": {
      "post": {
        "tags": [
          "TimeEntries"
        ],
        "summary": "Deletes the time entry with the specified ids.",
        "description": "This endpoint is deprecated, please use the batch endpoint POST /timeentries/batch/delete instead.\r\n\r\nDeletes the time entries with the specified ids.\r\nDepending on the time entry, the calling users has to have several permissions to delete the time entries.\r\nNo permissions are required if the calling user is owner of this time entry.\r\nIf the calling user is not the creator of the time entry and the time entry is connected to a project, 'write'\r\npermissions\r\non the 'project-timetracking' feature are necessary.\r\nIf the time entry is connected to a task, the user needs to be assignee of this task or the user needs permissions on:\r\n'project-planning-data' if it is a project task.\r\nIf the time entry is billed, Admin permissions are required.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The model for ids of the time entries.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTimeEntriesForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTimeEntriesForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/timeentries/setbillable": {
      "post": {
        "tags": [
          "TimeEntries"
        ],
        "summary": "Sets the time entries with the specified ids to to billable.",
        "description": "Depending on the time entry, the calling users has to have several permissions to edit the time entries.\r\nNo permissions are required if the calling user is owner of this time entry.\r\nIf the calling user is not the creator of the time entry and the time entry is connected to a project, 'write'\r\npermissions\r\non the 'project-timetracking' feature are necessary.\r\nIf the time entry is connected to a task, the user needs to be assignee of this task or the user needs 'write'\r\npermissions on:\r\n'project-timetracking' if it is a project task.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The model for ids of the time entries.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTimeEntryBillableForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetTimeEntryBillableForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/timeentries/setbilled": {
      "post": {
        "tags": [
          "TimeEntries"
        ],
        "summary": "Sets the time entries with the specified ids to billed.",
        "description": "Depending on the time entry, the calling users has to have several permissions to edit the time entries.\r\nNo permissions are required if the calling user is owner of this time entry.\r\nIf the calling user is not the creator of the time entry and the time entry is connected to a project, 'write'\r\npermissions\r\non the 'project-timetracking' feature are necessary.\r\nIf the time entry is connected to a task, the user needs to be assignee of this task or the user needs permissions on:\r\n'project-planning-data' if it is a project task.\r\nIf the time entry is billed, the permissions can be ignored because there is no change.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The model for ids of the time entries.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTimeEntryBilledForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetTimeEntryBilledForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/timeentries/settypeofwork": {
      "post": {
        "tags": [
          "TimeEntries"
        ],
        "summary": "Sets the type of work of the specified timeentries.",
        "description": "Depending on the time entry, the calling users has to have several permissions to edit the time entries.\r\nNo permissions are required if the calling user is owner of this time entry.\r\nIf the calling user is not the creator of the time entry and the time entry is connected to a project, 'write'\r\npermissions\r\non the 'project-timetracking' feature are necessary.\r\nIf the time entry is connected to a task, the user needs to be assignee of this task or the user needs permissions on:\r\n'project-planning-data' if it is a project task.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The model for ids of the time entries.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTimeEntryTypeOfWork"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetTimeEntryTypeOfWork"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/timeentries/setunbillable": {
      "post": {
        "tags": [
          "TimeEntries"
        ],
        "summary": "Sets the time entries with the specified ids to to unbillable.",
        "description": "Already billed time entries cannot be set to unbillable -> Badrequest\r\nDepending on the time entry, the calling users has to have several permissions to edit the time entries.\r\nNo permissions are required if the calling user is owner of this time entry.\r\nIf the calling user is not the creator of the time entry and the time entry is connected to a project, 'write'\r\npermissions\r\non the 'project-timetracking' feature are necessary.\r\nIf the time entry is connected to a task, the user needs to be assignee of this task or the user needs write\r\npermissions on:\r\n'project-timetracking' if it is a project task.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The model for ids of the time entries.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTimeEntryBillableForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetTimeEntryBillableForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/timeentries/setunbilled": {
      "post": {
        "tags": [
          "TimeEntries"
        ],
        "summary": "Sets the time entries with the specified ids to unbilled.",
        "description": "For setting already billed time entries to unbilled, the user needs to have admin permissions.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The model for ids of the time entries.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTimeEntryBilledForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetTimeEntryBilledForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": true,
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/timeentries/simplified": {
      "get": {
        "tags": [
          "TimeEntries"
        ],
        "summary": "Retrieves all time entries with a simplified model based on the grouping parameter.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "grouping",
            "in": "query",
            "description": "The group-by parameter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SimplifiedTimeTracking"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/timeentries/{timeEntryId}": {
      "delete": {
        "tags": [
          "TimeEntries"
        ],
        "summary": "Deletes the time entry with the specified id.",
        "description": "Deletes the time entry with the specified id.\r\n            Depending on the time entry, the calling users has to have several permissions to delete the time entry.\r\n            No permissions are required if the calling user is owner of this time entry.\r\n            If the calling user is not the creator of the time entry and the time entry is connected to a project, 'write'\r\n            permissions\r\n            on the 'project-timetracking' feature are necessary.\r\n            If the time entry is billed, Admin permissions are required.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "timeEntryId",
            "in": "path",
            "description": "The id of the time entry.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "get": {
        "tags": [
          "TimeEntries"
        ],
        "summary": "Get a time entry by id.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "timeEntryId",
            "in": "path",
            "description": "The id of the time entry.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeTracking"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "TimeEntries"
        ],
        "summary": "Updates the time entry with the specified id.",
        "description": "Updates the time entry with the specified id.\r\n            Depending on the time entry, the calling users has to have several permissions to update the time entry:\r\n            No permissions are required if the calling user is owner of this time entry.\r\n            If the calling user is not the creator of the time entry and the time entry is connected to a project, 'write'\r\n            permissions\r\n            on the 'project-timetracking' feature are necessary.\r\n            If the time entry is connected to a task, the user needs to be assignee of this task or the user needs permissions on:\r\n            'project-planning-data' if it is a project task.\r\n            The break duration of the time entry is kept the same. The break duration cannot be smaller than the duration of the\r\n            time entry. To remove the breaks, use the endpoint POST /timeentries/{id}/removeBreaks.\r\n            Following combination of times and duration are allowed for already completed time entries:\r\n            - start time (local or utc) and end time (local or utc) (this option always takes precedence)\r\n            - start time (local or utc) and duration\r\n            - end time (local or utc) and duration\r\n            For running time entries, you can only update the start time (local or utc) while the duration stays 0.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "timeEntryId",
            "in": "path",
            "description": "The id of the time entry.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The form to update the time entry with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeTrackingPutForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeTracking"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/timeentries/{timeEntryId}/removebreaks": {
      "post": {
        "tags": [
          "TimeEntries"
        ],
        "summary": "Handles removing all finished breaks from a time entry.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "timeEntryId",
            "in": "path",
            "description": "The id of the time entry.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeTracking"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/timereports": {
      "get": {
        "tags": [
          "TimeReports"
        ],
        "summary": "Returns all time reports of a user.",
        "description": "Returns time reports the user created as well as the shared time reports of\r\nother users.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeReport"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/typeofwork": {
      "get": {
        "tags": [
          "TypeOfWork"
        ],
        "summary": "Gets all types of work.",
        "description": "Returns all type of work.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "showArchived",
            "in": "query",
            "description": "Include archived types of work in the results. Not required. False by default.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TypeOfWork"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "post": {
        "tags": [
          "TypeOfWork"
        ],
        "summary": "Creates a new type of work.",
        "description": "Creates a new type of work.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "requestBody": {
          "description": "The type of work to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TypeOfWorkForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TypeOfWorkForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TypeOfWork"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      }
    },
    "/typeofwork/icons": {
      "get": {
        "tags": [
          "TypeOfWork"
        ],
        "summary": "Gets all possible icons for type of work.",
        "description": "Returns all possible icons for type of work.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/typeofwork/{id}": {
      "get": {
        "tags": [
          "TypeOfWork"
        ],
        "summary": "Gets the type of work with the specified id.",
        "description": "Gets a type of work.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the type of work.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TypeOfWork"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "TypeOfWork"
        ],
        "summary": "Changes the properties of an existing type of work.",
        "description": "A change will also effect all related tasks and time entries.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `task-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the type which will be changed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The type of work with the changed properties.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TypeOfWorkForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TypeOfWorkForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TypeOfWork"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "task-manage-config": "write"
        }
      }
    },
    "/typeofwork/{typeOfWorkId}/delete": {
      "post": {
        "tags": [
          "TypeOfWork"
        ],
        "summary": "Deletes the type of work with the specified id.",
        "description": "Deletes the type of work with the specified id.\r\nIf any tasks, task templates or time entries still use this type, the id of a new type needs to be provided.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "typeOfWorkId",
            "in": "path",
            "description": "The id of the task type.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to delete the task type.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTaskTypeForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTaskTypeForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/typeofwork/{typeOfWorkId}/setarchived": {
      "post": {
        "tags": [
          "TypeOfWork"
        ],
        "summary": "Archives or unarchives the type of work with the specified id.",
        "description": "Archives or unarchives the type of work with the specified id.\r\nAn archived type of work still exists for all tasks and time entries currently using it,\r\nbut can no longer be created with this type of work.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "typeOfWorkId",
            "in": "path",
            "description": "Id of the type of work which will be archived.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to archive the type of work.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivedForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivedForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TypeOfWork"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns all users.",
        "description": "Returns all users with their details like status, contact info and more.\r\nReturns all users if the user has read permissions on the feature\r\nuser-master-data, otherwise returns only his own user.\r\nArchived users are excluded by default. You can include them by setting the 'showArchived' query parameter.\r\nIf the permissions have UserTeamsData Feature, the filter for teams is applied.\r\nBeware that this will also include API users in the response.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "showArchived",
            "in": "query",
            "description": "Include archived users in the results. Not required. False by default.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/users/deletetags": {
      "post": {
        "tags": [
          "UserTags"
        ],
        "summary": "Removes tag from all entities.",
        "description": "Removes tag from all projects.\r\nTo delete the tags the user needs 'write' permissions on the specified entity.\r\nReturns 204 NoContent if tag has been removed successfully.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "requestBody": {
          "description": "The model to remove the tag.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTagForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTagForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns the currently logged-in user and workspace.",
        "description": "Returns the currently logged-in user, including workspace information.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAndWorkspace"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/users/projecttimebookings": {
      "get": {
        "tags": [
          "TimeBookings"
        ],
        "summary": "Returns the time bookings in a specified time range for a list of users.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userIds",
            "in": "query",
            "description": "The ids of the users to get the time bookings for.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "description": "A list of GUIDs provided as a comma-separated string in the query parameter"
            }
          },
          {
            "name": "intervalStart",
            "in": "query",
            "description": "The start of the interval to filter by.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2024-5-13"
          },
          {
            "name": "intervalEnd",
            "in": "query",
            "description": "The end of the interval to filter by.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2024-5-21"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetTimeBookingForUsersResult"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/users/tags": {
      "get": {
        "tags": [
          "UserTags"
        ],
        "summary": "Returns all tags that are currently in use.",
        "description": "Returns all tags that are currently in use ordered by count.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseTagModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/users/timebookings": {
      "get": {
        "tags": [
          "TimeBookings"
        ],
        "summary": "Returns the time bookings in a specified time range for a list of users.",
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userIds",
            "in": "query",
            "description": "The ids of the users to get the time bookings for.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "description": "A list of GUIDs provided as a comma-separated string in the query parameter"
            }
          },
          {
            "name": "intervalStart",
            "in": "query",
            "description": "The start of the interval to filter by.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2024-5-13"
          },
          {
            "name": "intervalEnd",
            "in": "query",
            "description": "The end of the interval to filter by.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2024-5-21"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetTimeBookingForUsersResult"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/users/workload": {
      "get": {
        "tags": [
          "Workload"
        ],
        "summary": "Returns the users' workloads per day.",
        "description": "Returns the users' workloads per day for projects, tasks, task schedules and calendar events\r\n            that have an overlap with the interval specified by intervalStart and intervalEnd.\r\n            Takes into consideration weekly availability, absences, user capacity, planned efforts, as well as project budget.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `user-planning-data:read` permissions.</Check>",
        "parameters": [
          {
            "name": "userIds",
            "in": "query",
            "description": "The ids of the users to get the workload for, as a comma-separated list of Guids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "description": "A list of GUIDs provided as a comma-separated string in the query parameter"
            }
          },
          {
            "name": "intervalStart",
            "in": "query",
            "description": "The start of the interval to filter by.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "intervalEnd",
            "in": "query",
            "description": "The end of the interval to filter by.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "roughPlanningFrom",
            "in": "query",
            "description": "The number of days from today when the rough planning should start.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fetchDetails",
            "in": "query",
            "description": "(Optional - default: false) If set to true, the result will contain the hierarchy of elements that are contributing\r\nto the workload (projects, tasks, appointments).\r\nOtherwise it will return only the workload value.\r\nWorks only for single day queries.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "ignoreCalendarEvents",
            "in": "query",
            "description": "Whether to ignore calendar events. Can significantly improve performance.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetWorkloadForUsersResult"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "user-planning-data": "read"
        }
      }
    },
    "/users/{userId}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes the user with the specified id.",
        "description": "Deletes the user with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `user-manage-config:delete` permissions.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "user-manage-config": "delete"
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns the user with the specified id.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>"
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates the user with the specified id.",
        "description": "Updates the user with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or the creator or have `user-master-data:write` permissions.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The new user values.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "owner": "true",
          "user-master-data": "write"
        }
      }
    },
    "/users/{userId}/activate": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Activates the user with the specified id.",
        "description": "Activates the user with the specified id.\r\nThe user is then allowed to sign in again and will be notified via email.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `user-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "user-manage-config": "write"
        }
      }
    },
    "/users/{userId}/addtags": {
      "post": {
        "tags": [
          "UserTags"
        ],
        "summary": "Adds a batch of new tags to the user with the specified id.",
        "description": "The request fails if one of the tags is invalid (e.g. empty or duplicate).\r\nTo create the tags the user needs 'write' permissions on the specified user.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to add tags.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TagForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseTagModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/users/{userId}/allavailabletasks": {
      "get": {
        "tags": [
          "AssignedTasks"
        ],
        "summary": "Returns all tasks the user is allowed to see.",
        "description": "Returns all tasks the user is allowed to see. This contains\r\nproject tasks if the user has \"project-planning\" permissions,\r\nall assigned tasks and also\r\nprivate tasks created by the user and assigned to other users.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user. Not required on the /me endpoint.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/users/{userId}/assignedtasks": {
      "get": {
        "tags": [
          "AssignedTasks"
        ],
        "summary": "Returns all tasks assigned to the user.",
        "description": "Returns all tasks assigned to a user.\r\nIf a user gets his own tasks, the private tasks are part of the result as well.\r\nIf you need only tasks of projects in status 'progress', set the 'inProgress' parameter to 'true'.\r\nThe assigned on from and to parameters are optional, but both must be provided if you want to use the filter.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user. Not required on the /me endpoint.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "inProgress",
            "in": "query",
            "description": "Whether the project of a task is in progress or not.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "assignedOnFrom",
            "in": "query",
            "description": "The value to filter the task assignments for. If this value is set, tasks are returned\r\nonly when the assignment date for the provided userId is greater or equal.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "assignedOnTo",
            "in": "query",
            "description": "The value to filter the task assignments for. If this value is set, tasks are returned only\r\nwhen the assignment date for the provided userId is less or equal.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/users/{userId}/assignedtasks/{taskId}": {
      "get": {
        "tags": [
          "AssignedTasks"
        ],
        "summary": "Returns the assigned task with the specified id.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user. Not required on the /me endpoint.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>"
      }
    },
    "/users/{userId}/capacity": {
      "get": {
        "tags": [
          "UserCapacity"
        ],
        "summary": "Returns the capacity of the specified user.",
        "description": "Returns the capacity of the specified user.\r\nUser planning data or admin permissions are required if the capacity of the specified user\r\ndoes not belong to the calling user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCapacity"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ]
      },
      "put": {
        "tags": [
          "UserCapacity"
        ],
        "summary": "Updates the capacity of the specified user.",
        "description": "Updates the capacity of the user with the specified id.\r\nUser planning data or admin permissions are required if the capacity of the specified user\r\ndoes not belong to the calling user.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The new user capacity values.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCapacityForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserCapacityForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCapacity"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ]
      }
    },
    "/users/{userId}/contactinfo": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns the contact infos of the user with the specified id.",
        "description": "Returns the contact infos of the user with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or the creator or have `user-master-data:read` permissions.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactInfo"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "owner": "true",
          "user-master-data": "read"
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Creates a new contact info for the user with the specified id.",
        "description": "Creates a new contact info for the user with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or the creator or have `user-master-data:write` permissions.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The contact info to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactInfoFormForUsers"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactInfoFormForUsers"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "owner": "true",
          "user-master-data": "write"
        }
      }
    },
    "/users/{userId}/contactinfo/{contactInfoId}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes the contact info of the user with the specified id.",
        "description": "Deletes the contact info of the user with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or the creator or have `user-master-data:write` permissions.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "contactInfoId",
            "in": "path",
            "description": "The id of the contact info.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "owner": "true",
          "user-master-data": "write"
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns the contact info of the user with the specified id.",
        "description": "Returns the contact info of the user with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or the creator or have `user-master-data:read` permissions.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "contactInfoId",
            "in": "path",
            "description": "The id of the contact info.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "owner": "true",
          "user-master-data": "read"
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates the contact info of the user with the specified id.",
        "description": "Updates the contact info of the user with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or the creator or have `user-master-data:write` permissions.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "contactInfoId",
            "in": "path",
            "description": "The id of the contact info.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The contact info model.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactInfoFormForUsers"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactInfoFormForUsers"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "owner": "true",
          "user-master-data": "write"
        }
      }
    },
    "/users/{userId}/deactivate": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Deactivates the user with the specified id.",
        "description": "Deactivates the user with the specified id.\r\nA deactivated user can no longer sign in.\r\nIt is only possible if the user is not the last admin user.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `user-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "user-manage-config": "write"
        }
      }
    },
    "/users/{userId}/deletetags": {
      "post": {
        "tags": [
          "UserTags"
        ],
        "summary": "Removes tags from the user with the specified id.",
        "description": "Removes tags from the project with the specified id.\r\nTo delete the tags the user needs 'write' permissions on the specified user.\r\nReturns 204 NoContent if all tags have been removed successfully.\r\nReturns 207 MultiStatus if at least one tag could not be removed, including the reasons.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to remove the tag.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteTagForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeleteTagForm"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/users/{userId}/externalfiles": {
      "post": {
        "tags": [
          "UserFiles"
        ],
        "summary": "Endpoint to batch create external files without uploading.",
        "description": "Endpoint to create file infos with batch operation.\r\nCreated file infos don't have a version.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "List of file forms.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalFileForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalFileForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/files": {
      "delete": {
        "tags": [
          "UserFiles"
        ],
        "summary": "Deletes the files of the specified user.",
        "description": "Deletes the metadata and the different versions of the files.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "UserFiles"
        ],
        "summary": "Returns all files of the user with the specified id.",
        "description": "Returns all file metadata of the user with the specified id.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileInfo"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserFiles"
        ],
        "summary": "Creates a new user file for the user with the specified id..",
        "description": "Uploads a new user file for the user with the specified id.\r\nUse this to upload a file as a form value along with the basic file meta data.\r\nThe file size must not exceed 1GB.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/users/{userId}/files/byurl": {
      "post": {
        "tags": [
          "UserFiles"
        ],
        "summary": "Uploads a new file by providing an url.",
        "description": "The file needs to be a public available url.\r\nThe file size must not exceed 100MB.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The url, name and description of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilePostForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FilePostForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/files/{fileId}": {
      "delete": {
        "tags": [
          "UserFiles"
        ],
        "summary": "Deletes the user file with the specified id.",
        "description": "Deletes the metadata and the different versions of the file.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "UserFiles"
        ],
        "summary": "Returns the file with the specified id of the user with the specified id.",
        "description": "Returns the file metadata of the user with the specified id.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "UserFiles"
        ],
        "summary": "Updates the metadata of the user file with the specified id.",
        "description": "Updates the metadata of the user file with the specified id.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the file with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/files/{fileId}/changeentity": {
      "post": {
        "tags": [
          "UserFiles"
        ],
        "summary": "Changes the user this file belongs to.",
        "description": "Changes the user this file belongs to.\r\nSwitch to the specified user or to a global file\r\nif the 'EntityId' of the model is set to null.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the entity information of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileEntityForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileEntityForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/files/{fileId}/copy": {
      "post": {
        "tags": [
          "UserFiles"
        ],
        "summary": "Copies the file to a new user.",
        "description": "Copies the file to a new user (meta and content).",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the entity information of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileCopyForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileCopyForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/files/{fileId}/download": {
      "get": {
        "tags": [
          "UserFiles"
        ],
        "summary": "Returns the content of the user file with the specified id.",
        "description": "Returns the content of the user file. Uses the latest file version.\r\nIf the user file is an image and the width and height are set,\r\nthe image will be resized before it is returned.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Set width to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Set height to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "description": "Whether to crop the image when resizing it.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/files/{fileId}/pdf": {
      "get": {
        "tags": [
          "UserFiles"
        ],
        "summary": "Returns the content of the file with the specified id as pdf.\r\ntype or conversion not possible.",
        "description": "Returns the content of the user file. Uses the latest file version.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "description": "If inline is false, content-disposition header is attachment.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/files/{fileId}/shareurl": {
      "get": {
        "tags": [
          "UserFiles"
        ],
        "summary": "Returns an url to share the file.",
        "description": "Returns a url to share the file.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/files/{fileId}/versions": {
      "get": {
        "tags": [
          "UserFiles"
        ],
        "summary": "Returns all file versions of the specified user file.",
        "description": "Returns all file versions of the specified user file.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileVersion"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserFiles"
        ],
        "summary": "Uploads a new version of the user file with the specified id.",
        "description": "Uploads a new version of an user file.\r\nUse this to upload a file as a form value along with the basic file meta data.\r\nThe file size must not exceed 1GB.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVersion"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/users/{userId}/files/{fileId}/versions/{versionId}": {
      "get": {
        "tags": [
          "UserFiles"
        ],
        "summary": "Returns the user file version with the specified id.",
        "description": "Returns the user file version with the specified id.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The id of the file version.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVersion"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/files/{fileId}/versions/{versionId}/download": {
      "get": {
        "tags": [
          "UserFiles"
        ],
        "summary": "Returns the content of the user file version with the specified id.",
        "description": "Returns the content of the user file version with the specified id.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The id of the file version.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/otherprivatetasks": {
      "get": {
        "tags": [
          "PrivateTasks"
        ],
        "summary": "Returns all private tasks that a user created and assigned to someone else.",
        "description": "Private tasks are always created for the current user but can be reassigned to other users afterwards.\r\nThis route returns all private tasks that were originally created by the user but were reassigned to someone else.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user. Not required when using the /me route.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/users/{userId}/otherprivatetasks/{taskId}": {
      "get": {
        "tags": [
          "PrivateTasks"
        ],
        "summary": "Returns a private tasks that a user created and assigned to someone else.",
        "description": "Private tasks are always created for the current user but can be reassigned to other users afterwards.\r\nThis route returns all private tasks that were origianally created by the user but were reassigned to someone else.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user. Not required when using the /me route.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the private task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/users/{userId}/otherprivatetasks/{taskId}/checklistitems": {
      "get": {
        "tags": [
          "ChecklistItems"
        ],
        "summary": "Returns the checklist items for a private task with the specified id.",
        "description": "The user needs to be the creator of the task.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user. Not required when using the /me route.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItem"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/users/{userId}/otherprivatetasks/{taskId}/checklistitems/{checklistItemId}": {
      "get": {
        "tags": [
          "ChecklistItems"
        ],
        "summary": "Returns a checklist item for a private task with the specified id.",
        "description": "The user needs to be the creator of the task.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user. Not required when using the /me route.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "checklistItemId",
            "in": "path",
            "description": "The id of the checklist item.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistItem"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/users/{userId}/privatetasks": {
      "get": {
        "tags": [
          "PrivateTasks"
        ],
        "summary": "Returns all private tasks of the user with the specified id.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user. Not required when using the /me route.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>"
      }
    },
    "/users/{userId}/privatetasks/taskstatuses": {
      "get": {
        "tags": [
          "PrivateTasks"
        ],
        "summary": "Returns the task statuses for private tasks.",
        "description": "Returns the task statuses for private tasks.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskStatus"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/users/{userId}/privatetasks/{taskId}": {
      "get": {
        "tags": [
          "PrivateTasks"
        ],
        "summary": "Returns the private task with the specified id.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user. Not required when using the /me route.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        },
        "description": "\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>"
      }
    },
    "/users/{userId}/privatetasks/{taskId}/checklistitems": {
      "get": {
        "tags": [
          "ChecklistItems"
        ],
        "summary": "Returns the checklist for a private task with the specified id.",
        "description": "The user needs to be assigned to the task.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user. Not required when using the /me route.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChecklistItem"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/users/{userId}/privatetasks/{taskId}/checklistitems/{checklistItemId}": {
      "get": {
        "tags": [
          "ChecklistItems"
        ],
        "summary": "Returns a checklist item for a private task with the specified id.",
        "description": "The user needs to be assigned to the task.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user. Not required when using the /me route.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "taskId",
            "in": "path",
            "description": "The id of the task.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "checklistItemId",
            "in": "path",
            "description": "The id of the checklist item.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChecklistItem"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/users/{userId}/setarchived": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Archives or unarchives the user with the specified id.",
        "description": "Archived objects can not be used any longer but still exist for being referenced by other entities.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `project-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user which will be changed.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The archiving model object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivedForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivedForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedUser"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "project-manage-config": "write"
        }
      }
    },
    "/users/{userId}/tags": {
      "get": {
        "tags": [
          "UserTags"
        ],
        "summary": "Returns the tags of the users with the specified id.",
        "description": "Returns the tags of the user with the specified id ordered by name.\r\nTo read the tags the user needs 'read' permissions on the specified user.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseTagModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/users/{userId}/tasks/tags": {
      "get": {
        "tags": [
          "AssignedTasks"
        ],
        "summary": "Returns all tags the user is allowed to see.\r\nYou can filter the tags by task model query constraints.",
        "description": "Returns all tags from the available tasks of the user ordered by name.\r\nThe user making the request needs to be assigned to the task or needs\r\nread permissions on the feature \"project-planning-data\" for project tasks or\r\nread permissions on the \"entity-master-data\" of the entity of the task.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user. Not required on the me/ endpoint.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BaseTagModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/users/{userId}/timeentries/last": {
      "get": {
        "tags": [
          "TimeEntries"
        ],
        "summary": "Returns the last time entry of a specified user.",
        "description": "The last time entry is always the last one that was started.\r\n            Time entries which are started in the future are ignored.\r\n            If a time entry does not have a start time, 12.00 am is automatically assumed as the start time\r\n            for comparison with other time entries from the same day.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or the creator.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user. Not required if the me route is used.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeTracking"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "owner": "true"
        }
      }
    },
    "/users/{userId}/timetracking/pause": {
      "post": {
        "tags": [
          "TimeTracking"
        ],
        "summary": "Pauses a running time tracking for a user.",
        "description": "If there is already a paused time tracking nothing happens. If there is no running time tracking, returns NoContent.\r\n\r\n<Check title=\"Required Permissions\">The user must be the creator.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user. Not required if the me route is used.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeTracking"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "owner": "true"
        }
      }
    },
    "/users/{userId}/timetracking/resume": {
      "post": {
        "tags": [
          "TimeTracking"
        ],
        "summary": "Resumes a paused time tracking for a user.",
        "description": "If there is already a running time tracking nothing happens. If there is no running time tracking, returns NoContent.\r\n\r\n<Check title=\"Required Permissions\">The user must be the creator.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user. Not required if the me route is used.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeTracking"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "owner": "true"
        }
      }
    },
    "/users/{userId}/timetracking/start": {
      "post": {
        "tags": [
          "TimeTracking"
        ],
        "summary": "Starts a new time tracking for a user.",
        "description": "If there is already a running/paused time tracking it will be stopped automatically in order to start the new one.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or the creator.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user. Not required if the me route is used.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to start a time tracking.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartTimeTrackingForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeTracking"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "owner": "true"
        }
      }
    },
    "/users/{userId}/timetracking/stop": {
      "post": {
        "tags": [
          "TimeTracking"
        ],
        "summary": "Stops the currently running time tracking of the specified user.",
        "description": "There is no request body necessary for this operation.\r\n            For this operation to work there must be a running time tracking for the user.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or the creator.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The id of the user. Not required if the me route is used.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeTracking"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "owner": "true"
        }
      }
    },
    "/users/{userId}/updatetags": {
      "post": {
        "tags": [
          "UserTags"
        ],
        "summary": "Updates a tag to the user with the specified id.",
        "description": "To update the tag the user needs 'write' permissions on the specified entity.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The model to add tags.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagUpdateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TagUpdateForm"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Returns all configured webhooks.",
        "description": "Returns all configured webhooks of the workspace.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:read` permissions.</Check>",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookConfig"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "read"
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Creates a new webhook.",
        "description": "Creates a new webhook.\r\nThe receiver type is inferred from the URI. All unknown receivers\r\nare treated as 'custom'.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "requestBody": {
          "description": "The model used to create a new webhook.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookConfigForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookConfigForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookConfig"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/webhooks/eventtypes": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Returns all available event types.",
        "description": "Returns all available event types for generic webhooks in Awork.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/webhooks/eventtypes/slack": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Returns all available event types for Slack webhooks.",
        "description": "Returns all available event types for Slack webhooks in Awork.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      }
    },
    "/webhooks/{webhookId}": {
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Deletes the webhook with the specified id.",
        "description": "Deletes the webhook with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "The id of the webhook.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      },
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Returns the webhook with the specified id.",
        "description": "Returns the webhook with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:read` permissions.</Check>",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "The id of the webhook.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookConfig"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "read"
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Updates the webhook with the specified id.",
        "description": "Updates the webhook with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "The id of the webhook.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model used to update the webhook.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookConfigForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookConfigForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookConfig"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/webhooks/{webhookId}/logs": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Returns all logs of the webhook with the specified id.",
        "description": "Returns all logs of the webhook with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:read` permissions.</Check>",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "description": "The id of the webhook to get the logs for.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookLog"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "read"
        }
      }
    },
    "/workspaceabsences": {
      "get": {
        "tags": [
          "WorkspaceAbsences"
        ],
        "summary": "Gets all workspace absences.",
        "description": "Gets all workspace absences. The result can be filtered, sorted, and paged.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `user-planning-data:write` permissions.</Check>",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkspaceAbsenceModel"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "user-planning-data": "write"
        }
      },
      "post": {
        "tags": [
          "WorkspaceAbsences"
        ],
        "summary": "Creates a new workspace absence.",
        "description": "Creates a new workspace absence.\r\n            A workspace absence is a kind of absence that is applied to all users in a workspace.\r\n            It can be used to define special holidays (e.g: company offsite) that apply to all users in a workspace.\r\n            It can be limited to a specific absence region, in which case only users in that region will be affected.\r\n\r\n<Info title=\"Subscription Level\">This endpoint requires the Standard plan or higher.</Info>\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `user-planning-data:write` permissions.</Check>",
        "requestBody": {
          "description": "The model to create the workspace absence.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceAbsenceForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceAbsenceModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "user-planning-data": "write"
        },
        "x-subscriptionlevel": {
          "minimumPlan": "standard"
        }
      }
    },
    "/workspaceabsences/{workspaceAbsenceId}": {
      "delete": {
        "tags": [
          "WorkspaceAbsences"
        ],
        "summary": "Deletes a workspace absence.",
        "description": "Deletes a workspace absence.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `user-planning-data:write` permissions.</Check>",
        "parameters": [
          {
            "name": "workspaceAbsenceId",
            "in": "path",
            "description": "The id of the workspace absence to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "user-planning-data": "write"
        }
      },
      "put": {
        "tags": [
          "WorkspaceAbsences"
        ],
        "summary": "Updates a workspace absence.",
        "description": "Updates a workspace absence.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `user-planning-data:write` permissions.</Check>",
        "parameters": [
          {
            "name": "workspaceAbsenceId",
            "in": "path",
            "description": "The id of the workspace absence to update.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the workspace absence.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceAbsenceForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceAbsenceModel"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "user-planning-data": "write"
        }
      }
    },
    "/workspaces/types": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Returns all available workspace types.",
        "description": "Returns all available workspace types.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ]
      }
    },
    "/workspaces/{workspaceId}": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Returns the workspace with the specified id.",
        "description": "Returns the workspace with the specified id.\r\n\r\n<Check title=\"Required Permissions\">Any authenticated user.</Check>",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "any": "true"
        }
      },
      "put": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Updates the workspace with the specified id.",
        "description": "Updates the workspace with the specified id.\r\n\r\n<Check title=\"Required Permissions\">The user must be an admin or have `workspace-manage-config:write` permissions.</Check>",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The new workspace values.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspacePutForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspacePutForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "full_access"
            ]
          }
        ],
        "x-api-versions": [
          "v1"
        ],
        "x-access": {
          "admin": "true",
          "workspace-manage-config": "write"
        }
      }
    },
    "/workspaces/{workspaceId}/externalfiles": {
      "post": {
        "tags": [
          "WorkspaceFiles"
        ],
        "summary": "Endpoint to batch create external files without uploading.",
        "description": "Endpoint to create file infos with batch operation.\r\nCreated file infos don't have a version.",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "List of file forms.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalFileForm"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExternalFileForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/files": {
      "delete": {
        "tags": [
          "WorkspaceFiles"
        ],
        "summary": "Deletes the files of the specified workspace.",
        "description": "Deletes the metadata and the different versions of the files.",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "WorkspaceFiles"
        ],
        "summary": "Returns all files of the workspace with the specified id.",
        "description": "Returns all file metadata of the workspace with the specified id.",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileInfo"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "WorkspaceFiles"
        ],
        "summary": "Creates a new workspace file for the workspace with the specified id..",
        "description": "Uploads a new workspace file for the workspace with the specified id.\r\nUse this to upload a file as a form value along with the basic file meta data.\r\nThe file size must not exceed 1GB.",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/files/byurl": {
      "post": {
        "tags": [
          "WorkspaceFiles"
        ],
        "summary": "Uploads a new file by providing an url.",
        "description": "The file needs to be a public available url.\r\nThe file size must not exceed 100MB.",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace the file is linked to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The url, name and description of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilePostForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FilePostForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/files/{fileId}": {
      "delete": {
        "tags": [
          "WorkspaceFiles"
        ],
        "summary": "Deletes the workspace file with the specified id.",
        "description": "Deletes the metadata and the different versions of the file.",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "get": {
        "tags": [
          "WorkspaceFiles"
        ],
        "summary": "Returns the file with the specified id of the workspace with the specified id.",
        "description": "Returns the file metadata of the workspace with the specified id.",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "WorkspaceFiles"
        ],
        "summary": "Updates the metadata of the workspace file with the specified id.",
        "description": "Updates the metadata of the workspace file with the specified id.",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to update the file with the specified id.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileInfoUpdateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/files/{fileId}/changeentity": {
      "post": {
        "tags": [
          "WorkspaceFiles"
        ],
        "summary": "Changes the workspace this file belongs to.",
        "description": "Changes the workspace this file belongs to.\r\nSwitch to the specified workspace or to a global file\r\nif the 'EntityId' of the model is set to null.",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the entity information of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileEntityForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileEntityForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/files/{fileId}/copy": {
      "post": {
        "tags": [
          "WorkspaceFiles"
        ],
        "summary": "Copies the file to a new workspace.",
        "description": "Copies the file to a new workspace (meta and content).",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The model to change the entity information of the file.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileCopyForm"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/FileCopyForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileInfo"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/files/{fileId}/download": {
      "get": {
        "tags": [
          "WorkspaceFiles"
        ],
        "summary": "Returns the content of the workspace file with the specified id.",
        "description": "Returns the content of the workspace file. Uses the latest file version.\r\nIf the workspace file is an image and the width and height are set,\r\nthe image will be resized before it is returned.",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Set width to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Set height to resize.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "crop",
            "in": "query",
            "description": "Whether to crop the image when resizing it.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/files/{fileId}/pdf": {
      "get": {
        "tags": [
          "WorkspaceFiles"
        ],
        "summary": "Returns the content of the file with the specified id as pdf.\r\ntype or conversion not possible.",
        "description": "Returns the content of the workspace file. Uses the latest file version.",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "inline",
            "in": "query",
            "description": "If inline is false, content-disposition header is attachment.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/files/{fileId}/shareurl": {
      "get": {
        "tags": [
          "WorkspaceFiles"
        ],
        "summary": "Returns an url to share the file.",
        "description": "Returns a url to share the file.",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/files/{fileId}/versions": {
      "get": {
        "tags": [
          "WorkspaceFiles"
        ],
        "summary": "Returns all file versions of the specified workspace file.",
        "description": "Returns all file versions of the specified workspace file.",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/pageSize"
          },
          {
            "$ref": "#/components/parameters/orderby"
          },
          {
            "$ref": "#/components/parameters/filterby"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileVersion"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "WorkspaceFiles"
        ],
        "summary": "Uploads a new version of the workspace file with the specified id.",
        "description": "Uploads a new version of an workspace file.\r\nUse this to upload a file as a form value along with the basic file meta data.\r\nThe file size must not exceed 1GB.",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "File": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVersion"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/workspaces/{workspaceId}/files/{fileId}/versions/{versionId}": {
      "get": {
        "tags": [
          "WorkspaceFiles"
        ],
        "summary": "Returns the workspace file version with the specified id.",
        "description": "Returns the workspace file version with the specified id.",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The id of the file version.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileVersion"
                }
              }
            }
          }
        }
      }
    },
    "/workspaces/{workspaceId}/files/{fileId}/versions/{versionId}/download": {
      "get": {
        "tags": [
          "WorkspaceFiles"
        ],
        "summary": "Returns the content of the workspace file version with the specified id.",
        "description": "Returns the content of the workspace file version with the specified id.",
        "parameters": [
          {
            "name": "workspaceId",
            "in": "path",
            "description": "The id of the workspace.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "The id of the file version.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the account.",
            "nullable": true,
            "example": "carla.creative@ncnstn.com"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the account.",
            "nullable": true,
            "example": "Carla"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the account.",
            "nullable": true,
            "example": "Creative"
          },
          "language": {
            "type": "string",
            "description": "The language of the account, as a Language Culture Name (de-DE).",
            "nullable": true,
            "example": "en-GB"
          },
          "timezone": {
            "type": "string",
            "description": "The timezone of the account.\r\nThe format of the timezone is the IANA standard.",
            "nullable": true,
            "example": "Europe/London"
          },
          "mfaEnabled": {
            "type": "boolean",
            "description": "Whether MFA is enabled for the account."
          },
          "id": {
            "type": "string",
            "description": "The id of the account.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "passwordIsAutoGenerated": {
            "type": "boolean",
            "description": "Whether the password is generated by awork.",
            "example": false
          },
          "emailConfirmed": {
            "type": "boolean",
            "description": "Whether the email has been confirmed by the user."
          },
          "externalAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalAccount"
            },
            "description": "The list of connected social providers.",
            "nullable": true
          },
          "mfaProviders": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The enabled MFA providers for the account.\r\nCurrently we support \"Email\" and \"Authenticator\".",
            "nullable": true,
            "example": [
              "Email",
              "Authenticator"
            ]
          },
          "passwordlessEnabled": {
            "type": "boolean",
            "description": "Whether the account has passwordless login enabled."
          }
        },
        "additionalProperties": false,
        "description": "The account represents a unique user account within awork."
      },
      "AccountForm": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the account.",
            "nullable": true,
            "example": "carla.creative@ncnstn.com"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the account.",
            "nullable": true,
            "example": "Carla"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the account.",
            "nullable": true,
            "example": "Creative"
          },
          "language": {
            "type": "string",
            "description": "The language of the account, as a Language Culture Name (de-DE).",
            "nullable": true,
            "example": "en-GB"
          },
          "timezone": {
            "type": "string",
            "description": "The timezone of the account.\r\nThe format of the timezone is the IANA standard.",
            "nullable": true,
            "example": "Europe/London"
          },
          "mfaEnabled": {
            "type": "boolean",
            "description": "Whether MFA is enabled for the account."
          }
        },
        "additionalProperties": false,
        "description": "The POST/PUT model for an account."
      },
      "Algorithm": {
        "enum": [
          -65535,
          -259,
          -258,
          -257,
          -47,
          -39,
          -38,
          -37,
          -36,
          -35,
          -8,
          -7
        ],
        "type": "integer",
        "format": "int32"
      },
      "AssertionOptions": {
        "type": "object",
        "properties": {
          "challenge": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "timeout": {
            "type": "integer",
            "format": "int64"
          },
          "rpId": {
            "type": "string",
            "nullable": true
          },
          "allowCredentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicKeyCredentialDescriptor"
            },
            "nullable": true
          },
          "userVerification": {
            "$ref": "#/components/schemas/UserVerificationRequirement"
          },
          "hints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicKeyCredentialHint"
            },
            "nullable": true
          },
          "extensions": {
            "$ref": "#/components/schemas/AuthenticationExtensionsClientInputs"
          }
        },
        "additionalProperties": false
      },
      "AssertionResponse": {
        "type": "object",
        "properties": {
          "authenticatorData": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "signature": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "clientDataJSON": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "userHandle": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AttestationConveyancePreference": {
        "enum": [
          "none",
          "indirect",
          "direct",
          "enterprise"
        ],
        "type": "string"
      },
      "AttestationResponse": {
        "type": "object",
        "properties": {
          "attestationObject": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "clientDataJSON": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "transports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticatorTransport"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AttestationStatementFormatIdentifier": {
        "enum": [
          "packed",
          "tpm",
          "android-key",
          "android-safetynet",
          "fido-u2f",
          "apple",
          "none"
        ],
        "type": "string"
      },
      "AuthenticationExtensionsClientInputs": {
        "type": "object",
        "properties": {
          "example.extension.bool": {
            "type": "boolean",
            "nullable": true
          },
          "exts": {
            "type": "boolean",
            "nullable": true
          },
          "uvm": {
            "type": "boolean",
            "nullable": true,
            "writeOnly": true
          },
          "credProps": {
            "type": "boolean",
            "nullable": true
          },
          "prf": {
            "$ref": "#/components/schemas/AuthenticationExtensionsPRFInputs"
          },
          "largeBlob": {
            "$ref": "#/components/schemas/AuthenticationExtensionsLargeBlobInputs"
          },
          "credentialProtectionPolicy": {
            "$ref": "#/components/schemas/CredentialProtectionPolicy"
          },
          "enforceCredentialProtectionPolicy": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationExtensionsClientOutputs": {
        "type": "object",
        "properties": {
          "example.extension.bool": {
            "type": "boolean",
            "nullable": true
          },
          "appid": {
            "type": "boolean"
          },
          "exts": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "uvm": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "nullable": true
          },
          "credProps": {
            "$ref": "#/components/schemas/CredentialPropertiesOutput"
          },
          "prf": {
            "$ref": "#/components/schemas/AuthenticationExtensionsPRFOutputs"
          },
          "largeBlob": {
            "$ref": "#/components/schemas/AuthenticationExtensionsLargeBlobOutputs"
          },
          "credProtect": {
            "$ref": "#/components/schemas/CredentialProtectionPolicy"
          }
        },
        "additionalProperties": false
      },
      "AuthenticationExtensionsLargeBlobInputs": {
        "type": "object",
        "properties": {
          "support": {
            "$ref": "#/components/schemas/LargeBlobSupport"
          },
          "read": {
            "type": "boolean"
          },
          "write": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticationExtensionsLargeBlobOutputs": {
        "type": "object",
        "properties": {
          "supported": {
            "type": "boolean"
          },
          "blob": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "written": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AuthenticationExtensionsPRFInputs": {
        "type": "object",
        "properties": {
          "eval": {
            "$ref": "#/components/schemas/AuthenticationExtensionsPRFValues"
          },
          "evalByCredential": {
            "$ref": "#/components/schemas/StringAuthenticationExtensionsPRFValuesKeyValuePair"
          }
        },
        "additionalProperties": false
      },
      "AuthenticationExtensionsPRFOutputs": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          },
          "results": {
            "$ref": "#/components/schemas/AuthenticationExtensionsPRFValues"
          }
        },
        "additionalProperties": false
      },
      "AuthenticationExtensionsPRFValues": {
        "required": [
          "first"
        ],
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "second": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AuthenticatorAssertionRawResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "rawId": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "response": {
            "$ref": "#/components/schemas/AssertionResponse"
          },
          "type": {
            "$ref": "#/components/schemas/PublicKeyCredentialType"
          },
          "extensions": {
            "$ref": "#/components/schemas/AuthenticationExtensionsClientOutputs"
          },
          "clientExtensionResults": {
            "$ref": "#/components/schemas/AuthenticationExtensionsClientOutputs"
          }
        },
        "additionalProperties": false
      },
      "AuthenticatorAttachment": {
        "enum": [
          "platform",
          "cross-platform"
        ],
        "type": "string"
      },
      "AuthenticatorAttestationRawResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "rawId": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/PublicKeyCredentialType"
          },
          "response": {
            "$ref": "#/components/schemas/AttestationResponse"
          },
          "extensions": {
            "$ref": "#/components/schemas/AuthenticationExtensionsClientOutputs"
          },
          "clientExtensionResults": {
            "$ref": "#/components/schemas/AuthenticationExtensionsClientOutputs"
          }
        },
        "additionalProperties": false
      },
      "AuthenticatorSelection": {
        "type": "object",
        "properties": {
          "authenticatorAttachment": {
            "$ref": "#/components/schemas/AuthenticatorAttachment"
          },
          "residentKey": {
            "$ref": "#/components/schemas/ResidentKeyRequirement"
          },
          "requireResidentKey": {
            "type": "boolean",
            "deprecated": true
          },
          "userVerification": {
            "$ref": "#/components/schemas/UserVerificationRequirement"
          }
        },
        "additionalProperties": false
      },
      "AuthenticatorTransport": {
        "enum": [
          "usb",
          "nfc",
          "ble",
          "smart-card",
          "hybrid",
          "internal"
        ],
        "type": "string"
      },
      "ChangePasswordForm": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "description": "The user's current password.",
            "nullable": true,
            "example": "ThisIsTheOldP@ssword"
          },
          "newPassword": {
            "type": "string",
            "description": "The user's new password.",
            "nullable": true,
            "example": "ABr@ndNewP@ssword!"
          }
        },
        "additionalProperties": false
      },
      "ClientApplication": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "The client application's identifier.",
            "nullable": true,
            "example": "integration"
          },
          "displayName": {
            "type": "string",
            "description": "The client application's display name.",
            "nullable": true,
            "example": "Awork integration"
          },
          "redirectUris": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The redirect URIs.",
            "nullable": true,
            "example": [
              "https://awork.com/"
            ]
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time",
            "example": "2022-03-14T16:40:40.100Z"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time",
            "example": "2022-03-25T11:15:00.100Z"
          }
        },
        "additionalProperties": false,
        "description": "The client application is required for the OAuth flow."
      },
      "ClientApplicationApiKeyForm": {
        "type": "object",
        "properties": {
          "apiUserId": {
            "type": "string",
            "description": "The API user to generate the key for.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "The model to generate an API key for a client application."
      },
      "ClientApplicationCreateForm": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "The client application's identifier.",
            "nullable": true,
            "example": "integration"
          },
          "displayName": {
            "type": "string",
            "description": "The client application's display name.",
            "nullable": true,
            "example": "Awork integration"
          },
          "redirectUris": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The redirect URIs.",
            "nullable": true,
            "example": [
              "https://awork.com/"
            ]
          }
        },
        "additionalProperties": false,
        "description": "The client application is required for the OAuth flow."
      },
      "ClientApplicationCreateResponse": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "The client application's identifier.",
            "nullable": true,
            "example": "integration"
          },
          "displayName": {
            "type": "string",
            "description": "The client application's display name.",
            "nullable": true,
            "example": "Awork integration"
          },
          "redirectUris": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The redirect URIs.",
            "nullable": true,
            "example": [
              "https://awork.com/"
            ]
          },
          "clientSecret": {
            "type": "string",
            "description": "The client application's secret.",
            "nullable": true,
            "example": "$ecret"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time",
            "example": "2022-03-14T16:45:07.100Z"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time",
            "example": "2022-04-22T11:00:04.100Z"
          }
        },
        "additionalProperties": false,
        "description": "The client application is required for the OAuth flow."
      },
      "ClientApplicationGeneratePasswordResponse": {
        "type": "object",
        "properties": {
          "clientSecret": {
            "type": "string",
            "description": "The client application's new secret.",
            "nullable": true,
            "example": "A$ecret!"
          }
        },
        "additionalProperties": false,
        "description": "The client application is required for the OAuth flow."
      },
      "ClientApplicationUpdateForm": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The client application's display name.",
            "nullable": true,
            "example": "Awork integration"
          },
          "redirectUris": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The redirect URIs.",
            "nullable": true,
            "example": [
              "https://awork.com/"
            ]
          }
        },
        "additionalProperties": false,
        "description": "The model to update a client application."
      },
      "ConfigureMFAModel": {
        "type": "object",
        "properties": {
          "enableMFA": {
            "type": "boolean",
            "description": "Whether to enable MFA for the account."
          },
          "enableAuthenticator": {
            "type": "boolean",
            "description": "Whether to enable an authenticator app as an MFA provider.\r\nIf true, the response returns a URI for a QR code to scan with an authenticator app."
          }
        },
        "additionalProperties": false,
        "description": "The model to configure MFA."
      },
      "ConfigureMFAResponse": {
        "type": "object",
        "properties": {
          "mfaEnabled": {
            "type": "boolean",
            "description": "Whether MFA is enabled."
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The configured MFA providers.",
            "nullable": true,
            "example": [
              "Email",
              "Authenticator"
            ]
          },
          "authenticatorUrl": {
            "type": "string",
            "description": "The authenticator URL.\r\nThis URL can be used to generate a QR code that can be scanned by an authenticator app.",
            "nullable": true,
            "example": "authenticator_url"
          }
        },
        "additionalProperties": false,
        "description": "The response when configuring MFA."
      },
      "CredentialCreateOptions": {
        "type": "object",
        "properties": {
          "rp": {
            "$ref": "#/components/schemas/PublicKeyCredentialRpEntity"
          },
          "user": {
            "$ref": "#/components/schemas/Fido2User"
          },
          "challenge": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "pubKeyCredParams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PubKeyCredParam"
            },
            "nullable": true
          },
          "timeout": {
            "type": "integer",
            "format": "int64"
          },
          "attestation": {
            "$ref": "#/components/schemas/AttestationConveyancePreference"
          },
          "attestationFormats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttestationStatementFormatIdentifier"
            },
            "nullable": true
          },
          "authenticatorSelection": {
            "$ref": "#/components/schemas/AuthenticatorSelection"
          },
          "hints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicKeyCredentialHint"
            },
            "nullable": true
          },
          "excludeCredentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicKeyCredentialDescriptor"
            },
            "nullable": true
          },
          "extensions": {
            "$ref": "#/components/schemas/AuthenticationExtensionsClientInputs"
          }
        },
        "additionalProperties": false
      },
      "CredentialPropertiesOutput": {
        "type": "object",
        "properties": {
          "rk": {
            "type": "boolean"
          },
          "authenticatorDisplayName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CredentialProtectionPolicy": {
        "enum": [
          "userVerificationOptional",
          "userVerificationOptionalWithCredentialIDList",
          "userVerificationRequired"
        ],
        "type": "string"
      },
      "EmailVerificationForm": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the account.",
            "nullable": true,
            "example": "carla.creative@ncnstn.com"
          },
          "urlParams": {
            "type": "string",
            "description": "The URL params to add to the link for verification.\r\nUsed for user tracking.",
            "nullable": true,
            "example": "utm=true&campaign=email"
          }
        },
        "additionalProperties": false,
        "description": "The verification email form."
      },
      "ExternalAccount": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The name of the external provider.",
            "nullable": true,
            "example": "google"
          },
          "externalUserId": {
            "type": "string",
            "description": "The id of the user for the external account.",
            "nullable": true,
            "example": "11112222333344445555"
          }
        },
        "additionalProperties": false
      },
      "Fido2User": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IsFreeMailModel": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "description": "The email to validate."
          }
        },
        "additionalProperties": false
      },
      "LargeBlobSupport": {
        "enum": [
          "required",
          "preferred"
        ],
        "type": "string"
      },
      "MFAResponse": {
        "type": "object",
        "properties": {
          "mfaEnabled": {
            "type": "boolean",
            "description": "Whether MFA is enabled."
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The configured MFA providers.",
            "nullable": true,
            "example": [
              "Email",
              "Authenticator"
            ]
          }
        },
        "additionalProperties": false,
        "description": "The response when configuring MFA."
      },
      "PasswordForgottenModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address of the accounts that wants to reset the password.",
            "nullable": true,
            "example": "carla.creative@ncnstn.com"
          }
        },
        "additionalProperties": false
      },
      "PasswordResetModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the account.",
            "nullable": true,
            "example": "carla.creative@ncnstn.com"
          },
          "password": {
            "type": "string",
            "description": "The new password.",
            "nullable": true,
            "example": "NewP@ssw0rd"
          },
          "code": {
            "type": "string",
            "description": "The password reset code.",
            "nullable": true,
            "example": "123456"
          }
        },
        "additionalProperties": false,
        "description": "The model for a password reset request."
      },
      "PasswordlessLoginResult": {
        "type": "object",
        "properties": {
          "credentialId": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "signCount": {
            "type": "integer",
            "format": "int32"
          },
          "isBackedUp": {
            "type": "boolean"
          },
          "email": {
            "type": "string",
            "description": "The email of the user.",
            "nullable": true,
            "example": "carla@ncnstn.com"
          },
          "token": {
            "type": "string",
            "description": "The token used to log the user in.",
            "nullable": true,
            "example": "097654"
          }
        },
        "additionalProperties": false,
        "description": "The result of a passwordless login."
      },
      "PubKeyCredParam": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PublicKeyCredentialType"
          },
          "alg": {
            "$ref": "#/components/schemas/Algorithm"
          }
        },
        "additionalProperties": false
      },
      "PublicKeyCredentialDescriptor": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PublicKeyCredentialType"
          },
          "id": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "transports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticatorTransport"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublicKeyCredentialHint": {
        "enum": [
          "security-key",
          "client-device",
          "hybrid"
        ],
        "type": "string"
      },
      "PublicKeyCredentialRpEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublicKeyCredentialType": {
        "enum": [
          "public-key",
          "invalid"
        ],
        "type": "string"
      },
      "RegeneratePasswortResetTokenResponse": {
        "type": "object",
        "properties": {
          "resetToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the account.",
            "nullable": true,
            "example": "carla.creative@ncnstn.com"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the account.",
            "nullable": true,
            "example": "Carla"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the account.",
            "nullable": true,
            "example": "Creative"
          },
          "password": {
            "type": "string",
            "description": "The password to set.\r\nIf empty, we will generate one and return the password reset code.",
            "nullable": true,
            "example": "AP@ssword!"
          },
          "language": {
            "type": "string",
            "description": "The language of the account, as a Language Culture Name (de-DE).",
            "nullable": true,
            "example": "en-GB"
          },
          "timezone": {
            "type": "string",
            "description": "The timezone of the account.\r\nThe format of the timezone must be in the IANA standard.",
            "nullable": true,
            "example": "Europe/London"
          },
          "externalLoginProvider": {
            "type": "string",
            "description": "The provider of the external login.\r\nCan be 'google'.",
            "nullable": true,
            "example": "google"
          },
          "externalUserId": {
            "type": "string",
            "description": "The id of the user from the external login provider.",
            "nullable": true,
            "example": "11112222333344445555"
          },
          "invitationFlow": {
            "type": "string",
            "description": "The current invitation flow.\r\nUse 'invite' for an invitation from a system admin,\r\n'new_user_new_workspace' for an invitation when creating a workspace for a new user or\r\n'existing_user_new_workspace' when creating a workspace for an existing user.",
            "nullable": true,
            "example": "invite"
          }
        },
        "additionalProperties": false
      },
      "RegisterResponse": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The id of the created accounts.",
            "nullable": true,
            "example": "55F42328-1D60-43F6-A249-9CE4BE69256C"
          },
          "passwordResetCode": {
            "type": "string",
            "description": "The password reset code in case the password was not set.",
            "nullable": true,
            "example": "12345"
          }
        },
        "additionalProperties": false,
        "description": "The registration response."
      },
      "RegisteredPublicKeyCredential": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/PublicKeyCredentialType"
          },
          "id": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "publicKey": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "transports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthenticatorTransport"
            },
            "nullable": true
          },
          "signCount": {
            "type": "integer",
            "format": "int32"
          },
          "isBackupEligible": {
            "type": "boolean"
          },
          "isBackedUp": {
            "type": "boolean"
          },
          "aaGuid": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "user": {
            "$ref": "#/components/schemas/Fido2User"
          },
          "attestationFormat": {
            "type": "string",
            "nullable": true
          },
          "attestationObject": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "attestationClientDataJson": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResidentKeyRequirement": {
        "enum": [
          "required",
          "preferred",
          "discouraged"
        ],
        "type": "string"
      },
      "SelectListGroup": {
        "type": "object",
        "properties": {
          "disabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SelectListItem": {
        "type": "object",
        "properties": {
          "disabled": {
            "type": "boolean"
          },
          "group": {
            "$ref": "#/components/schemas/SelectListGroup"
          },
          "selected": {
            "type": "boolean"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SelectProjectViewModel": {
        "required": [
          "projectId"
        ],
        "type": "object",
        "properties": {
          "applicationName": {
            "type": "string",
            "nullable": true
          },
          "clientId": {
            "type": "string",
            "nullable": true
          },
          "query": {
            "type": "string",
            "nullable": true
          },
          "responseType": {
            "type": "string",
            "nullable": true
          },
          "redirectUri": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "baseUrl": {
            "type": "string",
            "nullable": true
          },
          "endpoint": {
            "type": "string",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SelectListItem"
            },
            "nullable": true
          },
          "workspaceId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "systemHostname": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SendMFATokenModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the account.",
            "nullable": true,
            "example": "carla.creative@ncnstn.com"
          },
          "provider": {
            "type": "string",
            "description": "The provider to use to send the MFA token.",
            "nullable": true,
            "example": "Email"
          }
        },
        "additionalProperties": false,
        "description": "The model to send an MFA token."
      },
      "SocialConnectForm": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The provider the awork account should connect to.\r\nFor example 'google'.",
            "nullable": true,
            "example": "google"
          },
          "code": {
            "minLength": 1,
            "type": "string",
            "description": "The authorization code from the provider.",
            "example": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7"
          }
        },
        "additionalProperties": false
      },
      "SocialDisconnectForm": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "The provider the awork account should connect to.\r\nFor example 'google'.",
            "nullable": true,
            "example": "google"
          }
        },
        "additionalProperties": false
      },
      "StringAuthenticationExtensionsPRFValuesKeyValuePair": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/AuthenticationExtensionsPRFValues"
          }
        },
        "additionalProperties": false
      },
      "SuccessViewModel": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TableAuditEventModel": {
        "type": "object",
        "properties": {
          "workspaceId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "correlationId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "impersonatingUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "traceId": {
            "type": "string",
            "nullable": true
          },
          "websocketConnectionId": {
            "type": "string",
            "nullable": true
          },
          "eventType": {
            "type": "string",
            "nullable": true
          },
          "entityType": {
            "type": "string",
            "nullable": true
          },
          "entityId": {
            "type": "string",
            "nullable": true
          },
          "clientId": {
            "type": "string",
            "nullable": true
          },
          "property": {
            "type": "string",
            "nullable": true
          },
          "old": {
            "type": "string",
            "nullable": true
          },
          "new": {
            "type": "string",
            "nullable": true
          },
          "callStack": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "token_type": {
            "type": "string",
            "description": "The type of the token, typically 'Bearer'.",
            "nullable": true,
            "example": "Bearer"
          },
          "expires_in": {
            "type": "integer",
            "description": "The expiration date of the access token, in seconds.",
            "format": "int64",
            "example": 1647274587
          },
          "access_token": {
            "type": "string",
            "description": "The access token.",
            "nullable": true,
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "refresh_token": {
            "type": "string",
            "description": "The refresh token to get a new access token.",
            "nullable": true,
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "additionalProperties": false,
        "description": "The token response contains the access and refresh tokens."
      },
      "UserVerificationRequirement": {
        "enum": [
          "required",
          "preferred",
          "discouraged"
        ],
        "type": "string"
      },
      "ValidateAccount": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The value to validate.\r\nUsually the obfuscated account email.",
            "example": "QWxhZGRpbjpvcGVuIHNlc2FtZQ=="
          }
        },
        "additionalProperties": false,
        "description": "The model to validate the account.\r\nThis is used to check if an account exists without revealing it to to unauthenticted users."
      },
      "ValidateMFATokenModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the account.",
            "nullable": true,
            "example": "carla.creative@ncnstn.com"
          },
          "provider": {
            "type": "string",
            "description": "The provider that was used to acquire the MFA token.",
            "nullable": true,
            "example": "Email"
          },
          "token": {
            "type": "string",
            "description": "The token that was acquired from the provider.",
            "nullable": true,
            "example": "012345"
          }
        },
        "additionalProperties": false,
        "description": "The model to validate an MFA token."
      },
      "ValidatePasswordResetModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the account.",
            "nullable": true,
            "example": "carla.creative@ncnstn.com"
          },
          "code": {
            "type": "string",
            "description": "The password reset code.",
            "nullable": true,
            "example": "123456"
          }
        },
        "additionalProperties": false,
        "description": "The model to validate a password reset request."
      },
      "VerifyEmailForm": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the account.",
            "nullable": true,
            "example": "carla.creative@ncnstn.com"
          },
          "code": {
            "type": "string",
            "description": "The code to verify the email.",
            "nullable": true,
            "example": "097654"
          }
        },
        "additionalProperties": false,
        "description": "The verify email form."
      },
      "Absence": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user to create the absence for.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "startOn": {
            "type": "string",
            "description": "The start time of the absence.",
            "format": "date-time",
            "example": "2022-03-01T00:00:00Z"
          },
          "endOn": {
            "type": "string",
            "description": "The end time of the absence.",
            "format": "date-time",
            "example": "2022-03-03T00:00:00Z"
          },
          "description": {
            "type": "string",
            "description": "The reason for the absence.",
            "nullable": true,
            "example": "Workation by the beach"
          },
          "externalProvider": {
            "type": "string",
            "description": "The external provider for the absence.",
            "nullable": true
          },
          "deletedOn": {
            "type": "string",
            "description": "The date the absence was deleted.",
            "format": "date-time",
            "nullable": true
          },
          "deletedBy": {
            "type": "string",
            "description": "The id of the user that deleted the absence.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isReadOnly": {
            "type": "boolean",
            "description": "If it's true it means that this Absence is read-only and cannot be edited/deleted by the user.",
            "readOnly": true
          },
          "isHalfDayOnStart": {
            "type": "boolean",
            "description": "If it's true and it's a single day absence means that the absence is for the first half of the workday.\r\nIf it's a multi day absence it started on the second half of the first day of the absence period.",
            "readOnly": true
          },
          "isHalfDayOnEnd": {
            "type": "boolean",
            "description": "If it's true and it's a single day absence means that the absence is for the second half of the workday.\r\nIf it's a multi day absence it ended on the first half of the last day of the absence period.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AbsenceForm": {
        "required": [
          "endOn",
          "startOn",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The id of the user to create the absence for.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "startOn": {
            "type": "string",
            "description": "The start time of the absence.\r\nThe time of the date will be ignored.",
            "format": "date-time",
            "example": "2022-03-01T00:00:00Z"
          },
          "endOn": {
            "type": "string",
            "description": "The end time of the absence.\r\nThe time of the date will be ignored.",
            "format": "date-time",
            "example": "2022-03-03T00:00:00Z"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The reason for the absence.",
            "nullable": true,
            "example": "Workation by the beach"
          },
          "isHalfDayOnStart": {
            "type": "boolean",
            "description": "If it's true and it's a single day absence means that the absence to create is for the first half of the workday.\r\nIf it's a multi day absence it started on the second half of the first day of the absence period."
          },
          "isHalfDayOnEnd": {
            "type": "boolean",
            "description": "If it's true and it's a single day absence means that the absence to create is for the second half of the workday.\r\nIf it's a multi day absence it ended on the first half of the last day of the absence period."
          },
          "isSingleDayAbsence": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AbsenceRegionCountry": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The ISO-3166-1 alpha-2 country code.",
            "nullable": true,
            "example": "DE"
          },
          "name": {
            "type": "string",
            "description": "The name of the country, e.g. \"Germany\".",
            "nullable": true,
            "example": "Germany"
          }
        },
        "additionalProperties": false
      },
      "AbsenceRegionForm": {
        "required": [
          "countryCode",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the absence region. Should be unique.",
            "example": "Hamburg"
          },
          "countryCode": {
            "maxLength": 2,
            "minLength": 1,
            "type": "string",
            "description": "The ISO 3166-1 alpha-2 country code. (e.g. 'DE' for Germany)",
            "example": "DE"
          },
          "locationCode": {
            "maxLength": 25,
            "type": "string",
            "description": "The (optional) location code of the absence region.\r\nIt is in ISO 3166-2 format. (e.g. 'DE-BE' for Berlin, Germany)",
            "nullable": true,
            "example": "DE-HH"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Indicates whether the absence region is the default absence region.\r\nA default absence region is automatically assigned to new employees.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "AbsenceRegionLocation": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The ISO-3166-2 location code.",
            "nullable": true,
            "example": "DE-HH"
          },
          "name": {
            "type": "string",
            "description": "The name of the location, e.g. \"Berlin\".",
            "nullable": true,
            "example": "Hamburg"
          }
        },
        "additionalProperties": false
      },
      "AbsenceRegionModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the absence region, as specified by the user.\r\nIt must be unique within the workspace.",
            "nullable": true,
            "example": "Hamburg"
          },
          "countryCode": {
            "type": "string",
            "description": "The country code of the absence region.\r\nIt must be a valid ISO 3166-1 alpha-2 country code.",
            "nullable": true,
            "example": "DE"
          },
          "country": {
            "type": "string",
            "description": "The english name of the country.",
            "nullable": true,
            "example": "Germany"
          },
          "locationCode": {
            "type": "string",
            "description": "The location code of the absence region.\r\nIt is optional. It should be a valid ISO 3166-2 country subdivision code.",
            "nullable": true,
            "example": "DE-HH"
          },
          "location": {
            "type": "string",
            "description": "The name of the location.\r\nIt will always be in the related country's language.",
            "nullable": true,
            "example": "Hamburg"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Indicates whether the absence region is the default absence region.\r\nAny new user will be assigned to the default absence region.",
            "example": true
          },
          "numberOfPublicHolidays": {
            "type": "integer",
            "description": "The number of public holidays in the absence region.",
            "format": "int32",
            "example": 10
          },
          "assignedUsers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The list of user ids assigned to the absence region.",
            "nullable": true,
            "example": [
              "7b356284-d22b-4f74-980d-0a548d3b6318",
              "b37f07dd-6644-4271-9c8a-bb700cc21b63"
            ]
          }
        },
        "additionalProperties": false
      },
      "AbsenceRegionModelWithHolidayDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the absence region, as specified by the user.\r\nIt must be unique within the workspace.",
            "nullable": true,
            "example": "Hamburg"
          },
          "countryCode": {
            "type": "string",
            "description": "The country code of the absence region.\r\nIt must be a valid ISO 3166-1 alpha-2 country code.",
            "nullable": true,
            "example": "DE"
          },
          "country": {
            "type": "string",
            "description": "The english name of the country.",
            "nullable": true,
            "example": "Germany"
          },
          "locationCode": {
            "type": "string",
            "description": "The location code of the absence region.\r\nIt is optional. It should be a valid ISO 3166-2 country subdivision code.",
            "nullable": true,
            "example": "DE-HH"
          },
          "location": {
            "type": "string",
            "description": "The name of the location.\r\nIt will always be in the related country's language.",
            "nullable": true,
            "example": "Hamburg"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Indicates whether the absence region is the default absence region.\r\nAny new user will be assigned to the default absence region.",
            "example": true
          },
          "numberOfPublicHolidays": {
            "type": "integer",
            "description": "The number of public holidays in the absence region.",
            "format": "int32",
            "example": 10
          },
          "assignedUsers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The list of user ids assigned to the absence region.",
            "nullable": true,
            "example": [
              "7b356284-d22b-4f74-980d-0a548d3b6318",
              "b37f07dd-6644-4271-9c8a-bb700cc21b63"
            ]
          },
          "publicHolidays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MinimalPublicHoliday"
            },
            "description": "The list of public holidays in the absence region.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AcceptInviteForm": {
        "required": [
          "externalWorkspaceId",
          "inviteCode"
        ],
        "type": "object",
        "properties": {
          "inviteCode": {
            "minLength": 1,
            "type": "string",
            "description": "The invite code that was sent to the user."
          },
          "externalWorkspaceId": {
            "type": "string",
            "description": "The workspace id that the project will be shared to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "AddTaskBundleForm": {
        "type": "object",
        "properties": {
          "taskBundleId": {
            "type": "string",
            "description": "The id of the task bundle to add to the entity.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "defaultTaskListIdForEmails": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "referenceDateType": {
            "enum": [
              "today",
              "start",
              "end",
              "custom"
            ],
            "type": "string",
            "description": "(optional, default = TODAY) Defines the starting date from which the reference date is calculated.\r\nThe reference date is the date from which the Start/DueOn date of a task is calculated, based on the ReferenceDateAnchor.",
            "nullable": true
          },
          "referenceDateAnchor": {
            "enum": [
              "starts_on_reference_date",
              "ends_on_reference_date"
            ],
            "type": "string",
            "description": "(optional, default = START) Defines what the reference date represents for the schedule (start of first task or end of last task).",
            "nullable": true
          },
          "customReferenceDate": {
            "type": "string",
            "description": "(optional) The custom reference date when ReferenceDateType is set to 'custom'.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AdjustProjectDatesForm": {
        "type": "object",
        "properties": {
          "daysOffset": {
            "type": "integer",
            "description": "The number of days (positive or negative) to add/remove to the start/end dates of the project.",
            "format": "int32"
          },
          "adjustTasks": {
            "type": "boolean",
            "description": "If true, adjust the start/end dates of the tasks related to the project."
          },
          "adjustDatesOfDoneTasks": {
            "type": "boolean",
            "description": "If true and Awork.Core.Service.Feature.Projects.Projects.Models.AdjustProjectDatesForm.AdjustTasks is true, include the done tasks in the adjustment.",
            "nullable": true
          },
          "adjustBookings": {
            "type": "boolean",
            "description": "If true, adjust the start/end dates of the timebookings related to the project."
          },
          "adjustMilestones": {
            "type": "boolean",
            "description": "If true, adjust the start/end dates of the milestones related to the project."
          }
        },
        "additionalProperties": false,
        "description": "Form to specify the options for adjusting the start/end dates of a project and related entities."
      },
      "AdjustTimeBookingDatesForm": {
        "type": "object",
        "properties": {
          "daysOffset": {
            "type": "integer",
            "description": "The number of days (positive or negative) that will be added/subtracted the start/end dates of the time bookings.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AggregatedBillableDuration": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "description": "The id of the task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "billableDuration": {
            "type": "integer",
            "description": "The total billable duration of time tracked on the task in seconds.",
            "format": "int32"
          },
          "billedDuration": {
            "type": "integer",
            "description": "The total billed duration of time tracked on the task in seconds.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AggregatedTimes": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "The date of the aggregated times in UTC.\r\nIf the AggregatedBy is monthly, the day is set to 1.",
            "format": "date-time",
            "readOnly": true,
            "example": "2024-01-31T00:00:00Z"
          },
          "totalDuration": {
            "type": "integer",
            "description": "Summed duration of all times that day/month.",
            "format": "int32"
          },
          "typeOfWorkId": {
            "type": "string",
            "description": "The type of work the times are split by. Only set if SplitProperty is 'typeOfWork'.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isBillable": {
            "type": "boolean",
            "description": "The billability the times are split by. Only set if SplitProperty is 'billability'.",
            "nullable": true
          },
          "isBilled": {
            "type": "boolean",
            "description": "The billability the times are split by. Only set if SplitProperty is 'billability'.",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "description": "The project the times are split by. Only set if SplitProperty is 'project'.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The user the times are split by. Only set if SplitProperty is 'user'.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "companyId": {
            "type": "string",
            "description": "The company the times are split by. Only set if SplitProperty is 'company'.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ApiUser": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the API user.",
            "example": "awork Connector"
          },
          "roleId": {
            "type": "string",
            "description": "The role the user should be in.\r\nIf no role is specified, the user will become an admin.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "clientId": {
            "type": "string",
            "description": "The client id this API user belongs to.",
            "nullable": true,
            "example": "awork-connector"
          },
          "id": {
            "type": "string",
            "description": "The id of the API user.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this user was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this user.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date when this user was last updated.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ApiUserForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the API user.",
            "example": "awork Connector"
          },
          "roleId": {
            "type": "string",
            "description": "The role the user should be in.\r\nIf no role is specified, the user will become an admin.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ApiUserPostForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the API user.",
            "example": "awork Connector"
          },
          "roleId": {
            "type": "string",
            "description": "The role the user should be in.\r\nIf no role is specified, the user will become an admin.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "clientId": {
            "type": "string",
            "description": "The client id this API user belongs to.",
            "nullable": true,
            "example": "awork-connector"
          }
        },
        "additionalProperties": false
      },
      "ArchivedForm": {
        "required": [
          "isArchived"
        ],
        "type": "object",
        "properties": {
          "isArchived": {
            "type": "boolean",
            "description": "Flags the entity as archived.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ArchivedTaskListForm": {
        "required": [
          "isArchived"
        ],
        "type": "object",
        "properties": {
          "isArchived": {
            "type": "boolean",
            "description": "Flags the entity as archived.",
            "example": true
          },
          "taskOperation": {
            "type": "string",
            "description": "The operation for tasks which are not yet done.\r\nThe operation is required if you set a list to archived.\r\nCan be:\r\ntask-to-done: Set tasks to 'Done' or the first status of type 'done'.\r\ntask-remove: Remove tasks from this task list.\r\ntask-move: Move tasks to another list.\r\ntask-delete: Deletes the non done tasks.",
            "nullable": true,
            "example": "task-to-done"
          },
          "taskListId": {
            "type": "string",
            "description": "The id of the task list where all non done tasks should moved to.\r\nOnly necessary if TaskOperation is set to 'task-move'.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "deleteTimeTrackings": {
            "type": "boolean",
            "description": "Set to true to delete also the related time trackings\r\nof all non done tasks.\r\nOnly necessary if TaskOperation is set to 'task-delete'.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssignByEmailForm": {
        "required": [
          "email",
          "roleId",
          "taskId"
        ],
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "description": "The id of the task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "description": "The email of the new user.",
            "format": "email",
            "example": "carla.creative@ncnstn.com"
          },
          "roleId": {
            "type": "string",
            "description": "The id of the role to which the new user should be added.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the user to be invited.",
            "nullable": true,
            "example": "Carla"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user to be invited.",
            "nullable": true,
            "example": "Creative"
          },
          "gender": {
            "enum": [
              "male",
              "female",
              "other"
            ],
            "type": "string",
            "description": "The gender of the user to be invited.\r\nCould be 'male', 'female', 'other'",
            "example": "female"
          }
        },
        "additionalProperties": false
      },
      "AssignUserToAbsenceRegionForm": {
        "type": "object",
        "properties": {
          "regionId": {
            "type": "string",
            "description": "The id of the region to assign the users to.\r\nIf null, removes the user from any absence region.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "AssignUsersToAbsenceRegionForm": {
        "required": [
          "regionId",
          "userIds"
        ],
        "type": "object",
        "properties": {
          "userIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The list of userIds to assign to that region.\r\nProviding an empty list of user ids will remove all users from the absence region.",
            "example": [
              "7b356284-d22b-4f74-980d-0a548d3b6318",
              "b37f07dd-6644-4271-9c8a-bb700cc21b63"
            ]
          },
          "regionId": {
            "type": "string",
            "description": "The id of the region to assign the users to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "AutofixForm": {
        "type": "object",
        "properties": {
          "operationId": {
            "type": "string",
            "description": "A unique id to track the AI operation, provided by the client.\r\nWill be returned in the websocket events related to this async process.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "bookingIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ids of the bookings to fix.",
            "nullable": true
          },
          "taskIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ids of the tasks to fix.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BaseTagModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BaseTagModelWithCount": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "usageCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "BatchOperationForm": {
        "required": [
          "taskIds"
        ],
        "type": "object",
        "properties": {
          "taskIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The list of task ids to perform the batch operation on."
          },
          "newTaskListId": {
            "type": "string",
            "description": "The id of the new task list. Needed if operation is 'movetotasklist'. Optional if operation is 'movetoproject'.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "removeFromCurrentList": {
            "type": "boolean",
            "description": "Whether to remove the task from all its current task lists. Optional for operation 'movetotasklist'.",
            "nullable": true
          },
          "newProjectId": {
            "type": "string",
            "description": "The id of the new project to move the tasks to. Needed if operation is 'movetoproject'.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "newParentTaskId": {
            "type": "string",
            "description": "The id of the task that will be the new parent of the selected tasks. Needed if operation is 'moveundertask'.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "newTaskStatusId": {
            "type": "string",
            "description": "The id of the new task status id to change the tasks to. Needed if operation is 'movetoproject' or 'changetaskstatus'.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "newDueDate": {
            "type": "string",
            "description": "The new due date for the tasks. Optional for operation 'setdates'. If not set, due and start date will be removed.",
            "format": "date-time",
            "nullable": true
          },
          "newStartDate": {
            "type": "string",
            "description": "The new start date for the tasks. Optional for operation 'setdates'. Only gets used when NewDueDate is set.",
            "format": "date-time",
            "nullable": true
          },
          "removeDueDate": {
            "type": "boolean",
            "description": "Whether to remove the due date. Required for operation 'setdates'.",
            "nullable": true
          },
          "removeStartDate": {
            "type": "boolean",
            "description": "Whether to remove the start date. Required for operation 'setdates'.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagForm"
            },
            "description": "List of tags to add to the tasks. If task already has tag, tag is skipped.",
            "nullable": true
          },
          "deleteTimeTrackings": {
            "type": "boolean",
            "description": "Whether to delete the timetrackings of each task when deleting tasks. Optional for operation 'delete'.",
            "nullable": true
          },
          "newTypeOfWorkId": {
            "type": "string",
            "description": "The new type of work id for the tasks. Required if operation is 'changetypeofwork'.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "changeTimeEntries": {
            "type": "boolean",
            "description": "Whether to change the type of work of the timeentries for each task aswell. Optional for operation 'changetypeofwork'.",
            "nullable": true
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Depending on the batch operation, it can be either the ids of the user to assign ('assignusers', required) or the ids of the user to remove ('unassignusers', optional, if not provided unassigns all users).",
            "nullable": true
          },
          "removeOldAssignments": {
            "type": "boolean",
            "description": "Whether to replace or add user assignments to a task that has users already assigned. Optional for operation\r\n'assignusers'.",
            "nullable": true
          },
          "isPrio": {
            "type": "boolean",
            "description": "Whether to set the tasks to be prio or not. Required for operation 'setprio'.",
            "nullable": true
          },
          "daysOffset": {
            "type": "number",
            "description": "In case of an adjust date operation, define the number (positive or negative) of days that will be added/subtracted to the task dates.\r\nIt can be a decimal number (fraction of day)",
            "format": "double",
            "nullable": true
          },
          "updateTaskPlannedDuration": {
            "type": "boolean",
            "description": "Whether to update the task's planned duration based on the assignments (default: true for backwards compatibility).\r\nUsed for 'assignusers', 'unassignusers', and 'delete' operations.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Break": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "The start date and time of the break in UTC. Required.",
            "format": "date-time",
            "example": "2022-01-01T12:00:00Z"
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the break in seconds. Required when the end date is set.\r\nWhen a time tracking is paused, it has at least one break with a start date and no duration or end date.",
            "format": "int32",
            "nullable": true,
            "example": 3600
          },
          "endDate": {
            "type": "string",
            "description": "The end date and time of the break in UTC. Required when the duration is set and the break is finished.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-01-01T13:00:00Z"
          }
        },
        "additionalProperties": false,
        "description": "The break model. Shows when a time tracking was paused."
      },
      "ChangeProjectForm": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "The id of the project the task is assigned to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "taskStatusId": {
            "type": "string",
            "description": "The id of the new status the task is assigned to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ChangeProjectFormForTaskLists": {
        "required": [
          "projectId",
          "taskStatusMapping"
        ],
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "The id of the project the list will be moved to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "taskStatusMapping": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangeTaskStatusForm"
            },
            "description": "The task status mapping from old task status to new task status."
          }
        },
        "additionalProperties": false
      },
      "ChangeProjectStatusForm": {
        "required": [
          "projectStatusId"
        ],
        "type": "object",
        "properties": {
          "projectStatusId": {
            "type": "string",
            "description": "The id of the project status to change to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ChangeProjectTypeForm": {
        "required": [
          "projectTypeId"
        ],
        "type": "object",
        "properties": {
          "projectTypeId": {
            "type": "string",
            "description": "The id of the project type to change to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ChangeStatusForm": {
        "required": [
          "statusId",
          "taskId"
        ],
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "description": "The id of the task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "statusId": {
            "type": "string",
            "description": "The id of the task status.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "order": {
            "type": "number",
            "description": "The order of the status int the new task status.\r\nThe task is appended to the end if the Order is not set.",
            "format": "double",
            "nullable": true,
            "example": 2
          }
        },
        "additionalProperties": false
      },
      "ChangeSubtaskTemplatesPostForm": {
        "type": "object",
        "properties": {
          "taskTemplateId": {
            "type": "string",
            "description": "The id of the task template.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "parentId": {
            "type": "string",
            "description": "The id of the parent task template.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "order": {
            "type": "number",
            "description": "The order the subtask template related to its parent template.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeSubtaskTemplatesToParentPostForm": {
        "type": "object",
        "properties": {
          "taskListTemplateId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "order": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "taskTemplateId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ChangeSubtasksPostForm": {
        "required": [
          "parentId",
          "taskId"
        ],
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "description": "The id of the task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "parentId": {
            "type": "string",
            "description": "The id of the parent task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "order": {
            "type": "number",
            "description": "The order the subtask related to its parent.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChangeSubtasksToParentPostForm": {
        "type": "object",
        "properties": {
          "listId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "order": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "taskId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ChangeTaskListsForm": {
        "required": [
          "taskId",
          "taskLists"
        ],
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "description": "The id of the task to change.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "taskLists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskListToTaskForm"
            },
            "description": "The lists the task should be moved to."
          }
        },
        "additionalProperties": false
      },
      "ChangeTaskStatusForm": {
        "required": [
          "newStatusId",
          "oldStatusId"
        ],
        "type": "object",
        "properties": {
          "oldStatusId": {
            "type": "string",
            "description": "The old task status id.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "newStatusId": {
            "type": "string",
            "description": "The new task status id.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ChecklistItem": {
        "type": "object",
        "properties": {
          "isDone": {
            "type": "boolean",
            "description": "Whether the checklist item is done."
          },
          "name": {
            "type": "string",
            "description": "The name of the checklist item.",
            "nullable": true,
            "example": "Create YouTube Ads"
          },
          "order": {
            "type": "number",
            "description": "The order of the checklist item.",
            "format": "double",
            "nullable": true,
            "example": 4
          },
          "id": {
            "type": "string",
            "description": "The id of the checklist item.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this checklist item was created.",
            "format": "date-time",
            "example": "2021-03-12T11:00:00Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this checklist item.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this checklist item was last modified.",
            "format": "date-time",
            "example": "2021-03-14T11:31:00Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this checklist item.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "taskId": {
            "type": "string",
            "description": "The id of the task this checklist item belongs to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ChecklistItemForm": {
        "type": "object",
        "properties": {
          "isDone": {
            "type": "boolean",
            "description": "Whether the checklist item is done."
          },
          "name": {
            "type": "string",
            "description": "The name of the checklist item.",
            "nullable": true,
            "example": "Create YouTube Ads"
          },
          "order": {
            "type": "number",
            "description": "The order of the checklist item.",
            "format": "double",
            "nullable": true,
            "example": 4
          }
        },
        "additionalProperties": false
      },
      "ChecklistItemTemplate": {
        "type": "object",
        "properties": {
          "isDone": {
            "type": "boolean",
            "description": "Whether the checklist item is done."
          },
          "name": {
            "type": "string",
            "description": "The name of the checklist item.",
            "nullable": true,
            "example": "Create YouTube Ads"
          },
          "order": {
            "type": "number",
            "description": "The order of the checklist item.",
            "format": "double",
            "nullable": true,
            "example": 4
          },
          "id": {
            "type": "string",
            "description": "The id of the checklist item.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this checklist item was created.",
            "format": "date-time",
            "example": "2021-03-20T14:00:00Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this checklist item.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this checklist item was last modified.",
            "format": "date-time",
            "example": "2021-03-20T17:03:00Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this check list.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "taskTemplateId": {
            "type": "string",
            "description": "The id of the task template this checklist item belongs to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ChecklistItemTemplateForm": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the checklist item.",
            "nullable": true,
            "example": "Sample Checklist template"
          },
          "order": {
            "type": "number",
            "description": "The order of the checklist item.",
            "format": "double",
            "nullable": true,
            "example": 2
          }
        },
        "additionalProperties": false
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the comment.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "entityId": {
            "type": "string",
            "description": "The id of the entity of the comment.\r\nRequired.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "entityType": {
            "type": "string",
            "description": "The type of the entity of the comment.\r\nCan be \"projects\", \"tasks\".\r\nRequired.",
            "nullable": true,
            "example": "tasks"
          },
          "entity": {
            "$ref": "#/components/schemas/IDefaultNameModel"
          },
          "project": {
            "$ref": "#/components/schemas/IDefaultNameModel"
          },
          "task": {
            "$ref": "#/components/schemas/IDefaultNameModel"
          },
          "document": {
            "$ref": "#/components/schemas/IDefaultNameModel"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this object was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this object.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "user": {
            "$ref": "#/components/schemas/ConnectedUserModel"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this object was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this object.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "mentions": {
            "$ref": "#/components/schemas/Mentions"
          },
          "reactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reaction"
            },
            "description": "The reactions on a comment.",
            "nullable": true
          },
          "formattedMessage": {
            "type": "string",
            "description": "The formatted and proccessed version of the comment message. E.g. mentions are in a human readable format.\r\nThe formatted comment message is styled with html.",
            "nullable": true,
            "example": "Hey team, the customer loved the latest designs!"
          },
          "plainFormattedMessage": {
            "type": "string",
            "description": "The formatted and proccessed version of the comment message. E.g. mentions are in a human readable format.\r\nThe formatted comment message is not styled.",
            "nullable": true,
            "example": "Hey team, the customer loved the latest designs!"
          },
          "resourceVersion": {
            "type": "integer",
            "description": "The version of the entity, updated on every modification, to the ticks in UTC.\r\nNot identical to UpdatedOn.",
            "format": "int64",
            "readOnly": true,
            "example": 637825154598057900
          },
          "message": {
            "type": "string",
            "description": "The message of the comment.",
            "nullable": true,
            "example": "Hey team, the customer loved the latest designs!"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user who created the comment.\r\nOptional. If not set, defaults to the current user.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "previews": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The preview URLs to show a preview for.",
            "nullable": true,
            "example": [
              "https://www.awork.com/en/blog/automatic-project-management/"
            ]
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "True if the comment should be hidden to connect users."
          },
          "isResolved": {
            "type": "boolean",
            "description": "Whether the comment has been resolved.\r\nOnly available for comments on documents.",
            "nullable": true
          },
          "inReplyToCommentId": {
            "type": "string",
            "description": "The parent comment this comment is a reply to.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "The comment model."
      },
      "CommentEventModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the comment.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "entityId": {
            "type": "string",
            "description": "The id of the entity of the comment.\r\nRequired.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "entityType": {
            "type": "string",
            "description": "The type of the entity of the comment.\r\nCan be \"projects\", \"tasks\".\r\nRequired.",
            "nullable": true,
            "example": "tasks"
          },
          "entity": {
            "$ref": "#/components/schemas/IDefaultNameModel"
          },
          "project": {
            "$ref": "#/components/schemas/NestedProjectEventModel"
          },
          "task": {
            "$ref": "#/components/schemas/NestedTaskEventModel"
          },
          "document": {
            "$ref": "#/components/schemas/NestedDocumentEventModel"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this object was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this object.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "user": {
            "$ref": "#/components/schemas/ConnectedUserModel"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this object was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this object.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "mentions": {
            "$ref": "#/components/schemas/Mentions"
          },
          "reactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reaction"
            },
            "description": "The reactions on a comment.",
            "nullable": true
          },
          "formattedMessage": {
            "type": "string",
            "description": "The formatted and proccessed version of the comment message. E.g. mentions are in a human readable format.\r\nThe formatted comment message is styled with html.",
            "nullable": true,
            "example": "Hey team, the customer loved the latest designs!"
          },
          "plainFormattedMessage": {
            "type": "string",
            "description": "The formatted and proccessed version of the comment message. E.g. mentions are in a human readable format.\r\nThe formatted comment message is not styled.",
            "nullable": true,
            "example": "Hey team, the customer loved the latest designs!"
          },
          "resourceVersion": {
            "type": "integer",
            "description": "The version of the entity, updated on every modification, to the ticks in UTC.\r\nNot identical to UpdatedOn.",
            "format": "int64",
            "readOnly": true,
            "example": 637825154598057900
          },
          "message": {
            "type": "string",
            "description": "The message of the comment.",
            "nullable": true,
            "example": "Hey team, the customer loved the latest designs!"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user who created the comment.\r\nOptional. If not set, defaults to the current user.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "previews": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The preview URLs to show a preview for.",
            "nullable": true,
            "example": [
              "https://www.awork.com/en/blog/automatic-project-management/"
            ]
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "True if the comment should be hidden to connect users."
          },
          "isResolved": {
            "type": "boolean",
            "description": "Whether the comment has been resolved.\r\nOnly available for comments on documents.",
            "nullable": true
          },
          "inReplyToCommentId": {
            "type": "string",
            "description": "The parent comment this comment is a reply to.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isExternal": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CommentForm": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "maxLength": 65000,
            "minLength": 1,
            "type": "string",
            "description": "The message of the comment.",
            "example": "Hey team, the customer loved the latest designs!"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user who created the comment.\r\nOptional. If not set, defaults to the current user.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "previews": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The preview URLs to show a preview for.",
            "nullable": true,
            "example": [
              "https://www.awork.com/en/blog/automatic-project-management/"
            ]
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "(optional) Whether the comment is hidden for connect users.\r\nProviding a null value will not change the current state.\r\nBy default, comments are not hidden for connect users.",
            "nullable": true
          },
          "isResolved": {
            "type": "boolean",
            "description": "Whether the comment has been resolved.\r\nOnly available for comments on documents.",
            "nullable": true
          },
          "inReplyToCommentId": {
            "type": "string",
            "description": "The parent comment this comment is a reply to.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "CommentPutForm": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "maxLength": 65000,
            "minLength": 1,
            "type": "string",
            "description": "The message of the comment.",
            "example": "Hey team, the customer loved the latest designs!"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user who created the comment.\r\nOptional. If not set, defaults to the current user.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "previews": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The preview URLs to show a preview for.",
            "nullable": true,
            "example": [
              "https://www.awork.com/en/blog/automatic-project-management/"
            ]
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "(optional) Whether the comment is hidden for connect users.\r\nProviding a null value will not change the current state.\r\nBy default, comments are not hidden for connect users.",
            "nullable": true
          },
          "isResolved": {
            "type": "boolean",
            "description": "Whether the comment has been resolved.\r\nOnly available for comments on documents.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Company": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The company name.",
            "example": "NCNSTN Brand Design"
          },
          "description": {
            "maxLength": 25000,
            "minLength": 0,
            "type": "string",
            "description": "The company description.",
            "nullable": true,
            "example": "A small agency with a team of around 20 people, located in the heart of Berlin"
          },
          "industry": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The company's industry.",
            "nullable": true,
            "example": "Brand Agency"
          },
          "id": {
            "type": "string",
            "description": "The id of the company.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the company has an image.",
            "example": true
          },
          "companyContactInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactInfoForCompanies"
            },
            "description": "The company infos assigned to this company.",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "resourceVersion": {
            "type": "integer",
            "description": "The version of the entity, updated on every modification, to the ticks in UTC.\r\nNot identical to UpdatedOn.",
            "format": "int64",
            "readOnly": true,
            "example": 637825154598057900
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyTagModel"
            },
            "description": "The tags for this company.",
            "nullable": true
          },
          "projectsCount": {
            "type": "integer",
            "description": "The number of all projects related to the company.",
            "format": "int32",
            "example": 3
          },
          "projectsInProgressCount": {
            "type": "integer",
            "description": "The number of all projects in status 'progress' related to the company.",
            "format": "int32",
            "example": 2
          },
          "isExternal": {
            "type": "boolean",
            "description": "True if this entity is coming from an external workspace (awork Connect).",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "The GET company model."
      },
      "CompanyDeleteForm": {
        "type": "object",
        "properties": {
          "moveToCompany": {
            "type": "string",
            "description": "Moves all related objects to this company.\r\nRelated projects and tasks (including their time entries) will be connected to this company.\r\nHave to set if 'DeleteOperation' contains 'move'.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "deleteOperation": {
            "type": "string",
            "description": "Defines the operation to delete a company.\r\nPossible operations are\r\n'move': Move related objects to another company.\r\n'delete-only-company': Delete only the company. Related objects loose the company information.\r\n'delete-all-without-timeentries': Delete all related objects apart from time entries.\r\n'delete-all': Delete all.",
            "nullable": true,
            "example": "delete-all"
          }
        },
        "additionalProperties": false
      },
      "CompanyForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The company name.",
            "example": "NCNSTN Brand Design"
          },
          "description": {
            "maxLength": 25000,
            "minLength": 0,
            "type": "string",
            "description": "The company description.",
            "nullable": true,
            "example": "A small agency with a team of around 20 people, located in the heart of Berlin"
          },
          "industry": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The company's industry.",
            "nullable": true,
            "example": "Brand Agency"
          }
        },
        "additionalProperties": false,
        "description": "The POST/PUT company model."
      },
      "CompanyModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultTagModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CompanyTagModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the tag.",
            "nullable": true,
            "example": "Design"
          },
          "color": {
            "type": "string",
            "description": "The color of the tag.",
            "nullable": true,
            "example": "purple"
          }
        },
        "additionalProperties": false,
        "description": "A tag model used for the company.\r\nDo not delete, we need to create copies of the tag model for each entity to avoid issues with Automapper."
      },
      "ConnectedUserModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "True if the model is coming from an external workspace (awork Connect).\r\nFalse otherwise."
          }
        },
        "additionalProperties": false
      },
      "ContactInfo": {
        "type": "object",
        "properties": {
          "label": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The label of the contact info.\r\nOnly necessary if type 'custom' is used.",
            "nullable": true,
            "example": null
          },
          "value": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The value of the contact info.",
            "nullable": true,
            "example": null
          },
          "type": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The type of the contact info. Possible values are: phone, email, address, messenger, social, urls.",
            "nullable": true,
            "example": "address"
          },
          "subType": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The subtype of the contact info, Possible values are: Phone: [ 'work', 'mobile', 'home', 'work Fax', 'fax', 'other' ]\r\nEmail: [ 'work', 'private', 'other' ] address: [ 'work', 'home', 'other' ] Messenger: [ 'skype', 'whatsapp', 'other' ]\r\nsocial: [ 'facebook', 'twitter', 'xing', 'linkedIn', 'instagram', 'pinterest', 'other' ] urls: [ 'work', 'private',\r\n'gitHub', 'other' ].",
            "nullable": true,
            "example": "work"
          },
          "addressLine1": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The first Address line of the address.",
            "nullable": true,
            "example": "Torstrasse 140"
          },
          "addressLine2": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The second address line of the contact info.",
            "nullable": true,
            "example": "Hof A"
          },
          "zipCode": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The Zipcode of the contact info.",
            "nullable": true,
            "example": "10119"
          },
          "city": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The city of the contact info.",
            "nullable": true,
            "example": "Berlin"
          },
          "state": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The state of the contact info.",
            "nullable": true,
            "example": null
          },
          "country": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The 2 letter iso code of the country.",
            "nullable": true,
            "example": "DE"
          },
          "isAddress": {
            "type": "boolean",
            "description": "Flags whether this contactinfo is an address or not. If its an address, the address fields are required.",
            "example": true
          },
          "id": {
            "type": "string",
            "description": "The Id of the contact info.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Whether the user has been deleted.",
            "example": false
          },
          "createdOn": {
            "type": "string",
            "description": "The creation date.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created the entity.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date when the entity was updated.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "the id of the user who updated the entity.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "The contact info are different types of contact information for a user."
      },
      "ContactInfoForCompanies": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "label": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The label of the contact info.\r\nOnly necessary if type 'custom' is used.",
            "nullable": true
          },
          "value": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The value of the contact info.",
            "nullable": true
          },
          "type": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The type of the contact info. Possible values are: 'phone', 'email', 'address', 'custom'.",
            "example": "address"
          },
          "subType": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The subtype of the contact info, Possible values are:\r\nphone: [ 'central', 'other' ]\r\nemail: [ 'central', 'invoice', 'other' ]\r\naddress: [ 'central', 'invoice', 'other' ] url: [ 'primary', 'other']",
            "nullable": true,
            "example": "central"
          },
          "addressLine1": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The first address line of the contact info.",
            "nullable": true,
            "example": "Torstrasse 140"
          },
          "addressLine2": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The second address line of the contact info.",
            "nullable": true,
            "example": "Hof A"
          },
          "zipCode": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The zipcode of the contact info.",
            "nullable": true,
            "example": "10119"
          },
          "city": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The city of the contact info.",
            "nullable": true,
            "example": "Berlin"
          },
          "state": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The state of the contact info.",
            "nullable": true
          },
          "country": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The 2 letter iso code of the country.",
            "nullable": true,
            "example": "DE"
          },
          "isAddress": {
            "type": "boolean",
            "description": "Flags whether this contact info is an address. If it's an address, the address fields are required.",
            "example": true
          },
          "id": {
            "type": "string",
            "description": "The Id of the contact info.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "The contact info are different types of contact information for a company"
      },
      "ContactInfoForm": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "label": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The label of the contact info.\r\nOnly necessary if type 'custom' is used.",
            "nullable": true
          },
          "value": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The value of the contact info.",
            "nullable": true
          },
          "type": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The type of the contact info. Possible values are: 'phone', 'email', 'address', 'custom'.",
            "example": "address"
          },
          "subType": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The subtype of the contact info, Possible values are:\r\nphone: [ 'central', 'other' ]\r\nemail: [ 'central', 'invoice', 'other' ]\r\naddress: [ 'central', 'invoice', 'other' ] url: [ 'primary', 'other']",
            "nullable": true,
            "example": "central"
          },
          "addressLine1": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The first address line of the contact info.",
            "nullable": true,
            "example": "Torstrasse 140"
          },
          "addressLine2": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The second address line of the contact info.",
            "nullable": true,
            "example": "Hof A"
          },
          "zipCode": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The zipcode of the contact info.",
            "nullable": true,
            "example": "10119"
          },
          "city": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The city of the contact info.",
            "nullable": true,
            "example": "Berlin"
          },
          "state": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The state of the contact info.",
            "nullable": true
          },
          "country": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The 2 letter iso code of the country.",
            "nullable": true,
            "example": "DE"
          },
          "isAddress": {
            "type": "boolean",
            "description": "Flags whether this contact info is an address. If it's an address, the address fields are required.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "The contact info are different types of contact information for a company"
      },
      "ContactInfoFormForUsers": {
        "type": "object",
        "properties": {
          "label": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The label of the contact info.\r\nOnly necessary if type 'custom' is used.",
            "nullable": true,
            "example": null
          },
          "value": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The value of the contact info.",
            "nullable": true,
            "example": null
          },
          "type": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The type of the contact info. Possible values are: phone, email, address, messenger, social, urls.",
            "nullable": true,
            "example": "address"
          },
          "subType": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The subtype of the contact info, Possible values are: Phone: [ 'work', 'mobile', 'home', 'work Fax', 'fax', 'other' ]\r\nEmail: [ 'work', 'private', 'other' ] address: [ 'work', 'home', 'other' ] Messenger: [ 'skype', 'whatsapp', 'other' ]\r\nsocial: [ 'facebook', 'twitter', 'xing', 'linkedIn', 'instagram', 'pinterest', 'other' ] urls: [ 'work', 'private',\r\n'gitHub', 'other' ].",
            "nullable": true,
            "example": "work"
          },
          "addressLine1": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The first Address line of the address.",
            "nullable": true,
            "example": "Torstrasse 140"
          },
          "addressLine2": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The second address line of the contact info.",
            "nullable": true,
            "example": "Hof A"
          },
          "zipCode": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The Zipcode of the contact info.",
            "nullable": true,
            "example": "10119"
          },
          "city": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The city of the contact info.",
            "nullable": true,
            "example": "Berlin"
          },
          "state": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The state of the contact info.",
            "nullable": true,
            "example": null
          },
          "country": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The 2 letter iso code of the country.",
            "nullable": true,
            "example": "DE"
          },
          "isAddress": {
            "type": "boolean",
            "description": "Flags whether this contactinfo is an address or not. If its an address, the address fields are required.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "The contact info are different types of contact information for a user."
      },
      "ContributorForm": {
        "required": [
          "accessLevel"
        ],
        "type": "object",
        "properties": {
          "accessLevel": {
            "minLength": 1,
            "enum": [
              "read",
              "manage"
            ],
            "type": "string",
            "description": "Determines the level of access granted to this contributor with respect to the referenced entity.\r\nCan be either set to `read` or `manage`."
          }
        },
        "additionalProperties": false
      },
      "ContributorModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the contributor.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user this contributor references.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "accessLevel": {
            "type": "string",
            "description": "Determines the level of access granted to this contributor with respect to the specific entity.\r\nCan be either set to `read` or `manage`.",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the user.",
            "nullable": true,
            "example": "Lisa"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user.",
            "nullable": true,
            "example": "Smith"
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the user has an image.",
            "nullable": true,
            "example": true
          },
          "isDeactivated": {
            "type": "boolean",
            "description": "Whether the user is deactivated.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "ContributorPostForm": {
        "required": [
          "accessLevel",
          "userId"
        ],
        "type": "object",
        "properties": {
          "accessLevel": {
            "minLength": 1,
            "enum": [
              "read",
              "manage"
            ],
            "type": "string",
            "description": "Determines the level of access granted to this contributor with respect to the referenced entity.\r\nCan be either set to `read` or `manage`."
          },
          "userId": {
            "type": "string",
            "description": "The id of the user this contributor references.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "CopyTaskBundleForm": {
        "type": "object",
        "properties": {
          "projectTemplateId": {
            "type": "string",
            "description": "The id of the project template to add to the entity.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "CreateTaskBundleFromProjectForm": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the task bundle. Required if its not related to a task bundle.",
            "nullable": true,
            "example": "Project Kickoff"
          },
          "description": {
            "type": "string",
            "description": "The description of the task bundle.",
            "nullable": true,
            "example": "Includes all tasks related to getting this project off the ground successfully. For the joy of work!"
          },
          "icon": {
            "type": "string",
            "description": "The icon of the task bundle.",
            "nullable": true,
            "example": "arrow_forward"
          },
          "projectTemplateId": {
            "type": "string",
            "description": "The project template id of the task bundle, only necessary for the creation of an empty bundle for a project template.",
            "format": "uuid",
            "nullable": true,
            "example": "f76a7b32-f279-ec11-94f6-dc984040d6c9"
          },
          "referenceDate": {
            "type": "string",
            "description": "If provided, it will make the start/end dates of the tasks relative to this date.\r\nIn start or end dates of project/tasks are not available then no relative dates will be set.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateTaskStatusesForm": {
        "type": "object",
        "properties": {
          "projectTemplateId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "CreateTemplateFromProjectForm": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "importProjectDetails": {
            "type": "boolean",
            "description": "Imports the project tags and project type of the project."
          },
          "importProjectSettings": {
            "type": "boolean",
            "description": "Includes the billability, and the setting for default list for tasks from emails."
          },
          "importProjectStatuses": {
            "type": "boolean",
            "description": "Imports the project statuses."
          },
          "importTimeBudget": {
            "type": "boolean",
            "description": "Imports the project time budget.\r\nNote: not currently used in the frontend."
          },
          "importMilestones": {
            "type": "boolean",
            "description": "Imports the project milestones.\r\nNote: not currently used in the frontend."
          },
          "importAutomations": {
            "type": "boolean",
            "description": "Imports the project automations."
          },
          "importTaskStatuses": {
            "type": "boolean",
            "description": "Imports the task statuses."
          },
          "importTaskAndLists": {
            "type": "boolean",
            "description": "Imports the project tasks, task lists and task dependencies."
          },
          "importProjectCustomFieldValues": {
            "type": "boolean",
            "description": "Imports the project custom field values."
          },
          "referenceDate": {
            "type": "string",
            "description": "If provided, it will set the start/end dates of the project and tasks to be relative to this date.\r\nIf start or end dates of project/tasks are not available then no relative dates will be set.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomField": {
        "type": "object",
        "properties": {
          "customFieldDefinitionId": {
            "type": "string",
            "description": "The custom field definition id.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userIdValue": {
            "type": "string",
            "description": "The the user id value.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "numberValue": {
            "type": "number",
            "description": "The number value.",
            "format": "double",
            "nullable": true,
            "example": 123.45
          },
          "selectionOptionIdValue": {
            "type": "string",
            "description": "The selection option id value.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "selectionOption": {
            "$ref": "#/components/schemas/CustomFieldSelectionOption"
          },
          "textValue": {
            "type": "string",
            "description": "The text value.",
            "nullable": true,
            "example": "S1: Business Critical"
          },
          "dateValue": {
            "type": "string",
            "description": "The date value.",
            "format": "date-time",
            "nullable": true
          },
          "booleanValue": {
            "type": "boolean",
            "description": "The boolean value.",
            "nullable": true,
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the custom field value."
      },
      "CustomFieldDefinition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the custom field definition.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the custom field definition.",
            "nullable": true,
            "example": "Ticket-Number"
          },
          "entity": {
            "enum": [
              "task"
            ],
            "type": "string",
            "description": "The entity the custom field definition can be linked to.",
            "example": "task"
          },
          "type": {
            "enum": [
              "text",
              "number",
              "date",
              "datetime",
              "select",
              "coloredSelect",
              "link",
              "boolean",
              "user"
            ],
            "type": "string",
            "description": "The type of the custom field definition.",
            "example": "text"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time",
            "example": "2022-03-10T16:25:09.100Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time",
            "example": "2022-03-10T18:55:00.500Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "order": {
            "type": "number",
            "description": "If it's a project custom field, it's the global order of the custom field definition.\r\nOtherwise, it's the order of the custom field definition within a project template or a project.",
            "format": "double",
            "nullable": true,
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "CustomFieldDefinitionPostForm": {
        "required": [
          "entity",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the custom field definition.",
            "example": "Ticket-Number"
          },
          "type": {
            "minLength": 1,
            "enum": [
              "text",
              "number",
              "date",
              "datetime",
              "select",
              "coloredSelect",
              "link",
              "boolean",
              "user"
            ],
            "type": "string",
            "description": "The type of the custom field definition.",
            "example": "text"
          },
          "selectionOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldSelectionOptionsForm"
            },
            "description": "The selection options for the custom field definition. Can only be used if the type is 'select'.",
            "nullable": true
          },
          "entity": {
            "minLength": 1,
            "enum": [
              "task",
              "project"
            ],
            "type": "string",
            "description": "The entity the custom field definition can be linked to.",
            "example": "task"
          }
        },
        "additionalProperties": false
      },
      "CustomFieldDefinitionPutForm": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The name of the custom field definition.",
            "example": "Ticket-Number"
          },
          "type": {
            "minLength": 1,
            "enum": [
              "text",
              "number",
              "date",
              "datetime",
              "select",
              "coloredSelect",
              "link",
              "boolean",
              "user"
            ],
            "type": "string",
            "description": "The type of the custom field definition. When updating a custom field definition, only the following changes are allowed: 'date' ↔ 'datetime', 'select' ↔ 'coloredSelect'.",
            "example": "text"
          },
          "order": {
            "type": "number",
            "description": "The global (workspace-level) order of the custom field definition.\r\nOnly project custom field definitions have a global order.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomFieldDefinitionWithSelectionOptions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the custom field definition.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the custom field definition.",
            "nullable": true,
            "example": "Ticket-Number"
          },
          "entity": {
            "enum": [
              "task"
            ],
            "type": "string",
            "description": "The entity the custom field definition can be linked to.",
            "example": "task"
          },
          "type": {
            "enum": [
              "text",
              "number",
              "date",
              "datetime",
              "select",
              "coloredSelect",
              "link",
              "boolean",
              "user"
            ],
            "type": "string",
            "description": "The type of the custom field definition.",
            "example": "text"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time",
            "example": "2022-03-10T16:25:09.100Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time",
            "example": "2022-03-10T18:55:00.500Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "order": {
            "type": "number",
            "description": "If it's a project custom field, it's the global order of the custom field definition.\r\nOtherwise, it's the order of the custom field definition within a project template or a project.",
            "format": "double",
            "nullable": true,
            "example": 1
          },
          "selectionOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldSelectionOption"
            },
            "description": "The selection options for this custom field definition.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomFieldDefinitionWithSelectionOptionsAndLinkedProjectIds": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the custom field definition.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the custom field definition.",
            "nullable": true,
            "example": "Ticket-Number"
          },
          "entity": {
            "enum": [
              "task"
            ],
            "type": "string",
            "description": "The entity the custom field definition can be linked to.",
            "example": "task"
          },
          "type": {
            "enum": [
              "text",
              "number",
              "date",
              "datetime",
              "select",
              "coloredSelect",
              "link",
              "boolean",
              "user"
            ],
            "type": "string",
            "description": "The type of the custom field definition.",
            "example": "text"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time",
            "example": "2022-03-10T16:25:09.100Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time",
            "example": "2022-03-10T18:55:00.500Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "order": {
            "type": "number",
            "description": "If it's a project custom field, it's the global order of the custom field definition.\r\nOtherwise, it's the order of the custom field definition within a project template or a project.",
            "format": "double",
            "nullable": true,
            "example": 1
          },
          "selectionOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldSelectionOption"
            },
            "description": "The selection options for this custom field definition.",
            "nullable": true
          },
          "linkedProjectIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The linked project ids for this custom field definition.",
            "nullable": true,
            "example": [
              "123e4567-e89b-12d3-a456-426614174000"
            ]
          }
        },
        "additionalProperties": false
      },
      "CustomFieldOrderForm": {
        "type": "object",
        "properties": {
          "order": {
            "type": "number",
            "description": "The order of the custom field definition within a project template or a project.",
            "format": "double",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "CustomFieldOrderPutForm": {
        "required": [
          "order"
        ],
        "type": "object",
        "properties": {
          "order": {
            "type": "number",
            "description": "The order of the custom field definition within a project template or a project.",
            "format": "double",
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "CustomFieldPostForm": {
        "required": [
          "customFieldDefinitionId"
        ],
        "type": "object",
        "properties": {
          "customFieldDefinitionId": {
            "type": "string",
            "description": "The custom field definition id.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userIdValue": {
            "type": "string",
            "description": "The user id. The user id can be set for custom field type 'user'.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "numberValue": {
            "type": "number",
            "description": "The number value. The number value can be set for custom field type 'number'.",
            "format": "double",
            "nullable": true,
            "example": 123.45
          },
          "selectionOptionIdValue": {
            "type": "string",
            "description": "The selection option id value. The id can be set for custom field types 'select' and 'coloredSelect'.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "textValue": {
            "maxLength": 750,
            "type": "string",
            "description": "The text value. The text value can be set for custom field types 'text' and 'link'.",
            "nullable": true,
            "example": "A custom logo"
          },
          "dateValue": {
            "type": "string",
            "description": "The date value. The date value can be set for custom field types 'date' and 'datetime'.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-10T16:30:26.100Z"
          },
          "booleanValue": {
            "type": "boolean",
            "description": "The boolean value. The boolean value can be set for custom field type 'boolean'.",
            "nullable": true,
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the form for posting custom field data."
      },
      "CustomFieldSelectionOption": {
        "required": [
          "order",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the custom field selection option.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The selection value which can be later used in a select custom field.",
            "example": "Website Design"
          },
          "color": {
            "enum": [
              "red",
              "orange",
              "yellow",
              "green",
              "cyan",
              "blue",
              "indigo",
              "purple",
              "steel"
            ],
            "type": "string",
            "description": "The color of the selection option.",
            "nullable": true,
            "example": "purple"
          },
          "order": {
            "type": "number",
            "description": "The order of the custom field selection option.",
            "format": "double",
            "example": 0
          }
        },
        "additionalProperties": false
      },
      "CustomFieldSelectionOptionsForm": {
        "required": [
          "order",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The selection value which can be used in a select custom field.",
            "example": "Website Design"
          },
          "color": {
            "enum": [
              "red",
              "orange",
              "yellow",
              "green",
              "cyan",
              "blue",
              "indigo",
              "purple",
              "steel"
            ],
            "type": "string",
            "description": "The color of the selection option.",
            "nullable": true,
            "example": "purple"
          },
          "order": {
            "type": "number",
            "description": "The order of the custom field selection option.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "Dashboard": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the dashboard.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user that the dashboard belongs to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "widgets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Widget"
            },
            "description": "A list of all widgets of the dashboard.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DayOff": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the absence entity, if available.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-11T15:33:47.100Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this entity.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-11T21:15:00.100Z"
          },
          "deletedBy": {
            "type": "string",
            "description": "The id of the user that deleted the absence.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user that will have the day off.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "startOn": {
            "type": "string",
            "description": "The start time of the day off.",
            "format": "date-time",
            "example": "2022-03-01T00:00:00Z"
          },
          "endOn": {
            "type": "string",
            "description": "The end time of the day off.",
            "format": "date-time",
            "example": "2022-03-03T00:00:00Z"
          },
          "description": {
            "type": "string",
            "description": "The description of the day off.\r\nIn case of public holidays, it will contain the name of the holiday in the local language.",
            "nullable": true,
            "example": "Neujahr"
          },
          "englishDescription": {
            "type": "string",
            "description": "In case of public holidays, it will contain the name of the holiday in English.\r\nNull if the day off is an absence.",
            "nullable": true,
            "example": "New Year's Day"
          },
          "externalProvider": {
            "type": "string",
            "description": "The external provider for the absence, if available.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of the day off.\r\nPossible values are: absence, holiday, workspaceAbsence.",
            "nullable": true
          },
          "isReadOnly": {
            "type": "boolean",
            "description": "True means that this day off is read-only and cannot be edited/deleted by the user.",
            "readOnly": true
          },
          "isHalfDayOnStart": {
            "type": "boolean",
            "description": "A user can be off for a full day or half day (morning or afternoon).\r\nFor a single day off, a true value means the user is off in the morning.\r\nFor multiple days off, a true value means the absence period starts in the afternoon of the first day.",
            "readOnly": true
          },
          "isHalfDayOnEnd": {
            "type": "boolean",
            "description": "A user can be off for a full day or half day (morning or afternoon).\r\nFor a single day off, a true value means the user is off in the afternoon.\r\nFor multiple days off, a true value means the absence period ends on the morning of the last day.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DaysOffQueryForm": {
        "type": "object",
        "properties": {
          "userIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "from": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "to": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DefaultStatusModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "isArchived": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DefaultTagModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "entityId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "DefaultTaskList": {
        "type": "object",
        "properties": {
          "defaultTasklistId": {
            "type": "string",
            "description": "The default task list id.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "DefaultTypeModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "isArchived": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DeleteProjectTypeForm": {
        "type": "object",
        "properties": {
          "projectTypeId": {
            "type": "string",
            "description": "The id of the new project type.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "The model to delete a project type."
      },
      "DeleteRoleForm": {
        "type": "object",
        "properties": {
          "newRoleId": {
            "type": "string",
            "description": "The id of the role to which all users of the old role will be moved.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "DeleteTagForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "DeleteTaskTypeForm": {
        "type": "object",
        "properties": {
          "typeOfWorkId": {
            "type": "string",
            "description": "The id of the new task type.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "The model to delete a task type."
      },
      "DeleteTimeEntriesForm": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ids of the time entries, which should be deleted.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeletedEntityModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the deleted entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the deleted entity.",
            "nullable": true,
            "example": "Website Design"
          },
          "deletedOn": {
            "type": "string",
            "description": "The date the entity has been deleted.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentContentForm": {
        "required": [
          "content"
        ],
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The content of the document.",
            "format": "binary"
          }
        },
        "additionalProperties": false
      },
      "DocumentContributorModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the contributor.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user this contributor references.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "accessLevel": {
            "type": "string",
            "description": "Determines the level of access granted to this contributor with respect to the specific entity.\r\nCan be either set to `read` or `manage`.",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the user.",
            "nullable": true,
            "example": "Lisa"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user.",
            "nullable": true,
            "example": "Smith"
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the user has an image.",
            "nullable": true,
            "example": true
          },
          "isDeactivated": {
            "type": "boolean",
            "description": "Whether the user is deactivated.",
            "example": false
          },
          "documentId": {
            "type": "string",
            "description": "The id of the referenced document.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "inheritedFromDocumentContributorId": {
            "type": "string",
            "description": "The id of the contributor the permission has been inherited from.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "inheritedDocumentContributor": {
            "$ref": "#/components/schemas/PermissionInheritedDocumentContributor"
          }
        },
        "additionalProperties": false
      },
      "DocumentForm": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The name of the document.",
            "nullable": true
          },
          "documentSpaceId": {
            "type": "string",
            "description": "The id of the document space.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "parentId": {
            "type": "string",
            "description": "The id of the document's parent document.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project this document references.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "taskId": {
            "type": "string",
            "description": "The id of the task this document references.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "emoji": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The emoji of the document.",
            "nullable": true
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether the document is private."
          },
          "order": {
            "type": "number",
            "description": "The order of the document in either the list of private docs,\r\nthe referenced document space or in the referenced project.",
            "format": "double",
            "nullable": true
          },
          "workspaceAccessLevel": {
            "maxLength": 25,
            "minLength": 0,
            "enum": [
              "none",
              "read",
              "manage"
            ],
            "type": "string",
            "description": "Determines the level of access to this document granted to all workspace users.\r\nCan be either null (inherited), `none`, `read`, or `manage`.",
            "nullable": true
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "Whether the document is hidden for connect users.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentMentionForm": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The id of the user this mention references.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "DocumentModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the document.",
            "nullable": true
          },
          "currentDocumentVersionId": {
            "type": "string",
            "description": "The id of the current document version.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "documentSpaceId": {
            "type": "string",
            "description": "The id of the document space.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "documentSpace": {
            "$ref": "#/components/schemas/PermissionDocumentSpace"
          },
          "parentId": {
            "type": "string",
            "description": "The id of the document's parent document.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project this document references.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "project": {
            "$ref": "#/components/schemas/PermissionProject"
          },
          "taskId": {
            "type": "string",
            "description": "The id of the task this document references.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "emoji": {
            "type": "string",
            "description": "The emoji of the document.",
            "nullable": true
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether the document is private."
          },
          "order": {
            "type": "number",
            "description": "The order of the document in either the list of private docs,\r\nthe referenced document space or in the referenced project.",
            "format": "double",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "Whether the document belongs to an external project."
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "Whether the document is hidden for connect users."
          },
          "contributors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentContributorModel"
            },
            "description": "The contributors of this document.",
            "nullable": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentToTeamModel"
            },
            "description": "The teams this document is connected to.",
            "nullable": true
          },
          "workspaceAccessLevel": {
            "type": "string",
            "description": "Determines the level of access to this document granted to all workspace users.\r\nCan be either not set (no access), `read`, or `manage`.",
            "nullable": true
          },
          "inheritedWorkspaceAccessFromDocumentId": {
            "type": "string",
            "description": "The id of the document the workspace access level permission has been inherited from.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "inheritedWorkspaceAccessFromDocument": {
            "$ref": "#/components/schemas/PermissionInheritedWorkspaceAccessFromDocument"
          },
          "movedToTrashOn": {
            "type": "string",
            "description": "The date the document has been moved to the trash",
            "format": "date-time",
            "nullable": true
          },
          "movedToTrashBy": {
            "type": "string",
            "description": "The id of the user that moved the document to the trash.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "rootDocumentCreatedBy": {
            "type": "string",
            "description": "The user id of the creator of the root document of this document's document tree.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "DocumentPostForm": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The name of the document.",
            "nullable": true
          },
          "documentSpaceId": {
            "type": "string",
            "description": "The id of the document space.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "parentId": {
            "type": "string",
            "description": "The id of the document's parent document.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project this document references.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "taskId": {
            "type": "string",
            "description": "The id of the task this document references.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "emoji": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The emoji of the document.",
            "nullable": true
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether the document is private."
          },
          "order": {
            "type": "number",
            "description": "The order of the document in either the list of private docs,\r\nthe referenced document space or in the referenced project.",
            "format": "double",
            "nullable": true
          },
          "workspaceAccessLevel": {
            "maxLength": 25,
            "minLength": 0,
            "enum": [
              "none",
              "read",
              "manage"
            ],
            "type": "string",
            "description": "Determines the level of access to this document granted to all workspace users.\r\nCan be either null (inherited), `none`, `read`, or `manage`.",
            "nullable": true
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "Whether the document is hidden for connect users.",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "The content of the document.",
            "format": "binary",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentSpaceForm": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The name of the document space.",
            "nullable": true
          },
          "emoji": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The emoji of the document space.",
            "nullable": true
          },
          "color": {
            "maxLength": 14,
            "minLength": 0,
            "type": "string",
            "description": "The color of the document space for display purposes in the app.\r\nCan be null when no color assigned.",
            "nullable": true,
            "example": "purple"
          },
          "order": {
            "type": "number",
            "description": "The order of the document space in the list of document spaces.",
            "format": "double",
            "nullable": true
          },
          "workspaceAccessLevel": {
            "maxLength": 25,
            "minLength": 0,
            "enum": [
              "none",
              "read",
              "manage"
            ],
            "type": "string",
            "description": "Determines the level of access to this document space granted to all workspace users.\r\nCan be either `none`, `read`, or `manage`.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentSpaceModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the document space.",
            "nullable": true
          },
          "emoji": {
            "type": "string",
            "description": "The emoji of the document space.",
            "nullable": true
          },
          "color": {
            "type": "string",
            "description": "The color of the document space for display purposes in the app.\r\nCan be null when no color assigned.",
            "nullable": true,
            "example": "purple"
          },
          "order": {
            "type": "number",
            "description": "The order of the document space in the list of document spaces.",
            "format": "double",
            "nullable": true
          },
          "workspaceAccessLevel": {
            "type": "string",
            "description": "Determines the level of access to this document space granted to all workspace users.\r\nCan be either not set (no access), `read`, or `manage`.",
            "nullable": true
          },
          "contributors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContributorModel"
            },
            "description": "The contributors of this document space.",
            "nullable": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityToTeamModel"
            },
            "description": "The teams this document space is connected to.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentToTeamModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the entity to team.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "teamId": {
            "type": "string",
            "description": "The id of the team this entity to team references.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "accessLevel": {
            "type": "string",
            "description": "Determines the level of access granted to this entity to team with respect to the specific entity.\r\nCan be either set to `read` or `manage`.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the team.",
            "nullable": true,
            "example": "Designers"
          },
          "icon": {
            "type": "string",
            "description": "The icon which is assigned to the team.",
            "nullable": true,
            "example": "paintbrush"
          },
          "color": {
            "type": "string",
            "description": "The color of the team.",
            "nullable": true,
            "example": "purple"
          },
          "documentId": {
            "type": "string",
            "description": "The id of the referenced document.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "inheritedFromDocumentToTeamId": {
            "type": "string",
            "description": "The id of the document to team the permission has been inherited from.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "inheritedDocumentToTeam": {
            "$ref": "#/components/schemas/PermissionInheritedDocumentToTeam"
          }
        },
        "additionalProperties": false
      },
      "DocumentVersionModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the document version.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "documentId": {
            "type": "string",
            "description": "The id of the referenced document.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this document version was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this document version.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this document version was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this document version.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "EntityTimeTrackingStats": {
        "type": "object",
        "properties": {
          "totalTrackedDuration": {
            "type": "integer",
            "description": "The total amount of time tracked on the entity.",
            "format": "int32"
          },
          "totalBillableDuration": {
            "type": "integer",
            "description": "The total amount of time tracked on the entity that is billable.",
            "format": "int32"
          },
          "totalBilledDuration": {
            "type": "integer",
            "description": "The total amount of time tracked on the entity that is billed.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Model to capture the time tracking statistics for an entity.\r\nIncludes the total tracked duration, total billable duration and total billed duration.\r\nThe total non-billable duration can be calculated by subtracting the total billable duration from the total tracked duration.\r\nThe total non-billed duration can be calculated by subtracting the total billed duration from the total billable duration."
      },
      "EntityToTeamForm": {
        "required": [
          "accessLevel"
        ],
        "type": "object",
        "properties": {
          "accessLevel": {
            "minLength": 1,
            "enum": [
              "read",
              "manage"
            ],
            "type": "string",
            "description": "Determines the level of access granted to this contributor with respect to the referenced entity.\r\nCan be either set to `read` or `manage`."
          }
        },
        "additionalProperties": false
      },
      "EntityToTeamModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the entity to team.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "teamId": {
            "type": "string",
            "description": "The id of the team this entity to team references.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "accessLevel": {
            "type": "string",
            "description": "Determines the level of access granted to this entity to team with respect to the specific entity.\r\nCan be either set to `read` or `manage`.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the team.",
            "nullable": true,
            "example": "Designers"
          },
          "icon": {
            "type": "string",
            "description": "The icon which is assigned to the team.",
            "nullable": true,
            "example": "paintbrush"
          },
          "color": {
            "type": "string",
            "description": "The color of the team.",
            "nullable": true,
            "example": "purple"
          }
        },
        "additionalProperties": false
      },
      "EntityToTeamPostForm": {
        "required": [
          "accessLevel",
          "teamId"
        ],
        "type": "object",
        "properties": {
          "accessLevel": {
            "minLength": 1,
            "enum": [
              "read",
              "manage"
            ],
            "type": "string",
            "description": "Determines the level of access granted to this contributor with respect to the referenced entity.\r\nCan be either set to `read` or `manage`."
          },
          "teamId": {
            "type": "string",
            "description": "The id of the team this entity to team references.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ErrorResponse": {
        "required": [
          "code",
          "description",
          "link"
        ],
        "type": "object",
        "properties": {
          "code": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "type": "string"
          },
          "link": {
            "minLength": 1,
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationErrorResponse"
            },
            "nullable": true
          },
          "traceId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExtendedProjectForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The name of the Project. Max allowed length: 1000 characters.",
            "example": "Website Design"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether this is a private project only visible to members and the creator.\r\nDefaults to false.\r\nCan only be changed from public to private if no times have been tracked on this project.\r\nCan always be made public.",
            "example": false
          },
          "description": {
            "maxLength": 25000,
            "minLength": 0,
            "type": "string",
            "description": "The project description. Max allowed length: 25000 characters.",
            "nullable": true,
            "example": "Sitemap, design, assets and implementation of the new online presence."
          },
          "startDate": {
            "type": "string",
            "description": "The start date of the project.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T00:00:00Z"
          },
          "dueDate": {
            "type": "string",
            "description": "The due date of the project.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-05-01T00:00:00Z"
          },
          "companyId": {
            "type": "string",
            "description": "The id of the company.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "timeBudget": {
            "type": "integer",
            "description": "The time budget the project has, in seconds.",
            "format": "int32",
            "nullable": true,
            "example": 576000
          },
          "isBillableByDefault": {
            "type": "boolean",
            "description": "Whether project times should be billable by default.",
            "nullable": true,
            "example": true
          },
          "projectTypeId": {
            "type": "string",
            "description": "The id of the project type of this project.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "color": {
            "maxLength": 14,
            "minLength": 0,
            "type": "string",
            "description": "The color of the project for display purposes in awork.\r\nThe supported colors are defined by the awork frontend.\r\nCan be null when no color assigned.",
            "nullable": true,
            "example": "purple"
          },
          "deductNonBillableHours": {
            "type": "boolean",
            "description": "Whether to deduct non-billable hours from project budgets."
          },
          "projectStatusId": {
            "type": "string",
            "description": "The id of the project status.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectTemplateId": {
            "type": "string",
            "description": "The id of the template which is used to create the project.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "publicProjectTemplateId": {
            "type": "string",
            "description": "The id of the public template which is used to create the project.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "referenceDateType": {
            "enum": [
              "today",
              "start",
              "end",
              "custom"
            ],
            "type": "string",
            "description": "(optional, default = TODAY) Defines the starting date from which the reference date is calculated.\r\nThe reference date is the date from which the Start/DueOn date of a task is calculated, based on the ReferenceDateAnchor.",
            "nullable": true
          },
          "referenceDateAnchor": {
            "enum": [
              "starts_on_reference_date",
              "ends_on_reference_date"
            ],
            "type": "string",
            "description": "(optional, default = START) Defines what the reference date represents for the schedule (start of first task or end of last task).",
            "nullable": true
          },
          "customReferenceDate": {
            "type": "string",
            "description": "(optional) The custom reference date when ReferenceDateType is set to 'custom'.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExtendedProjectStatusModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "isArchived": {
            "type": "boolean"
          },
          "typeOrder": {
            "type": "integer",
            "description": "The order of the status type.",
            "format": "int32",
            "example": 1
          },
          "isExternal": {
            "type": "boolean",
            "description": "True if this entity is coming from an external workspace (awork Connect).",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ExtendedUser": {
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The firstname of the user.",
            "nullable": true,
            "example": "Carla"
          },
          "lastName": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The lastname of the user.",
            "nullable": true,
            "example": "Creative"
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the user.",
            "format": "date-time",
            "nullable": true,
            "example": "1998-04-19T00:00:000Z"
          },
          "gender": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The gender of the user.",
            "nullable": true,
            "example": "female"
          },
          "title": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The title of the user.",
            "nullable": true,
            "example": "Miss"
          },
          "position": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The position of the user.",
            "nullable": true
          },
          "language": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The language preference of the user in ISO 639-1 format.",
            "nullable": true,
            "example": "en-GB"
          },
          "id": {
            "type": "string",
            "description": "The id of the user.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this user was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this user.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date when this user was last updated.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isArchived": {
            "type": "boolean",
            "description": "Whether this user is archived.\r\nArchived users are automatically inactive and only exist for reference purposes.",
            "example": false
          },
          "isDeactivated": {
            "type": "boolean",
            "description": "Whether the user has been deactivated.",
            "example": false
          },
          "deactivatedOn": {
            "type": "string",
            "description": "The date the user was deactivated.",
            "format": "date-time",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the user has uploaded a profile image.",
            "example": true
          },
          "shouldMigrateToConnect": {
            "type": "boolean",
            "description": "Whether the user should be migrated to Connect."
          },
          "userContactInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactInfo"
            },
            "description": "The contact information assigned to this user.",
            "nullable": true
          },
          "resourceVersion": {
            "type": "integer",
            "description": "The version of the entity, updated on every modification, to the ticks in UTC.\r\nNot identical to UpdatedOn.",
            "format": "int64",
            "readOnly": true,
            "example": 637825154598057900
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTagModel"
            },
            "description": "The tags of this user.",
            "nullable": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamModel"
            },
            "description": "The teams the user is associated to.",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "True if this entity is coming from an external workspace (awork Connect).",
            "example": true
          },
          "accountId": {
            "type": "string",
            "description": "The account id of the user.\r\nOnly used internally.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "The extended user model."
      },
      "ExternalTypeOfWork": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the task type.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the task type.",
            "nullable": true,
            "example": "Sales Work"
          },
          "description": {
            "type": "string",
            "description": "A short (max. 140 characters) description of the task type.",
            "nullable": true,
            "example": "Tasks related to sales dept."
          },
          "icon": {
            "type": "string",
            "description": "The icon associated with this task type.",
            "nullable": true,
            "example": "attach_money"
          },
          "isArchived": {
            "type": "boolean",
            "description": "Whether the type of work has been archived."
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time",
            "example": "2022-03-10T16:25:09.100Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time",
            "example": "2022-03-10T18:55:00.500Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "externalProjectIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ids of the connected (external) projects that have this type of work.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A Type of work enriched with the list of external project ids in which this TypeOfWork exists."
      },
      "GeneralTaskForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The name of the task. Max allowed length: 1000 characters.",
            "example": "Create logo concept"
          },
          "description": {
            "maxLength": 25000,
            "minLength": 0,
            "type": "string",
            "description": "The description of the task. Max allowed length: 25000 characters.",
            "nullable": true,
            "example": "We need to create a new impactful concept for the customer logo"
          },
          "isPrio": {
            "type": "boolean",
            "description": "Whether this task is marked as priority.",
            "nullable": true,
            "example": true
          },
          "startOn": {
            "type": "string",
            "description": "The expected start date and time of the task.",
            "format": "date-time",
            "nullable": true,
            "example": "2023-03-03T17:00:00Z"
          },
          "dueOn": {
            "type": "string",
            "description": "The expected due date and time of the task.",
            "format": "date-time",
            "nullable": true,
            "example": "2023-03-18T17:00:00Z"
          },
          "laneOrder": {
            "type": "integer",
            "description": "The lane order defines the vertical position in the task board.",
            "format": "int32",
            "nullable": true
          },
          "plannedDuration": {
            "type": "integer",
            "description": "The expected planned workload of the task, in seconds.",
            "format": "int32",
            "nullable": true,
            "example": 21600
          }
        },
        "additionalProperties": false
      },
      "GeneralTaskPostForm": {
        "required": [
          "baseType",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The name of the task. Max allowed length: 1000 characters.",
            "example": "Create logo concept"
          },
          "description": {
            "maxLength": 25000,
            "minLength": 0,
            "type": "string",
            "description": "The description of the task. Max allowed length: 25000 characters.",
            "nullable": true,
            "example": "We need to create a new impactful concept for the customer logo"
          },
          "isPrio": {
            "type": "boolean",
            "description": "Whether this task is marked as priority.",
            "nullable": true,
            "example": true
          },
          "startOn": {
            "type": "string",
            "description": "The expected start date and time of the task.",
            "format": "date-time",
            "nullable": true,
            "example": "2023-03-03T17:00:00Z"
          },
          "dueOn": {
            "type": "string",
            "description": "The expected due date and time of the task.",
            "format": "date-time",
            "nullable": true,
            "example": "2023-03-18T17:00:00Z"
          },
          "laneOrder": {
            "type": "integer",
            "description": "The lane order defines the vertical position in the task board.",
            "format": "int32",
            "nullable": true
          },
          "plannedDuration": {
            "type": "integer",
            "description": "The expected planned workload of the task, in seconds.",
            "format": "int32",
            "nullable": true,
            "example": 21600
          },
          "typeOfWorkId": {
            "type": "string",
            "description": "The id of the type of work for this task.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "taskStatusId": {
            "type": "string",
            "description": "The id of the status for this task.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "order": {
            "type": "number",
            "description": "The order of the task in a task status column.",
            "format": "double",
            "nullable": true,
            "example": 3
          },
          "subtaskOrder": {
            "type": "number",
            "description": "The order of the subtask relative to its parent task.",
            "format": "double",
            "nullable": true,
            "example": 1
          },
          "entityId": {
            "type": "string",
            "description": "The id of the entity the task is related to.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "baseType": {
            "minLength": 1,
            "enum": [
              "private",
              "projecttask"
            ],
            "type": "string",
            "description": "The base type of the task. Can be 'private' for a private task or 'projecttask' for a project task.",
            "example": "projecttask"
          },
          "parentId": {
            "type": "string",
            "description": "The id of the parent task. Setting this value means this is a subtask.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "lists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListAssignment"
            },
            "description": "The list(s) the new task should be added to.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetNextOccurrenceForm": {
        "required": [
          "recurrencyRule"
        ],
        "type": "object",
        "properties": {
          "recurrencyRule": {
            "minLength": 1,
            "type": "string",
            "description": "The recurrence rule as cron expression. We support all expressions which cronos supports\r\n(https://github.com/HangfireIO/Cronos).\r\nThe number of occurrences is limited to 24 a day.",
            "example": "\"0 0 1 * * ?\""
          },
          "recurrencyInterval": {
            "type": "integer",
            "description": "The interval of the executed expression. If the value is 3, only the third time of the expression the recurrence is\r\nactually executed.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "relativeDueOn": {
            "type": "integer",
            "description": "The relative due date and time of the task created from this recurrence rule, in seconds,\r\nfrom the moment of creating the task by a recurrence rule.",
            "format": "int64",
            "nullable": true,
            "example": 3600
          },
          "recurrencyStartOn": {
            "type": "string",
            "description": "DateTime when recurring task creation will start, considering the set Recurrency Rule and Recurrency Interval.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-03-12T11:00:00Z"
          },
          "recurrencyTimezone": {
            "type": "string",
            "description": "The timezone of the Recurrency Rule. If not set, will use the requesting user's timezone.",
            "nullable": true,
            "example": "Europe/Berlin"
          }
        },
        "additionalProperties": false
      },
      "GetSubtasksDatesResult": {
        "type": "object",
        "properties": {
          "earliestStartOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "latestDueOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetTimeBookingForUsersResult": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The user id to which the time bookings belong.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "timeBookings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeBooking"
            },
            "description": "The list of time bookings of the user.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetUsersAvailabilityResult": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The id of the user.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "totalCapacity": {
            "type": "integer",
            "description": "The total capacity of the user (expressed in seconds) in the provided timeframe.",
            "format": "int32"
          },
          "usedCapacity": {
            "type": "integer",
            "description": "The used capacity of the user (expressed in seconds) in the provided timeframe.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GetWorkloadForUsersResult": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workloads": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkloadModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IDefaultNameModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IErrorResponse": {
        "required": [
          "code",
          "description",
          "link"
        ],
        "type": "object",
        "properties": {
          "code": {
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "type": "string"
          },
          "link": {
            "minLength": 1,
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationErrorResponse"
            },
            "nullable": true
          },
          "traceId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ImportDefaultModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ImportStatusModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ImportTaskBundleForm": {
        "required": [
          "sourceTaskBundleIds",
          "targetTaskBundleId"
        ],
        "type": "object",
        "properties": {
          "sourceTaskBundleIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The list of task bundle ids to import into the target task bundle."
          },
          "targetTaskBundleId": {
            "type": "string",
            "description": "The task bundle to import the other task bundles into.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "InviteData": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "The id of the project that will be connected.",
            "nullable": true
          },
          "homeProjectName": {
            "type": "string",
            "description": "The name of the project that will be connected.",
            "nullable": true
          },
          "homeWorkspaceId": {
            "type": "string",
            "description": "The id of the workspace where the project is.",
            "nullable": true
          },
          "homeWorkspacePublicImageToken": {
            "type": "string",
            "description": "The token that can be used to request the home workspace's public image.",
            "nullable": true
          },
          "homeWorkspaceName": {
            "type": "string",
            "description": "The name of the workspace where the project is.",
            "nullable": true
          },
          "homeUserFullName": {
            "type": "string",
            "description": "The full name of the user that is sharing the project.",
            "nullable": true
          },
          "homeUserPublicImageToken": {
            "type": "string",
            "description": "The token that can be used to request the inviter user's public image.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LinkCustomFieldDefinitionForm": {
        "required": [
          "customFieldDefinitionId",
          "order"
        ],
        "type": "object",
        "properties": {
          "customFieldDefinitionId": {
            "type": "string",
            "description": "The id of the custom field definition.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "order": {
            "type": "number",
            "description": "The order of the custom field definition.",
            "format": "double",
            "example": 1
          }
        },
        "additionalProperties": false,
        "description": "Represents a form for linking a custom field definition."
      },
      "ListAssignment": {
        "required": [
          "id",
          "order"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the list, the task should be assigned to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "order": {
            "type": "number",
            "description": "The order of the task in the list.",
            "format": "double",
            "example": 3
          }
        },
        "additionalProperties": false
      },
      "LiveEditingUpdateRequest": {
        "required": [
          "content"
        ],
        "type": "object",
        "properties": {
          "content": {
            "minLength": 1,
            "type": "string",
            "description": "The content to update. For tasks and projects, this is the description. For documents, this is the content."
          }
        },
        "additionalProperties": false
      },
      "Mentions": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectedUserModel"
            },
            "description": "All users which have been mentioned in the comment.",
            "nullable": true
          },
          "everyUserHadPermissions": {
            "type": "boolean",
            "description": "If every user was able to receive the mention notification. If not, one of the users had no permissions to.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "A mention is the tag of a user on a specific comment, so the user is notified."
      },
      "MigrateGuestForm": {
        "type": "object",
        "properties": {
          "targetWorkspaceId": {
            "type": "string",
            "description": "The workspace id to migrate the guest to.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "MinimalChecklistProjectMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "MinimalChecklistProjectWithMembers": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "The start date of the project.",
            "format": "date-time",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "description": "The due date of the project.",
            "format": "date-time",
            "nullable": true
          },
          "color": {
            "type": "string",
            "description": "The color of the project for display purposes in awork.\r\nCan be null when no color assigned.",
            "nullable": true,
            "example": "purple"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "True if the project is private."
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the project has an image."
          },
          "projectStatus": {
            "$ref": "#/components/schemas/DefaultStatusModel"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MinimalChecklistProjectMember"
            },
            "description": "The members of the project.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MinimalChecklistUser": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "The firstname of the user.",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "The lastname of the user.",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the user has an image."
          }
        },
        "additionalProperties": false
      },
      "MinimalContributorModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the contributor.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user this contributor references.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "accessLevel": {
            "type": "string",
            "description": "Determines the level of access granted to this contributor with respect to the specific entity.\r\nCan be either set to `read` or `manage`.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MinimalEntityToTeamModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the entity to team.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "teamId": {
            "type": "string",
            "description": "The id of the team this entity to team references.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "accessLevel": {
            "type": "string",
            "description": "Determines the level of access granted to this entity to team with respect to the specific entity.\r\nCan be either set to `read` or `manage`.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MinimalPublicHoliday": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "The date of the public holiday.",
            "format": "date-time",
            "example": "2024-12-25T00:00:00Z"
          },
          "name": {
            "type": "string",
            "description": "The english name of the public holiday.",
            "nullable": true,
            "example": "Christmas Day"
          },
          "localName": {
            "type": "string",
            "description": "The local (native) name of the public holiday.",
            "nullable": true,
            "example": "Erster Weihnachtstag"
          }
        },
        "additionalProperties": false
      },
      "MinimalUserWithAbsenceRegionId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean",
            "nullable": true
          },
          "isDeactivated": {
            "type": "boolean"
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean"
          },
          "absenceRegionId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "MoveUserInRole": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The id of the user to be moved to another role.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "toRoleId": {
            "type": "string",
            "description": "The id of the role the user should be moved to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "MultiStatusResult": {
        "type": "object",
        "properties": {
          "ok": {
            "$ref": "#/components/schemas/StatusResult"
          },
          "notFound": {
            "$ref": "#/components/schemas/StatusResult"
          },
          "unauthorized": {
            "$ref": "#/components/schemas/StatusResult"
          },
          "badRequest": {
            "$ref": "#/components/schemas/StatusResult"
          }
        },
        "additionalProperties": false
      },
      "NestedBaseTypeModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NestedCompanyModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NestedCompanyModelForProjects": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the company has a profile image.",
            "example": true
          },
          "description": {
            "type": "string",
            "description": "The description of the company.",
            "nullable": true,
            "example": "A brand strategy and design agency"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultTagModel"
            },
            "description": "The tags of the company.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NestedCompanyModelForTasks": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the company has a profile image.",
            "example": true
          },
          "description": {
            "type": "string",
            "description": "The description of the company.",
            "nullable": true,
            "example": "NCNSTN Brand Design Company"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyTagModel"
            },
            "description": "The Tags of the company.",
            "nullable": true,
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "NestedDocumentEventModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "rootDocumentCreatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "documentSpaceId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "documentSpace": {
            "$ref": "#/components/schemas/PermissionDocumentSpace"
          },
          "projectId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "project": {
            "$ref": "#/components/schemas/NestedProjectEventModel"
          },
          "isPrivate": {
            "type": "boolean"
          },
          "isExternal": {
            "type": "boolean"
          },
          "isHiddenForConnectUsers": {
            "type": "boolean"
          },
          "workspaceAccessLevel": {
            "type": "string",
            "nullable": true
          },
          "contributors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionDocumentContributor"
            },
            "nullable": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionDocumentToTeam"
            },
            "nullable": true
          },
          "inheritedWorkspaceAccessFromDocumentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "inheritedWorkspaceAccessFromDocument": {
            "$ref": "#/components/schemas/PermissionInheritedWorkspaceAccessFromDocument"
          }
        },
        "additionalProperties": false
      },
      "NestedModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NestedParentTaskModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user of the private task. Null for project tasks.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "assigneeIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of assignee user ids of this task.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NestedProjectEventModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionTeam"
            },
            "nullable": true
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionProjectMember"
            },
            "nullable": true
          },
          "isPrivate": {
            "type": "boolean"
          },
          "isExternal": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NestedProjectModelForTasks": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "projectStatus": {
            "$ref": "#/components/schemas/NestedStatusModel"
          },
          "company": {
            "$ref": "#/components/schemas/NestedCompanyModelForTasks"
          },
          "companyId": {
            "type": "string",
            "description": "The companyId of the project.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectType": {
            "$ref": "#/components/schemas/NestedTypeModel"
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the project has an image.",
            "example": true
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether the project is private."
          },
          "isBillableByDefault": {
            "type": "boolean",
            "description": "Whether the project is billable by default.",
            "nullable": true
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectMemberModel"
            },
            "description": "The list of all members of the project.",
            "nullable": true
          },
          "color": {
            "type": "string",
            "description": "The color of the project for display purposes in awork.\r\nCan be null when no color assigned.",
            "nullable": true,
            "example": "purple"
          },
          "createdBy": {
            "type": "string",
            "description": "The created by of the project.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectTagModel"
            },
            "description": "The Tags of the Project.",
            "nullable": true,
            "deprecated": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NestedTeamModel"
            },
            "description": "The ids of the team the project is associated to.",
            "nullable": true
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectCustomField"
            },
            "description": "Custom fields of the project.",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "True if the model is coming from an external workspace (awork Connect).\r\nFalse otherwise."
          }
        },
        "additionalProperties": false
      },
      "NestedStatusModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "isArchived": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "NestedTaskEventModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "baseType": {
            "type": "string",
            "nullable": true
          },
          "project": {
            "$ref": "#/components/schemas/NestedProjectEventModel"
          },
          "parentTask": {
            "$ref": "#/components/schemas/PermissionParentTask"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionAssignee"
            },
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isExternal": {
            "type": "boolean"
          },
          "isHiddenForConnectUsers": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "NestedTaskStatusModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NestedTaskTypeModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "isArchived": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "NestedTeamModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "NestedTypeModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "isArchived": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "NestedUserModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NestedUserModelForTasks": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean",
            "nullable": true
          },
          "plannedEffort": {
            "type": "integer",
            "description": "The planned effort of the user assigned to the task, in seconds.",
            "format": "int32"
          },
          "isDistributedPlannedEffort": {
            "type": "boolean",
            "description": "If the PlannedEffort was calculated as distributed effort."
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this task assignee was last modified.",
            "format": "date-time",
            "example": "2020-02-30T18:52:54.945Z"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTagModel"
            },
            "description": "The Tags of the User.",
            "nullable": true,
            "deprecated": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NestedUserTeamModel"
            },
            "description": "The ids of the team the user is associated to.",
            "nullable": true,
            "deprecated": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "True if the model is coming from an external workspace (awork Connect).\r\nFalse otherwise."
          }
        },
        "additionalProperties": false
      },
      "NestedUserTeamModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "This repeated model (copy of NestedTeamModel) is required to avoid a bug\r\nof the Automapper.Extensions.EspressionMapping library that throws an error if in the same expression\r\nwe apply a filter to 2 different models containing the same submodel (e.g: Teams contained in both Project, User and\r\nTasks))\r\nPlease do not remove it."
      },
      "ObjectSyncResponse": {
        "type": "object",
        "properties": {
          "updated": {
            "type": "array",
            "items": {},
            "nullable": true
          },
          "deleted": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PermissionAssignee": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "PermissionContributor": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "accessLevel": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PermissionDocumentContributor": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "inheritedFromDocumentContributorId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "inheritedDocumentContributor": {
            "$ref": "#/components/schemas/PermissionInheritedDocumentContributor"
          },
          "accessLevel": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PermissionDocumentSpace": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspaceAccessLevel": {
            "type": "string",
            "nullable": true
          },
          "contributors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionContributor"
            },
            "nullable": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionEntityToTeam"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PermissionDocumentToTeam": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "teamId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "inheritedFromDocumentToTeamId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "inheritedDocumentToTeam": {
            "$ref": "#/components/schemas/PermissionInheritedDocumentToTeam"
          },
          "accessLevel": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PermissionEntityToTeam": {
        "type": "object",
        "properties": {
          "teamId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "accessLevel": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PermissionFullModel": {
        "type": "object",
        "properties": {
          "feature": {
            "type": "string",
            "description": "The identifying key of the feature.",
            "nullable": true,
            "example": "pmd"
          },
          "accessLevels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of access levels assigned to the feature.",
            "nullable": true,
            "example": [
              "read"
            ]
          }
        },
        "additionalProperties": false
      },
      "PermissionInheritedDocumentContributor": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "accessLevel": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PermissionInheritedDocumentToTeam": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "accessLevel": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PermissionInheritedWorkspaceAccessFromDocument": {
        "type": "object",
        "properties": {
          "workspaceAccessLevel": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PermissionOfGlobalRole": {
        "type": "object",
        "properties": {
          "feature": {
            "type": "string",
            "description": "The feature these permissions belong to.",
            "nullable": true,
            "example": "pmd"
          },
          "accessLevels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The access levels applied to this feature.",
            "nullable": true,
            "example": [
              "read"
            ]
          },
          "id": {
            "type": "string",
            "description": "The id of the permission.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time"
          },
          "subdomains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The workspace's subdomains. Read-only.",
            "nullable": true,
            "example": [
              "ncnstn"
            ]
          },
          "identityIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ids of identities assigned to this workspace. Read-only.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PermissionOfProjectRole": {
        "type": "object",
        "properties": {
          "feature": {
            "type": "string",
            "description": "The feature these permissions belong to.",
            "nullable": true,
            "example": "pmd"
          },
          "accessLevels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The access levels applied to this feature.",
            "nullable": true,
            "example": [
              "read"
            ]
          },
          "id": {
            "type": "string",
            "description": "The id of the permission.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PermissionOfRoleForm": {
        "type": "object",
        "properties": {
          "feature": {
            "type": "string",
            "description": "The feature these permissions belong to.",
            "nullable": true,
            "example": "pmd"
          },
          "accessLevels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The access levels applied to this feature.",
            "nullable": true,
            "example": [
              "read"
            ]
          }
        },
        "additionalProperties": false
      },
      "PermissionParentTask": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "assigneeIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PermissionProject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionTeam"
            },
            "nullable": true
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionProjectMember"
            },
            "nullable": true
          },
          "isPrivate": {
            "type": "boolean"
          },
          "isExternal": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PermissionProjectMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectRoleId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "PermissionTeam": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlannedDurationModel": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "The id of the project",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "durationSum": {
            "type": "integer",
            "description": "The sum of the duration (in seconds)",
            "format": "int64",
            "example": 144000
          }
        },
        "additionalProperties": false
      },
      "PlannedEffortForm": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The id of the user that is assigned to the task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "plannedEffort": {
            "type": "integer",
            "description": "The planned effort of the user assigned to the task, in seconds.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlannerAnalyzerOptionalParameters": {
        "type": "object",
        "properties": {
          "userFilter": {
            "type": "string",
            "nullable": true
          },
          "projectFilter": {
            "type": "string",
            "nullable": true
          },
          "taskFilterIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlannerChecklist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the checklist.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user that the checklist belongs to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "timeRangeInDays": {
            "type": "integer",
            "description": "The time range in days that the checklist is for.",
            "format": "int32"
          },
          "fromDate": {
            "type": "string",
            "description": "The day that the checklist analysis starts from.",
            "format": "date"
          },
          "toDate": {
            "type": "string",
            "description": "The day that the checklist analysis ends on.",
            "format": "date"
          },
          "parameters": {
            "$ref": "#/components/schemas/PlannerAnalyzerOptionalParameters"
          },
          "checklistItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlannerChecklistItem"
            },
            "description": "The list of items for the checklist.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlannerChecklistItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the checklist item.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "plannerChecklistId": {
            "type": "string",
            "description": "The id of the checklist that the item belongs to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "type": {
            "type": "string",
            "description": "The type of the checklist item.\r\nIt depends on the analyzer that created the item.\r\nE.g. \"upcoming-project-deadlines-milestones\", \"upcoming-tasks-deadlines\", etc.",
            "nullable": true
          },
          "isChecked": {
            "type": "boolean",
            "description": "Whether the item is checked or not."
          },
          "values": {
            "type": "string",
            "description": "This represents the json serialized values of the item.\r\nThe specific properties of the values depend on the type of the item.",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "(optional) The id of the user this checklistItem refers to.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "user": {
            "$ref": "#/components/schemas/MinimalChecklistUser"
          },
          "projectId": {
            "type": "string",
            "description": "(optional) The id of the project this checklistItem refers to.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "project": {
            "$ref": "#/components/schemas/MinimalChecklistProjectWithMembers"
          },
          "taskViewId": {
            "type": "string",
            "description": "(optional) The id of the task view this checklistItem refers to.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "PlannerProjectMemberModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectRoleId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the user.",
            "nullable": true,
            "example": "Lisa"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user.",
            "nullable": true,
            "example": "Smith"
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the user has an image.",
            "nullable": true,
            "example": true
          }
        },
        "additionalProperties": false
      },
      "PlanningSession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user the planning session is for.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "planningSessionType": {
            "type": "string",
            "description": "The type of planning session. Can be 'private' or 'team'.",
            "nullable": true
          },
          "forecastFrom": {
            "type": "integer",
            "description": "The number of days from which the more coarse forecast starts.",
            "format": "int32",
            "example": 7
          },
          "usersToPlan": {
            "$ref": "#/components/schemas/UsersToPlan"
          },
          "tasksToPlan": {
            "$ref": "#/components/schemas/TasksToPlan"
          },
          "projectsToPlan": {
            "$ref": "#/components/schemas/ProjectsToPlan"
          }
        },
        "additionalProperties": false
      },
      "PlanningSessionForm": {
        "type": "object",
        "properties": {
          "forecastFrom": {
            "type": "integer",
            "description": "The number of days from which the more coarse forecast starts.",
            "format": "int32",
            "example": 7
          },
          "usersToPlan": {
            "$ref": "#/components/schemas/UsersToPlanForm"
          },
          "tasksToPlan": {
            "$ref": "#/components/schemas/TasksToPlanForm"
          },
          "projectsToPlan": {
            "$ref": "#/components/schemas/ProjectsToPlanForm"
          }
        },
        "additionalProperties": false
      },
      "PostPlannerChecklistParameters": {
        "required": [
          "timeRangeInDays"
        ],
        "type": "object",
        "properties": {
          "timeRangeInDays": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "The number of days that we will consider (from today) for the planner analysis.\r\nAt least 1 day is required.",
            "format": "int32"
          },
          "projectFilter": {
            "type": "string",
            "description": "(optional) The query filter for the project. The checklist will take into account only results relevant to those projects.",
            "nullable": true
          },
          "userFilter": {
            "type": "string",
            "description": "(optional) The query filter for the user. The checklist will take into account only results relevant to those users.",
            "nullable": true
          },
          "taskFilterIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "(optional) Create, for each task filter, a checklist item.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Project": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The name of the Project. Max allowed length: 1000 characters.",
            "example": "Website Design"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether this is a private project only visible to members and the creator.\r\nDefaults to false.\r\nCan only be changed from public to private if no times have been tracked on this project.\r\nCan always be made public.",
            "example": false
          },
          "description": {
            "maxLength": 25000,
            "minLength": 0,
            "type": "string",
            "description": "The project description. Max allowed length: 25000 characters.",
            "nullable": true,
            "example": "Sitemap, design, assets and implementation of the new online presence."
          },
          "startDate": {
            "type": "string",
            "description": "The start date of the project.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T00:00:00Z"
          },
          "dueDate": {
            "type": "string",
            "description": "The due date of the project.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-05-01T00:00:00Z"
          },
          "companyId": {
            "type": "string",
            "description": "The id of the company.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "timeBudget": {
            "type": "integer",
            "description": "The time budget the project has, in seconds.",
            "format": "int32",
            "nullable": true,
            "example": 576000
          },
          "isBillableByDefault": {
            "type": "boolean",
            "description": "Whether project times should be billable by default.",
            "nullable": true,
            "example": true
          },
          "projectTypeId": {
            "type": "string",
            "description": "The id of the project type of this project.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "color": {
            "maxLength": 14,
            "minLength": 0,
            "type": "string",
            "description": "The color of the project for display purposes in awork.\r\nThe supported colors are defined by the awork frontend.\r\nCan be null when no color assigned.",
            "nullable": true,
            "example": "purple"
          },
          "deductNonBillableHours": {
            "type": "boolean",
            "description": "Whether to deduct non-billable hours from project budgets."
          },
          "projectStatusId": {
            "type": "string",
            "description": "The id of the project status.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectTemplateId": {
            "type": "string",
            "description": "The id of the template which is used to create the project.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "publicProjectTemplateId": {
            "type": "string",
            "description": "The id of the public template which is used to create the project.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "id": {
            "type": "string",
            "description": "Id of the project.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the project has an image.",
            "example": true
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "closedOn": {
            "type": "string",
            "description": "The date the project was set to closed.",
            "format": "date-time",
            "nullable": true,
            "example": null
          },
          "closedBy": {
            "type": "string",
            "description": "The user who closed the project.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdByProjectTemplateId": {
            "type": "string",
            "description": "The id of the template the project was created from.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectType": {
            "$ref": "#/components/schemas/NestedTypeModel"
          },
          "projectStatus": {
            "$ref": "#/components/schemas/ExtendedProjectStatusModel"
          },
          "company": {
            "$ref": "#/components/schemas/NestedCompanyModelForProjects"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectTagModel"
            },
            "description": "The tags for this project.",
            "nullable": true
          },
          "plannedDuration": {
            "type": "integer",
            "description": "The total planned time of the project, in seconds.\r\nThe time is calculated as te sum of the planned duration by all project tasks.",
            "format": "int64",
            "nullable": true,
            "example": 432000,
            "deprecated": true
          },
          "totalPlannedDurationWithHierarchy": {
            "type": "integer",
            "description": "The total planned duration of the project with hierarchy, in seconds.\r\nCalculated based on the planned durations of tasks and task lists of the project.\r\nSum of Sum(TotalPlannedDurationWithHierarchy of all task lists) and\r\nSum(TotalPlannedDurationWithHierarchy of all parent tasks without list)",
            "format": "int64",
            "nullable": true,
            "example": 432000
          },
          "tasksCount": {
            "type": "integer",
            "description": "The number of all tasks related to the project.",
            "format": "int32",
            "nullable": true,
            "example": 12
          },
          "tasksDoneCount": {
            "type": "integer",
            "description": "The number of all tasks in status 'done' related to the project.",
            "format": "int32",
            "nullable": true,
            "example": 3
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectMember"
            },
            "description": "The members of this project.",
            "nullable": true
          },
          "trackedDuration": {
            "type": "integer",
            "description": "The summed up duration of all time trackings for this project.",
            "format": "int32",
            "nullable": true,
            "example": 72000
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            },
            "description": "Custom fields of the project.",
            "nullable": true
          },
          "resourceVersion": {
            "type": "integer",
            "description": "The version of the entity, updated on every modification, to the ticks in UTC.\r\nNot identical to UpdatedOn.",
            "format": "int64",
            "readOnly": true,
            "example": 637825154598057900
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamModel"
            },
            "description": "The teams the project is associated to.",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "True if this entity is coming from an external workspace (awork Connect).",
            "example": true
          },
          "isRetainer": {
            "type": "boolean",
            "description": "Whether the project is a retainer project.\r\nRetainer projects have at least one retainer with budgets."
          }
        },
        "additionalProperties": false,
        "description": "/// This class contains all information to handle projects."
      },
      "ProjectConnection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the project connection.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "inviteCode": {
            "type": "string",
            "description": "The invite code that can be used to accept the project connection.",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project that is connected.",
            "nullable": true
          },
          "projectRoleId": {
            "type": "string",
            "description": "The id of the project role of the invited user.",
            "nullable": true
          },
          "isAccepted": {
            "type": "boolean",
            "description": "True if the invitation to the project is accepted."
          },
          "externalWorkspaceId": {
            "type": "string",
            "description": "The id of the workspace of the external user.\r\nIt will be null until the invitation is accepted.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "externalUserId": {
            "type": "string",
            "description": "The id of the external user.\r\nIt will be null until the invitation is accepted.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "externalUserEmail": {
            "type": "string",
            "description": "The email of the user that will be connected to the project.\r\nThis email will be used to send the invitation.",
            "nullable": true
          },
          "externalUserFullName": {
            "type": "string",
            "description": "The full name of the user that will be connected to the project.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProjectConnectionForm": {
        "required": [
          "externalUserEmail",
          "projectId",
          "projectRoleId"
        ],
        "type": "object",
        "properties": {
          "externalUserEmail": {
            "minLength": 1,
            "type": "string",
            "description": "The email of the user that the project will be connected to."
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project that will be connected.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectRoleId": {
            "type": "string",
            "description": "The role of the invited user in the project.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ProjectConnectionStatus": {
        "type": "object",
        "properties": {
          "isConnected": {
            "type": "boolean",
            "description": "True if the workspace is connected to the project. False otherwise."
          },
          "isReadOnly": {
            "type": "boolean",
            "description": "If the workspace is connected to the project, this value indicates if the connection is read-only.\r\nA connection is read-only if the subscription of the home workspace is expired.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProjectCustomField": {
        "type": "object",
        "properties": {
          "customFieldDefinitionId": {
            "type": "string",
            "description": "The custom field definition id.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userIdValue": {
            "type": "string",
            "description": "The the user id value.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "numberValue": {
            "type": "number",
            "description": "The number value.",
            "format": "double",
            "nullable": true,
            "example": 123.45
          },
          "selectionOptionIdValue": {
            "type": "string",
            "description": "The selection option id value.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "selectionOption": {
            "$ref": "#/components/schemas/CustomFieldSelectionOption"
          },
          "textValue": {
            "type": "string",
            "description": "The text value.",
            "nullable": true,
            "example": "S1: Business Critical"
          },
          "dateValue": {
            "type": "string",
            "description": "The date value.",
            "format": "date-time",
            "nullable": true
          },
          "booleanValue": {
            "type": "boolean",
            "description": "The boolean value.",
            "nullable": true,
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the custom field value."
      },
      "ProjectDeleteForm": {
        "type": "object",
        "properties": {
          "deleteTimeTrackings": {
            "type": "boolean",
            "description": "Set to true to delete also the related time trackings.\r\nIf it is set to false the related time trackings are still there, but\r\nthe project and task reference will be cleared.\r\nThat will also happen if no request body is present.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ProjectFormForTasks": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "projectTypeId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectStatusId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ProjectInTeam": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "The id of the project.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "teamId": {
            "type": "string",
            "description": "The id of the team.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "The user in team model assigns accounts to teams."
      },
      "ProjectMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the project member entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user who is this project member.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the user.",
            "nullable": true,
            "example": "Lisa"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user.",
            "nullable": true,
            "example": "Smith"
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the user has an image.",
            "nullable": true,
            "example": true
          },
          "projectRoleId": {
            "type": "string",
            "description": "The project role of the project member.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectRoleName": {
            "type": "string",
            "description": "The project role name of the project member.",
            "nullable": true,
            "example": "Project Manager"
          },
          "isResponsible": {
            "type": "boolean",
            "description": "Whether the user is responsible for this project.",
            "example": true
          },
          "isDeactivated": {
            "type": "boolean",
            "description": "Whether the user is deactivated.",
            "example": false
          },
          "isExternal": {
            "type": "boolean",
            "description": "True if this entity is coming from an external workspace (awork Connect).",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ProjectMemberForm": {
        "required": [
          "projectRoleId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The id of the member.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectRoleId": {
            "type": "string",
            "description": "The id of the project role for this member.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isResponsible": {
            "type": "boolean",
            "description": "Whether the user should be marked as responsible.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "ProjectMemberModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectRoleId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectRoleName": {
            "type": "string",
            "nullable": true
          },
          "isResponsible": {
            "type": "boolean"
          },
          "isExternal": {
            "type": "boolean",
            "description": "True if the model is coming from an external workspace (awork Connect).\r\nFalse otherwise."
          }
        },
        "additionalProperties": false
      },
      "ProjectMemberRemoveForm": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The id of the user to remove from the project.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ProjectMilestone": {
        "required": [
          "color",
          "dueDate",
          "name",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The name of the milestone.",
            "example": "Internal Review"
          },
          "color": {
            "maxLength": 14,
            "minLength": 0,
            "type": "string",
            "description": "The color of the milestone.",
            "example": "green"
          },
          "dueDate": {
            "type": "string",
            "description": "The date the milestone is due.",
            "format": "date-time",
            "example": "2022-03-01T15:00:00Z"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project the milestone is related to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ProjectMilestonePostForm": {
        "required": [
          "color",
          "dueDate",
          "name",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The name of the milestone.",
            "example": "Internal Review"
          },
          "color": {
            "maxLength": 14,
            "minLength": 0,
            "type": "string",
            "description": "The color of the milestone.",
            "example": "green"
          },
          "dueDate": {
            "type": "string",
            "description": "The date the milestone is due.",
            "format": "date-time",
            "example": "2022-03-01T15:00:00Z"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project the milestone is related to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ProjectMilestonePutForm": {
        "required": [
          "color",
          "dueDate",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The name of the milestone.",
            "example": "Internal Review"
          },
          "color": {
            "maxLength": 14,
            "minLength": 0,
            "type": "string",
            "description": "The color of the milestone.",
            "example": "green"
          },
          "dueDate": {
            "type": "string",
            "description": "The date the milestone is due.",
            "format": "date-time",
            "example": "2022-03-01T15:00:00Z"
          }
        },
        "additionalProperties": false
      },
      "ProjectMilestoneTemplate": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The name of the milestone.",
            "nullable": true,
            "example": "Internal Review"
          },
          "color": {
            "maxLength": 14,
            "minLength": 0,
            "type": "string",
            "description": "The color of the milestone.",
            "nullable": true,
            "example": "green"
          },
          "relativeDueDate": {
            "type": "integer",
            "description": "Relative amount of days the milestone is due after the project creation date\r\nwhen a project gets created with the corresponding project template.",
            "format": "int64",
            "example": 7
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectTemplateId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ProjectModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "True if the model is coming from an external workspace (awork Connect).\r\nFalse otherwise."
          },
          "startDate": {
            "type": "string",
            "description": "The start date of the project.",
            "format": "date-time",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "description": "The due date of the project.",
            "format": "date-time",
            "nullable": true
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlannerProjectMemberModel"
            },
            "nullable": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectTeamModel"
            },
            "nullable": true
          },
          "projectStatus": {
            "$ref": "#/components/schemas/DefaultStatusModel"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyModel"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultTagModel"
            },
            "description": "The tags for this project.",
            "nullable": true
          },
          "projectType": {
            "$ref": "#/components/schemas/DefaultTypeModel"
          },
          "color": {
            "type": "string",
            "description": "The color of the project for display purposes in awork.\r\nCan be null when no color assigned.",
            "nullable": true,
            "example": "purple"
          },
          "isPrivate": {
            "type": "boolean"
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the project has an image."
          }
        },
        "additionalProperties": false
      },
      "ProjectModelForTimeTrackings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "projectStatus": {
            "$ref": "#/components/schemas/NestedStatusModel"
          },
          "company": {
            "$ref": "#/components/schemas/NestedCompanyModel"
          },
          "projectType": {
            "$ref": "#/components/schemas/NestedTypeModel"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectTagModelForTimeTrackings"
            },
            "description": "The tags of the project.",
            "nullable": true,
            "deprecated": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectTeamModelForTimeTrackings"
            },
            "description": "The teams of the project.",
            "nullable": true,
            "deprecated": true
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether the project is private.",
            "example": false
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the project has an image.",
            "example": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "Whether the project is external."
          },
          "isBillableByDefault": {
            "type": "boolean",
            "description": "Whether project times should be billable by default.",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created the project.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ProjectPutForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The name of the Project. Max allowed length: 1000 characters.",
            "example": "Website Design"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether this is a private project only visible to members and the creator.\r\nDefaults to false.\r\nCan only be changed from public to private if no times have been tracked on this project.\r\nCan always be made public.",
            "example": false
          },
          "description": {
            "maxLength": 25000,
            "minLength": 0,
            "type": "string",
            "description": "The project description. Max allowed length: 25000 characters.",
            "nullable": true,
            "example": "Sitemap, design, assets and implementation of the new online presence."
          },
          "startDate": {
            "type": "string",
            "description": "The start date of the project.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T00:00:00Z"
          },
          "dueDate": {
            "type": "string",
            "description": "The due date of the project.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-05-01T00:00:00Z"
          },
          "companyId": {
            "type": "string",
            "description": "The id of the company.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "timeBudget": {
            "type": "integer",
            "description": "The time budget the project has, in seconds.",
            "format": "int32",
            "nullable": true,
            "example": 576000
          },
          "isBillableByDefault": {
            "type": "boolean",
            "description": "Whether project times should be billable by default.",
            "nullable": true,
            "example": true
          },
          "projectTypeId": {
            "type": "string",
            "description": "The id of the project type of this project.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "color": {
            "maxLength": 14,
            "minLength": 0,
            "type": "string",
            "description": "The color of the project for display purposes in awork.\r\nThe supported colors are defined by the awork frontend.\r\nCan be null when no color assigned.",
            "nullable": true,
            "example": "purple"
          },
          "deductNonBillableHours": {
            "type": "boolean",
            "description": "Whether to deduct non-billable hours from project budgets."
          }
        },
        "additionalProperties": false,
        "description": "PUT Model of projects."
      },
      "ProjectRole": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The name of the project role. Required.",
            "example": "Project Manager"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Whether to use this role as default when adding new project members.",
            "nullable": true,
            "example": true
          },
          "defaultProjectRoleId": {
            "type": "string",
            "description": "The id of the new default project role.\r\nRequired if the updated project role is the current default role.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "allowOnlyProjectMasterDataRead": {
            "type": "boolean",
            "description": "Whether this role is allowed to have only read permissions for project-master-data."
          },
          "id": {
            "type": "string",
            "description": "The id of the project role.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "memberCount": {
            "type": "integer",
            "description": "The count of members which are linked to this role.",
            "format": "int32",
            "example": 5
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectMember"
            },
            "description": "The members which are linked to this role.",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ProjectRoleDeleteForm": {
        "type": "object",
        "properties": {
          "newProjectRoleId": {
            "type": "string",
            "description": "The id of the new project role.\r\nNeeds to be set when there are still users in projects with the old project role.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ProjectRoleForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The name of the project role. Required.",
            "example": "Project Manager"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Whether to use this role as default when adding new project members.",
            "nullable": true,
            "example": true
          },
          "defaultProjectRoleId": {
            "type": "string",
            "description": "The id of the new default project role.\r\nRequired if the updated project role is the current default role.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "allowOnlyProjectMasterDataRead": {
            "type": "boolean",
            "description": "Whether this role is allowed to have only read permissions for project-master-data."
          }
        },
        "additionalProperties": false
      },
      "ProjectRolesPermissionFullModel": {
        "type": "object",
        "properties": {
          "projectRoleId": {
            "type": "string",
            "description": "The id of the project role.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionFullModel"
            },
            "description": "The list of permissions of the project role.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProjectStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The primary identifier of this project status.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the project status.",
            "nullable": true,
            "example": "In Progress"
          },
          "type": {
            "type": "string",
            "description": "The general type of this project status.",
            "nullable": true,
            "example": "progress"
          },
          "order": {
            "type": "integer",
            "description": "The order of this status.",
            "format": "int32",
            "nullable": true,
            "example": 2
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time"
          },
          "projectTemplateId": {
            "type": "string",
            "description": "The id of the project template of the status.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project the status belongs to.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ProjectStatusDeleteForm": {
        "type": "object",
        "properties": {
          "projectStatusId": {
            "type": "string",
            "description": "The id of the new project status to assign.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ProjectStatusForm": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The name of the project status.",
            "example": "In Progress"
          },
          "type": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "Specifies the general type of this project status.\r\nAccepted values: 'progress', 'not-started', 'closed', 'stuck",
            "example": "progress"
          }
        },
        "additionalProperties": false
      },
      "ProjectTagModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the tag.",
            "nullable": true,
            "example": "Design"
          },
          "color": {
            "type": "string",
            "description": "The color of the tag.",
            "nullable": true,
            "example": "purple"
          }
        },
        "additionalProperties": false,
        "description": "A tag model used for the project.\r\nDo not delete, we need to create copies of the tag model for each entity to avoid issues with Automapper."
      },
      "ProjectTagModelForTimeTrackings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the tag.",
            "nullable": true,
            "example": "Design"
          },
          "color": {
            "type": "string",
            "description": "The color of the tag.",
            "nullable": true,
            "example": "purple"
          }
        },
        "additionalProperties": false,
        "description": "A tag model used for the timetrackings ProjectModelForTimeTrackings.\r\nDo not delete, we need to create copies of the tag model for each entity to avoid issues with Automapper."
      },
      "ProjectTeamModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ProjectTeamModelForTimeTrackings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ProjectTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the template.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the template.",
            "nullable": true,
            "example": "Website Design Project"
          },
          "description": {
            "type": "string",
            "description": "The description that will be used for the project created from this template.\r\nIt will be appended to the project description provided by the user.",
            "nullable": true,
            "example": "A website design project created from a template"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isBillableByDefault": {
            "type": "string",
            "description": "Whether project times should be billable by default, if the project was created by this template.\r\nCan be 'on', 'off', or 'auto'.",
            "nullable": true,
            "example": "auto"
          },
          "defaultTaskListIdForEmails": {
            "type": "string",
            "description": "The id references the task list, which is used to assign tasks created by email to.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectStatus"
            },
            "description": "The project statuses of the template.",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the project template has an image in the files service."
          },
          "projectTypeId": {
            "type": "string",
            "description": "The id of the project type.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "timeBudget": {
            "type": "integer",
            "description": "The amount of time budgeted for the project in seconds.",
            "format": "int32"
          },
          "hasRelativeTasks": {
            "type": "boolean",
            "description": "True if any of the tasks of the template has relative dates."
          }
        },
        "additionalProperties": false,
        "description": "The project type model."
      },
      "ProjectTemplateForm": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Name of the project template.",
            "nullable": true,
            "example": "Website Design Project"
          },
          "description": {
            "maxLength": 25000,
            "minLength": 0,
            "type": "string",
            "description": "Description of the project template.",
            "nullable": true,
            "example": "A template used for all website design projects"
          },
          "isBillableByDefault": {
            "type": "string",
            "description": "Whether the project should be billable by default. Can be 'on', 'off', or 'auto'.\r\nDefault is `auto`.",
            "nullable": true,
            "example": "auto"
          },
          "defaultTaskListIdForEmails": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectTypeId": {
            "type": "string",
            "description": "Project type id of the project template.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "timeBudget": {
            "type": "integer",
            "description": "The amount of time budgeted for the project in seconds.\r\nIf null, the time budget will be unchanged.\r\nSet to 0 to remove the time budget.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The POST / PUT project template model."
      },
      "ProjectType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the type.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the project type.",
            "nullable": true,
            "example": "Brand Strategy"
          },
          "description": {
            "type": "string",
            "description": "A short (max. 140 characters) description of the project type.",
            "nullable": true,
            "example": "A project to research and define a brand strategy"
          },
          "icon": {
            "type": "string",
            "description": "The identifier of the project type icon.",
            "nullable": true,
            "example": "award"
          },
          "isArchived": {
            "type": "boolean",
            "description": "Whether this type is archived.\r\nIt can no longer be used to create projects, but existing\r\nprojects will continue using it.",
            "example": false
          },
          "isPreset": {
            "type": "boolean",
            "description": "Whether this type is one of the preset types.\r\nPreset types cannot be edited.",
            "example": false
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "The project type model."
      },
      "ProjectTypeForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The names of the project type.",
            "example": "Brand Strategy"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "A short description of the project type.",
            "nullable": true,
            "example": "A project to research and define a brand strategy"
          },
          "icon": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The identifier of the project type icon.",
            "nullable": true,
            "example": "award"
          }
        },
        "additionalProperties": false,
        "description": "The POST / PUT project type model."
      },
      "ProjectsToPlan": {
        "type": "object",
        "properties": {
          "selectedTeamIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "selectedProjectIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "selectedProjectFilterNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProjectsToPlanForm": {
        "type": "object",
        "properties": {
          "selectedProjectFilterNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "selectedTeamIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "selectedProjectIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublicProjectTemplateAutomation": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether the automation should be enabled."
          },
          "trigger": {
            "$ref": "#/components/schemas/PublicProjectTemplateAutomationTrigger"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicProjectTemplateAutomationAction"
            },
            "description": "The actions of this automation.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublicProjectTemplateAutomationAction": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of this automation action.",
            "nullable": true,
            "example": "tag-add-task"
          },
          "order": {
            "type": "integer",
            "description": "The order of this action in the automation.",
            "format": "int32"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicProjectTemplateAutomationValue"
            },
            "description": "The additional values of this automation action.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublicProjectTemplateAutomationTrigger": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of this automation trigger.",
            "nullable": true,
            "example": "task-created"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicProjectTemplateAutomationValue"
            },
            "description": "The additional values of this automation trigger.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublicProjectTemplateAutomationValue": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the action value.",
            "nullable": true,
            "example": "tag"
          },
          "value": {
            "type": "string",
            "description": "The value of the action value.",
            "nullable": true,
            "example": "Design"
          }
        },
        "additionalProperties": false
      },
      "PublicProjectTemplateChecklistItem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the checklist item template.",
            "nullable": true,
            "example": "PO explains the sprint goal"
          },
          "order": {
            "type": "number",
            "description": "The order of the checklist item template.",
            "format": "double",
            "nullable": true,
            "example": 0
          }
        },
        "additionalProperties": false
      },
      "PublicProjectTemplateFile": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL of the file to download and save in the entity.",
            "nullable": true,
            "example": "https://cdn.awork.com/content/project-report.pdf"
          }
        },
        "additionalProperties": false
      },
      "PublicProjectTemplateForm": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the public project template.",
            "nullable": true,
            "example": "awork in 15 Minutes"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the public project template.\r\nAn unique identifier for each public project template independent of language.",
            "nullable": true,
            "example": "awork-in-15-minutes"
          },
          "icon": {
            "type": "string",
            "description": "The icon of the public project template.",
            "nullable": true,
            "example": "📐"
          },
          "language": {
            "type": "string",
            "description": "The language of the public project template.",
            "nullable": true,
            "example": "en"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The tags of the public project template which can be used to filter the\r\ntemplates shown in the UI.",
            "nullable": true
          },
          "project": {
            "$ref": "#/components/schemas/PublicProjectTemplateProject"
          },
          "originalProjectTemplateId": {
            "type": "string",
            "description": "The project template id of the original project template in the configuration workspace.\r\nUsed to identify the public project template to update.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "PublicProjectTemplateModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the public project template.",
            "nullable": true,
            "example": "awork in 15 Minutes"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the public project template.\r\nAn unique identifier for each public project template independent of language.",
            "nullable": true,
            "example": "awork-in-15-minutes"
          },
          "icon": {
            "type": "string",
            "description": "The icon of the public project template.",
            "nullable": true,
            "example": "📐"
          },
          "language": {
            "type": "string",
            "description": "The language of the public project template.",
            "nullable": true,
            "example": "en"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The tags of the public project template which can be used to filter the\r\ntemplates shown in the UI.",
            "nullable": true
          },
          "project": {
            "$ref": "#/components/schemas/PublicProjectTemplateProject"
          },
          "originalProjectTemplateId": {
            "type": "string",
            "description": "The project template id of the original project template in the configuration workspace.\r\nUsed to identify the public project template to update.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "id": {
            "type": "string",
            "description": "The id of the public project template.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date and time when the public project template was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created the public project template.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date and time when the public project template was last updated.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last updated the public project template.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "deletedOn": {
            "type": "string",
            "description": "The date and time when the public project template was deleted.",
            "format": "date-time",
            "nullable": true
          },
          "deletedBy": {
            "type": "string",
            "description": "The id of the user who deleted the public project template.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "hasRelativeTasks": {
            "type": "boolean",
            "description": "True if any of the tasks of the public template has a relative date.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PublicProjectTemplateProject": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the template.",
            "nullable": true,
            "example": "Basic flow of our Scrum process."
          },
          "isBillableByDefault": {
            "type": "string",
            "description": "The billability setting of the template",
            "nullable": true
          },
          "defaultTaskListNameForEmails": {
            "type": "string",
            "description": "The Name of the Task List to be used for email to task",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicProjectTemplateTag"
            },
            "description": "The tags of the template",
            "nullable": true
          },
          "projectStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicProjectTemplateStatus"
            },
            "description": "The project statuses of the template",
            "nullable": true
          },
          "taskStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicProjectTemplateTaskStatus"
            },
            "description": "The task statuses of the template",
            "nullable": true
          },
          "taskLists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicProjectTemplateTaskList"
            },
            "description": "The task lists of the template",
            "nullable": true
          },
          "tasksWithoutList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicProjectTemplateTask"
            },
            "description": "The tasks without list of the template",
            "nullable": true
          },
          "automations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicProjectTemplateAutomation"
            },
            "description": "The automations of the template.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublicProjectTemplateStatus": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the status.",
            "nullable": true,
            "example": "In Progress"
          },
          "type": {
            "type": "string",
            "description": "The general type of the status.",
            "nullable": true,
            "example": "progress"
          },
          "order": {
            "type": "integer",
            "description": "The order of the status.",
            "format": "int32",
            "nullable": true,
            "example": 2
          }
        },
        "additionalProperties": false
      },
      "PublicProjectTemplateTag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the Tag.",
            "nullable": true,
            "example": "Tag 1"
          }
        },
        "additionalProperties": false
      },
      "PublicProjectTemplateTask": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the task template.",
            "nullable": true,
            "example": "Sprint tasks"
          },
          "description": {
            "type": "string",
            "description": "The description of the task template.",
            "nullable": true,
            "example": "Define content of the sprint."
          },
          "order": {
            "type": "number",
            "description": "The order of the task template in a task status column.",
            "format": "double",
            "nullable": true,
            "example": 0
          },
          "isPrio": {
            "type": "boolean",
            "description": "WWhether this task template is marked as priority."
          },
          "plannedDuration": {
            "type": "integer",
            "description": "The planned duration of the task template.",
            "format": "int32",
            "nullable": true,
            "example": 3600
          },
          "relativeDueOn": {
            "type": "integer",
            "description": "The relative due on of the task template.",
            "format": "int32",
            "nullable": true,
            "example": 86400
          },
          "relativeStartOn": {
            "type": "integer",
            "description": "The relative start on of the task template.",
            "format": "int32",
            "nullable": true,
            "example": 86400
          },
          "typeOfWorkName": {
            "type": "string",
            "description": "The name of the type of work of the task template.",
            "nullable": true,
            "example": "Planning"
          },
          "checklistItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicProjectTemplateChecklistItem"
            },
            "description": "The checklist template of the task template.",
            "nullable": true
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicProjectTemplateFile"
            },
            "description": "The files to add to the task created from this template.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublicProjectTemplateTaskList": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the list template.",
            "nullable": true,
            "example": "Scrum planning"
          },
          "order": {
            "type": "number",
            "description": "The order of the list template.",
            "format": "double",
            "nullable": true,
            "example": 1
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicProjectTemplateTask"
            },
            "description": "The task templates of the list template.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublicProjectTemplateTaskStatus": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the status.",
            "nullable": true,
            "example": "In Progress"
          },
          "type": {
            "type": "string",
            "description": "The general type of the status.",
            "nullable": true,
            "example": "progress"
          },
          "icon": {
            "type": "string",
            "description": "The icon of the status.",
            "nullable": true,
            "example": "In Progress"
          },
          "order": {
            "type": "number",
            "description": "The order of the status.",
            "format": "double",
            "nullable": true,
            "example": 2
          }
        },
        "additionalProperties": false
      },
      "PutCheckPlannerChecklistItemParameters": {
        "type": "object",
        "properties": {
          "isChecked": {
            "type": "boolean",
            "description": "The checked value to set."
          }
        },
        "additionalProperties": false
      },
      "Reaction": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "All users ids that reacted with the emoji.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "emoji": {
            "type": "string",
            "description": "The emoji used as a reaction.",
            "nullable": true,
            "example": "👍"
          }
        },
        "additionalProperties": false,
        "description": "The users reactions to a comment."
      },
      "ReactionForm": {
        "required": [
          "emoji",
          "operation"
        ],
        "type": "object",
        "properties": {
          "emoji": {
            "minLength": 1,
            "type": "string",
            "description": "The reaction (emoji).",
            "example": "👍"
          },
          "operation": {
            "minLength": 1,
            "type": "string",
            "description": "The operation. Can be 'add' or 'remove'.",
            "example": "add"
          }
        },
        "additionalProperties": false
      },
      "RecurrencyModel": {
        "type": "object",
        "properties": {
          "recurrencyRule": {
            "type": "string",
            "description": "The recurrence rule as cron expression. We support all expressions which cronos supports\r\n(https://github.com/HangfireIO/Cronos).\r\nThe number of occurrences is limited to 24 a day.",
            "nullable": true,
            "example": "\"0 0 1 * * ?\""
          },
          "recurrencyInterval": {
            "type": "integer",
            "description": "The interval of the executed expression. If the value is 3, only the third time of the expression the recurrence is\r\nactually executed.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "relativeDueOn": {
            "type": "integer",
            "description": "The relative due date and time of the task created from this recurrence rule, in seconds,\r\nfrom the moment of creating the task by a recurrence rule.",
            "format": "int64",
            "nullable": true,
            "example": 3600
          },
          "recurrencyStartOn": {
            "type": "string",
            "description": "DateTime when recurring task creation will start, considering the set Recurrency Rule and Recurrency Interval.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-03-15T11:00:00Z"
          },
          "recurrencyTimezone": {
            "type": "string",
            "description": "The timezone of the Recurrency Rule.",
            "nullable": true,
            "example": "Europe/Berlin"
          }
        },
        "additionalProperties": false
      },
      "RefineForm": {
        "type": "object",
        "properties": {
          "operationId": {
            "type": "string",
            "description": "A unique id to track the AI operation, provided by the client.\r\nWill be returned in the websocket events related to this async process.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "bookingIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ids of the bookings to fix.",
            "nullable": true
          },
          "taskIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ids of the tasks to fix.",
            "nullable": true
          },
          "prompt": {
            "type": "string",
            "description": "User-provided prompt for the AI operation to modify the bookings and tasks.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReorderingResult": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the list to move the task to or to change the order for.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "order": {
            "type": "number",
            "description": "The order of the task in the list.\r\nIf null, the task is moved to the end of the list.",
            "format": "double",
            "nullable": true,
            "example": 3
          }
        },
        "additionalProperties": false
      },
      "Retainer": {
        "type": "object",
        "properties": {
          "timeBudget": {
            "type": "integer",
            "description": "The time budget per retainer period in seconds. The default budget amount for new budgets in this retainer.",
            "format": "int32"
          },
          "timezone": {
            "type": "string",
            "description": "The timezone for when new budgets are created.",
            "nullable": true
          },
          "rollOverUnderspentBudget": {
            "type": "boolean",
            "description": "Whether underspent budgets should be rolled over to the next period."
          },
          "rollOverOverspentBudget": {
            "type": "boolean",
            "description": "Whether overspent budgets should be rolled over to the next period."
          },
          "startDate": {
            "type": "string",
            "description": "The start of the retainer contract.",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "The end of the retainer contract until new budgets will be created. Optional.",
            "format": "date-time",
            "nullable": true
          },
          "syncProjectDates": {
            "type": "boolean",
            "description": "Whether the project start and due dates should be synced to the retainer start and end dates."
          },
          "id": {
            "type": "string",
            "description": "The id of the retainer.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "retainerPeriod": {
            "type": "string",
            "description": "The period for new budgets in this retainer.\r\nCurrently only 'monthly' is supported.",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "description": "The project this retainer is associated with.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isExternal": {
            "type": "boolean",
            "description": "Whether the retainer belongs to an external project."
          },
          "retainerBudgets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RetainerBudget"
            },
            "description": "The budgets for this retainer. Each budget period (month) gets its own budget.",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "The date this retainer was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this retainer.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this retainer was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this retainer.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "RetainerBudget": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the retainer budget.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "timeBudget": {
            "type": "integer",
            "description": "The budget for this retainer period in seconds.\r\nBased on the carry over option selected in the retainer settings, the timebudget is adjusted by the carry over from the previous period.",
            "format": "int32"
          },
          "trackedDuration": {
            "type": "integer",
            "description": "The sum of tracked time in this retainer period.\r\nContains billable and non-billable hours if the DeductNonBillableHours flag is set to true.\r\nContains only billable hours if the DeductNonBillableHours flag is set to false.\r\nTime entries belong to the retainer period if their StartDate is between the StartDate and EndDate of the retainer period.",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "description": "The start of the retainer period in UTC.",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "The end of the retainer period in UTC.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "RetainerForm": {
        "type": "object",
        "properties": {
          "timeBudget": {
            "type": "integer",
            "description": "The time budget per retainer period in seconds. The default budget amount for new budgets in this retainer.",
            "format": "int32"
          },
          "timezone": {
            "type": "string",
            "description": "The timezone for when new budgets are created.",
            "nullable": true
          },
          "rollOverUnderspentBudget": {
            "type": "boolean",
            "description": "Whether underspent budgets should be rolled over to the next period."
          },
          "rollOverOverspentBudget": {
            "type": "boolean",
            "description": "Whether overspent budgets should be rolled over to the next period."
          },
          "startDate": {
            "type": "string",
            "description": "The start of the retainer contract.",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "description": "The end of the retainer contract until new budgets will be created. Optional.",
            "format": "date-time",
            "nullable": true
          },
          "syncProjectDates": {
            "type": "boolean",
            "description": "Whether the project start and due dates should be synced to the retainer start and end dates."
          }
        },
        "additionalProperties": false
      },
      "Role": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the role. Must be unique.",
            "example": "Designer"
          },
          "isAdminRole": {
            "type": "boolean",
            "description": "Whether this is the admin role.\r\nOnly one role can be the admin role.",
            "example": false
          },
          "isGuestRole": {
            "type": "boolean",
            "description": "Whether this is the guest role.\r\nOnly one role can be the guest role.",
            "example": false
          },
          "id": {
            "type": "string",
            "description": "The id of the role.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isPreset": {
            "type": "boolean",
            "description": "Whether this role is one of the preset roles.\r\nPreset roles can be edited, archived and deleted.",
            "example": false
          },
          "isArchived": {
            "type": "boolean",
            "description": "Whether the role has been archived.",
            "example": false
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this role.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this role was created.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated this role.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this role was last modified.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "The role model."
      },
      "RoleForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the role. Must be unique.",
            "example": "Designer"
          },
          "isAdminRole": {
            "type": "boolean",
            "description": "Whether this is the admin role.\r\nOnly one role can be the admin role.",
            "example": false
          },
          "isGuestRole": {
            "type": "boolean",
            "description": "Whether this is the guest role.\r\nOnly one role can be the guest role.",
            "example": false
          }
        },
        "additionalProperties": false,
        "description": "The POST/PUT model of the role."
      },
      "SetTimeEntryBillableForm": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ids of the time entries, which should be set to billable.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetTimeEntryBilledForm": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ids of the time entries, which should be set to billed.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetTimeEntryTypeOfWork": {
        "required": [
          "typeOfWorkId"
        ],
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ids of the time entries, for which the type of work should be set.",
            "nullable": true
          },
          "typeOfWorkId": {
            "type": "string",
            "description": "The type of work id, to which the time entries should be set to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ShouldMigrateToConnectForm": {
        "type": "object",
        "properties": {
          "shouldMigrateToConnect": {
            "type": "boolean",
            "description": "Whether the user should be migrated to Connect."
          }
        },
        "additionalProperties": false
      },
      "SimplifiedCompanyModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "hasImage": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SimplifiedProjectModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean"
          },
          "company": {
            "$ref": "#/components/schemas/SimplifiedCompanyModel"
          }
        },
        "additionalProperties": false
      },
      "SimplifiedTaskModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "baseType": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "entityId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "correlationId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "taskStatusId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "taskStatus": {
            "$ref": "#/components/schemas/NestedTaskStatusModel"
          }
        },
        "additionalProperties": false
      },
      "SimplifiedTimeTracking": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the time tracking.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the time tracking in seconds.\r\nRequired when the time tracking has already been completed and EndTime has not been set.",
            "format": "int32",
            "nullable": true,
            "example": 8635
          },
          "startDateUtc": {
            "type": "string",
            "description": "The date (in UTC) when the time tracking was started.\r\nRequired.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T00:00:00Z"
          },
          "startDateLocal": {
            "type": "string",
            "description": "The date (in Local) when the time tracking was started.\r\nRequired.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T00:00:00"
          },
          "isBillable": {
            "type": "boolean",
            "description": "Whether the time tracking is billable or not.",
            "example": true
          },
          "isBilled": {
            "type": "boolean",
            "description": "Whether the time tracking is billed or not.",
            "example": false
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this time tracking.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date of the creation of this time tracking.",
            "format": "date-time"
          },
          "task": {
            "$ref": "#/components/schemas/SimplifiedTaskModel"
          },
          "taskId": {
            "type": "string",
            "description": "The id of the task.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "project": {
            "$ref": "#/components/schemas/SimplifiedProjectModel"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "user": {
            "$ref": "#/components/schemas/NestedUserModel"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "typeOfWork": {
            "$ref": "#/components/schemas/NestedBaseTypeModel"
          },
          "typeOfWorkId": {
            "type": "string",
            "description": "The id of the type of work.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "startTimeLocal": {
            "type": "string",
            "description": "The time (in Local) when the time tracking was started.",
            "nullable": true,
            "example": "10:21:00"
          }
        },
        "additionalProperties": false,
        "description": "The simplified time tracking model."
      },
      "StartTimeTrackingForm": {
        "required": [
          "timezone",
          "typeOfWorkId"
        ],
        "type": "object",
        "properties": {
          "isBillable": {
            "type": "boolean",
            "description": "Whether the time tracking is billable or not.",
            "example": true
          },
          "isBilled": {
            "type": "boolean",
            "description": "Whether the time tracking is billed or not.",
            "example": false
          },
          "taskId": {
            "type": "string",
            "description": "The id of the task.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "note": {
            "type": "string",
            "description": "The note of the time tracking.",
            "nullable": true,
            "example": "I created a first draft for the new sitemap"
          },
          "typeOfWorkId": {
            "type": "string",
            "description": "The id of the type of work of the time tracking.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "timezone": {
            "minLength": 1,
            "type": "string",
            "description": "The original timezone of the time tracking.\r\nThe format of the timezone is the IANA standard.",
            "example": "Europe/London"
          }
        },
        "additionalProperties": false
      },
      "StatusResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubdomanModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TagForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "color": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TagUpdateForm": {
        "required": [
          "newTag",
          "oldTagName"
        ],
        "type": "object",
        "properties": {
          "oldTagName": {
            "minLength": 1,
            "type": "string"
          },
          "newTag": {
            "$ref": "#/components/schemas/TagForm"
          },
          "shouldMerge": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaskBundle": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the task bundle. Required if its not related to a task bundle.",
            "nullable": true,
            "example": "Project Kickoff"
          },
          "description": {
            "type": "string",
            "description": "The description of the task bundle.",
            "nullable": true,
            "example": "Includes all tasks related to getting this project off the ground successfully. For the joy of work!"
          },
          "icon": {
            "type": "string",
            "description": "The icon of the task bundle.",
            "nullable": true,
            "example": "arrow_forward"
          },
          "projectTemplateId": {
            "type": "string",
            "description": "The project template id of the task bundle, only necessary for the creation of an empty bundle for a project template.",
            "format": "uuid",
            "nullable": true,
            "example": "f76a7b32-f279-ec11-94f6-dc984040d6c9"
          },
          "id": {
            "type": "string",
            "description": "The id of the task bundle.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this task bundle was created.",
            "format": "date-time",
            "example": "2022-03-11T17:53:46.100Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this task bundle.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this task bundle was last modified.",
            "format": "date-time",
            "example": "2022-03-13T11:20:00.100Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this task bundle.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "taskLists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskListTemplate"
            },
            "description": "The list templates within this task bundle.",
            "nullable": true
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskTemplate"
            },
            "description": "The task templates within this task bundle.",
            "nullable": true
          },
          "hasRelativeTasks": {
            "type": "boolean",
            "description": "True if any of the tasks in the bundle has relative dates.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TaskBundleForm": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the task bundle. Required if its not related to a task bundle.",
            "nullable": true,
            "example": "Project Kickoff"
          },
          "description": {
            "type": "string",
            "description": "The description of the task bundle.",
            "nullable": true,
            "example": "Includes all tasks related to getting this project off the ground successfully. For the joy of work!"
          },
          "icon": {
            "type": "string",
            "description": "The icon of the task bundle.",
            "nullable": true,
            "example": "arrow_forward"
          },
          "projectTemplateId": {
            "type": "string",
            "description": "The project template id of the task bundle, only necessary for the creation of an empty bundle for a project template.",
            "format": "uuid",
            "nullable": true,
            "example": "f76a7b32-f279-ec11-94f6-dc984040d6c9"
          }
        },
        "additionalProperties": false
      },
      "TaskBundleFromTaskListForm": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the task bundle. Required if its not related to a task bundle.",
            "nullable": true,
            "example": "Project Kickoff"
          },
          "description": {
            "type": "string",
            "description": "The description of the task bundle.",
            "nullable": true,
            "example": "Includes all tasks related to getting this project off the ground successfully. For the joy of work!"
          },
          "icon": {
            "type": "string",
            "description": "The icon of the task bundle.",
            "nullable": true,
            "example": "arrow_forward"
          },
          "projectTemplateId": {
            "type": "string",
            "description": "The project template id of the task bundle, only necessary for the creation of an empty bundle for a project template.",
            "format": "uuid",
            "nullable": true,
            "example": "f76a7b32-f279-ec11-94f6-dc984040d6c9"
          },
          "referenceDate": {
            "type": "string",
            "description": "If provided, it will make the start/end dates of the tasks relative to this date.\r\nIn start or end dates of project/tasks are not available then no relative dates will be set.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaskBundleRecurrencyForm": {
        "type": "object",
        "properties": {
          "recurrencyRule": {
            "type": "string",
            "description": "The recurrence rule as cron expression. We support all expressions which cronos supports\r\n(https://github.com/HangfireIO/Cronos).\r\nThe number of occurrences is limited to 24 a day.",
            "nullable": true,
            "example": "\"0 0 1 * * ?\""
          },
          "recurrencyInterval": {
            "type": "integer",
            "description": "The interval of the executed expression. If the value is 3, only the third time of the expression the recurrence is\r\nactually executed.",
            "format": "int32",
            "nullable": true,
            "example": 2
          },
          "relativeDueOn": {
            "type": "integer",
            "description": "The relative due date and time of the task created from this recurrence rule, in seconds,\r\nfrom the moment of creating the task by a recurrence rule.\r\nMax value is 31540000 (1 year).",
            "format": "int64",
            "nullable": true,
            "example": 3600
          }
        },
        "additionalProperties": false
      },
      "TaskBundleResult": {
        "type": "object",
        "properties": {
          "taskBundleId": {
            "type": "string",
            "description": "The id of the task bundle.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "TaskDependency": {
        "type": "object",
        "properties": {
          "predecessorId": {
            "type": "string",
            "description": "The Id of the predecessor. A task can have multiple predecessors through multiple dependency relationships.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "successorId": {
            "type": "string",
            "description": "The Id of the successor. A task can have multiple successors through multiple dependency relationships.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "id": {
            "type": "string",
            "description": "The id of the task dependency.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this task dependency was created.",
            "format": "date-time",
            "example": "2021-03-22T13:00:00Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this task dependency.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this task dependenc was last modified.",
            "format": "date-time",
            "example": "2021-03-22T18:00:00Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this task dependency.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "Describes the dependency between two tasks. One Task is the predecessor and one task is the successor."
      },
      "TaskDependencyForm": {
        "type": "object",
        "properties": {
          "predecessorId": {
            "type": "string",
            "description": "The Id of the predecessor. A task can have multiple predecessors through multiple dependency relationships.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "successorId": {
            "type": "string",
            "description": "The Id of the successor. A task can have multiple successors through multiple dependency relationships.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "Describes the dependency between two tasks. One Task is the predecessor and one task is the successor."
      },
      "TaskDependencyTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "predecessorTemplateId": {
            "type": "string",
            "description": "The id of the predecessor task template.",
            "format": "uuid",
            "example": "f76a7b32-f279-ec11-94f6-dc984040d6c9"
          },
          "successorTemplateId": {
            "type": "string",
            "description": "The id of the successor task template.",
            "format": "uuid",
            "example": "fc8e5a55-e96f-ec11-94f6-dc984040d6c7"
          }
        },
        "additionalProperties": false
      },
      "TaskDependencyTemplateForm": {
        "type": "object",
        "properties": {
          "predecessorTemplateId": {
            "type": "string",
            "description": "The id of the predecessor task template.",
            "format": "uuid",
            "example": "f76a7b32-f279-ec11-94f6-dc984040d6c9"
          },
          "successorTemplateId": {
            "type": "string",
            "description": "The id of the successor task template.",
            "format": "uuid",
            "example": "fc8e5a55-e96f-ec11-94f6-dc984040d6c7"
          }
        },
        "additionalProperties": false
      },
      "TaskFromRecurrency": {
        "type": "object",
        "properties": {
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "baseTaskId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "baseType": {
            "type": "string",
            "nullable": true
          },
          "entityId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "plannedDuration": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskOrderList"
            },
            "nullable": true
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NestedUserModelForTasks"
            },
            "nullable": true
          },
          "occurrences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeFrameModel"
            },
            "nullable": true
          },
          "isAProjectTask": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TaskImportForm": {
        "type": "object",
        "properties": {
          "taskName": {
            "type": "string",
            "nullable": true
          },
          "startOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "dueOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "plannedDuration": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "assigneeId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "company": {
            "$ref": "#/components/schemas/ImportDefaultModel"
          },
          "typeOfWorkId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "taskStatus": {
            "$ref": "#/components/schemas/ImportStatusModel"
          },
          "taskList": {
            "$ref": "#/components/schemas/ImportDefaultModel"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectFormForTasks"
          }
        },
        "additionalProperties": false
      },
      "TaskInTaskListUpdateOrderForm": {
        "type": "object",
        "properties": {
          "order": {
            "type": "number",
            "description": "The order of the task in the list.",
            "format": "double",
            "nullable": true,
            "example": 4
          }
        },
        "additionalProperties": false
      },
      "TaskList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the task list.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this task list was created.",
            "format": "date-time",
            "example": "2021-03-22T15:00:00Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this task list.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this task list was last modified.",
            "format": "date-time",
            "example": "2021-03-22T16:30:00Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this task list.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the list.",
            "nullable": true,
            "example": "Product and Marketing To-Dos"
          },
          "order": {
            "type": "number",
            "description": "The order of the list.",
            "format": "double",
            "nullable": true,
            "example": 2
          },
          "isArchived": {
            "type": "boolean",
            "description": "Whether the task list has been archived.",
            "example": false
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "True if the task in this list will be not visible for external workspace users. \r\nFalse otherwise."
          }
        },
        "additionalProperties": false
      },
      "TaskListBundlePutForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "description": "The name of the list.",
            "example": "Product and Marketing To-Dos"
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "True if the task in this list will be not visible for external workspace users. \r\nFalse otherwise.\r\nIf null, no change will be made.",
            "nullable": true
          },
          "order": {
            "type": "number",
            "description": "The order of the list.",
            "format": "double",
            "nullable": true,
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "TaskListDeleteForm": {
        "type": "object",
        "properties": {
          "deleteTasks": {
            "type": "boolean",
            "description": "Whether all tasks in this list should be deleted.\r\nIf false or not set, the tasks will just be removed from the list.",
            "nullable": true
          },
          "deleteTimes": {
            "type": "boolean",
            "description": "Whether all times related to tasks in this list should be deleted.\r\nFalse by default.",
            "nullable": true,
            "example": true
          }
        },
        "additionalProperties": false
      },
      "TaskListForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "description": "The name of the list.",
            "example": "Product and Marketing To-Dos"
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "True if the task in this list will be not visible for external workspace users. \r\nFalse otherwise.\r\nIf null, no change will be made.",
            "nullable": true
          },
          "order": {
            "type": "number",
            "description": "The order of the list.",
            "format": "double",
            "nullable": true,
            "example": 2
          }
        },
        "additionalProperties": false
      },
      "TaskListPutForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "minLength": 1,
            "type": "string",
            "description": "The name of the list.",
            "example": "Product and Marketing To-Dos"
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "True if the task in this list will be not visible for external workspace users. \r\nFalse otherwise.\r\nIf null, no change will be made.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaskListTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the task list template.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the task list template.",
            "nullable": true,
            "example": "Concept Desing"
          },
          "orderOfTask": {
            "type": "number",
            "description": "The order of the task template in the task list template.",
            "format": "double",
            "example": 2
          },
          "order": {
            "type": "number",
            "description": "The order of the task list template, unique within the task bundle.",
            "format": "double",
            "example": 1
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "True if the task in this list is not visible for external workspace users."
          }
        },
        "additionalProperties": false
      },
      "TaskListToTaskForm": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the task list.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "order": {
            "type": "number",
            "description": "The order of the task in the list.\r\nIf null, the task is moved to the end of the list.",
            "format": "double",
            "nullable": true,
            "example": 3
          },
          "isPrimary": {
            "type": "boolean",
            "description": "Whether the TaskList should be the primary list for the task.\r\nIf not specified for any list of the task, the first list by order will be the primary list.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaskModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The name of the task. Max allowed length: 1000 characters.",
            "example": "Create logo concept"
          },
          "description": {
            "maxLength": 25000,
            "minLength": 0,
            "type": "string",
            "description": "The description of the task. Max allowed length: 25000 characters.",
            "nullable": true,
            "example": "We need to create a new impactful concept for the customer logo"
          },
          "isPrio": {
            "type": "boolean",
            "description": "Whether this task is marked as priority.",
            "example": true
          },
          "startOn": {
            "type": "string",
            "description": "The expected start date and time of the task.",
            "format": "date-time",
            "nullable": true,
            "example": "2023-03-03T17:00:00Z"
          },
          "dueOn": {
            "type": "string",
            "description": "The expected due date and time of the task.",
            "format": "date-time",
            "nullable": true,
            "example": "2023-03-18T17:00:00Z"
          },
          "laneOrder": {
            "type": "integer",
            "description": "The lane order defines the vertical position in the task board.",
            "format": "int32"
          },
          "plannedDuration": {
            "type": "integer",
            "description": "The expected planned workload of the task, in seconds.",
            "format": "int32",
            "example": 21600
          },
          "id": {
            "type": "string",
            "description": "The Id of the task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isExternal": {
            "type": "boolean",
            "description": "True if the model is coming from an external workspace (awork Connect).\r\nFalse otherwise."
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "True if the task is hidden for external workspace users. \r\nFalse otherwise."
          },
          "baseType": {
            "enum": [
              "private",
              "projecttask"
            ],
            "type": "string",
            "description": "The base type of the task.\r\nCan be 'private' for a private task or\r\n'projecttask' for a project task.",
            "example": "projecttask"
          },
          "taskStatusId": {
            "type": "string",
            "description": "The id of the status for this task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "taskStatus": {
            "$ref": "#/components/schemas/TaskStatus"
          },
          "typeOfWorkId": {
            "type": "string",
            "description": "The id of the type of work of this task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "typeOfWork": {
            "$ref": "#/components/schemas/NestedTaskTypeModel"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NestedUserModelForTasks"
            },
            "description": "The list assigned users of this task, or empty if not user was assigned.",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project this task is assigned to.\r\nOnly set if this is a project task.\r\nIn this case, it is equal to the EntityId.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "project": {
            "$ref": "#/components/schemas/NestedProjectModelForTasks"
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id between parent and subtasks, meaning it's either the ParentId or its own Id.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "parentId": {
            "type": "string",
            "description": "The id of the parent task this of this subtask.\r\nOnly set if this is a subtask.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "parentTask": {
            "$ref": "#/components/schemas/NestedParentTaskModel"
          },
          "isSubtask": {
            "type": "boolean",
            "description": "True if the task is a subtask.",
            "readOnly": true
          },
          "numberOfSubtasks": {
            "type": "integer",
            "description": "The number of subtasks of this task.\r\nNull if it's not a parent task.",
            "format": "int32",
            "nullable": true
          },
          "hasAttachment": {
            "type": "boolean",
            "description": "Whether this task has an attachment.",
            "example": false
          },
          "lists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskOrderList"
            },
            "description": "The lists to which the task is assigned to.",
            "nullable": true
          },
          "entityId": {
            "type": "string",
            "description": "The id of the entity this task is assigned to.\r\nThis is the id of the project if this is a project task,\r\nor the id of a user if this is a private task.\r\nSee 'BaseType' for supported types.",
            "format": "uuid",
            "nullable": true,
            "deprecated": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user of the private task.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskTagModel"
            },
            "description": "The list of tags.",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "The date this task was created.",
            "format": "date-time",
            "example": "2022-02-29T18:52:54.945Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this task was last modified.",
            "format": "date-time",
            "example": "2020-02-30T18:52:54.945Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "closedOn": {
            "type": "string",
            "description": "The date the task was set to closed.",
            "format": "date-time",
            "nullable": true
          },
          "closedBy": {
            "type": "string",
            "description": "The user who closed the task.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "order": {
            "type": "number",
            "description": "The order of the task in a task status column.",
            "format": "double",
            "example": 2
          },
          "subtaskOrder": {
            "type": "number",
            "description": "The order of the subtask relative to its parent task.",
            "format": "double",
            "nullable": true,
            "example": 1
          },
          "createdFromTaskId": {
            "type": "string",
            "description": "When the task was created by a recurrency rule, the id is the link to the template of which the task was created.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isRecurring": {
            "type": "boolean",
            "description": "If the task is a recurrency template (used to create new tasks by a recurrency rule), the flag is true."
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            },
            "description": "Custom fields of the task.",
            "nullable": true
          },
          "trackedDuration": {
            "type": "integer",
            "description": "The summed up duration of all time trackings for this task.",
            "format": "int32",
            "nullable": true,
            "example": 1200
          },
          "totalTrackedDuration": {
            "type": "integer",
            "description": "The summed up duration of all time trackings for this task, including subtasks.",
            "format": "int32",
            "nullable": true,
            "example": 1200
          },
          "totalPlannedDuration": {
            "type": "integer",
            "description": "The total planned workload of the task, in seconds, including subtasks.",
            "format": "int32",
            "nullable": true,
            "example": 21600
          },
          "remainingDuration": {
            "type": "integer",
            "description": "The expected remaining duration from the original planned effort of the task, in seconds.\r\nNull if the user has no permissions to see time tracking information.",
            "format": "int32",
            "nullable": true,
            "example": 10500,
            "deprecated": true
          },
          "totalRemainingDuration": {
            "type": "integer",
            "description": "The total remaining duration from the original planned effort of the task, in seconds, including subtasks.",
            "format": "int32",
            "nullable": true,
            "deprecated": true
          },
          "resourceVersion": {
            "type": "integer",
            "description": "The version of the entity, updated on every modification, to the ticks in UTC.\r\nNot identical to UpdatedOn.",
            "format": "int64",
            "readOnly": true,
            "example": 637825154598030700
          },
          "checklistItemsDoneCount": {
            "type": "integer",
            "description": "The number of checklist items marked as done.",
            "format": "int32",
            "example": 2
          },
          "checklistItemsCount": {
            "type": "integer",
            "description": "The total number of checklist items.",
            "format": "int32",
            "example": 5
          },
          "taskSchedulesCount": {
            "type": "integer",
            "description": "The number of task schedules for this task.",
            "format": "int32",
            "example": 1
          },
          "isCompletelyScheduled": {
            "type": "boolean",
            "description": "Whether this task is completed scheduled."
          },
          "commentCount": {
            "type": "integer",
            "description": "The number of comments on this task.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TaskModelForTimeTrackings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "baseType": {
            "type": "string",
            "description": "The base type of the task.\r\nCan be 'private' for a private task or\r\n'projecttask' for a project task.",
            "nullable": true,
            "example": "projecttask"
          },
          "taskStatusId": {
            "type": "string",
            "description": "The id of the status for this task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "typeOfWorkId": {
            "type": "string",
            "description": "The id of the type of work of this task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectModelForTimeTrackings"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project this task is assigned to.\r\nOnly set if this is a project task.\r\nIn this case, it is equal to the EntityId.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "plannedDuration": {
            "type": "integer",
            "description": "The expected planned workload of the task, in seconds.",
            "format": "int32",
            "nullable": true,
            "example": 21600
          },
          "closedOn": {
            "type": "string",
            "description": "The date the task was set to closed.",
            "format": "date-time",
            "nullable": true
          },
          "taskStatus": {
            "$ref": "#/components/schemas/NestedTaskStatusModel"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NestedUserModel"
            },
            "description": "The list of assigned users of this task, or empty if no user is assigned.",
            "nullable": true,
            "deprecated": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskTagModelForTimeTrackings"
            },
            "description": "The list of tags.",
            "nullable": true,
            "deprecated": true
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id between parent and subtasks, meaning it's either the ParentId or its own Id.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "parentId": {
            "type": "string",
            "description": "The id of the parent task this of this subtask.\r\nOnly set if this is a subtask.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "parentTask": {
            "$ref": "#/components/schemas/NestedModel"
          }
        },
        "additionalProperties": false
      },
      "TaskOrderList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the task list.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this task list was created.",
            "format": "date-time",
            "example": "2021-03-22T15:00:00Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this task list.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this task list was last modified.",
            "format": "date-time",
            "example": "2021-03-22T16:30:00Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this task list.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the list.",
            "nullable": true,
            "example": "Product and Marketing To-Dos"
          },
          "order": {
            "type": "number",
            "description": "The order of the list.",
            "format": "double",
            "nullable": true,
            "example": 2
          },
          "isArchived": {
            "type": "boolean",
            "description": "Whether the task list has been archived.",
            "example": false
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "True if the task in this list will be not visible for external workspace users. \r\nFalse otherwise."
          },
          "orderOfTask": {
            "type": "number",
            "description": "The order of the task in the list.",
            "format": "double",
            "nullable": true,
            "example": 5
          }
        },
        "additionalProperties": false
      },
      "TaskRecurrencyForm": {
        "required": [
          "recurrencyRule"
        ],
        "type": "object",
        "properties": {
          "recurrencyRule": {
            "minLength": 1,
            "type": "string",
            "description": "The recurrence rule as cron expression. We support all expressions which cronos supports\r\n(https://github.com/HangfireIO/Cronos).\r\nThe number of occurrences is limited to 24 a day.",
            "example": "\"0 0 1 * * ?\""
          },
          "recurrencyInterval": {
            "type": "integer",
            "description": "The interval of the executed expression. If the value is 3, only the third time of the expression the recurrence is\r\nactually executed.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "relativeDueOn": {
            "type": "integer",
            "description": "The relative due date and time of the task created from this recurrence rule, in seconds,\r\nfrom the moment of creating the task by a recurrence rule.",
            "format": "int64",
            "nullable": true,
            "example": 3600
          },
          "recurrencyStartOn": {
            "type": "string",
            "description": "DateTime when recurring task creation will start, considering the set Recurrency Rule and Recurrency Interval.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-03-12T11:00:00Z"
          },
          "recurrencyTimezone": {
            "type": "string",
            "description": "The timezone of the Recurrency Rule. If not set, will use the requesting user's timezone.",
            "nullable": true,
            "example": "Europe/Berlin"
          }
        },
        "additionalProperties": false
      },
      "TaskSchedule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user this task schedule is for.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "taskId": {
            "type": "string",
            "description": "The id of the task this task schedule is for.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "startDate": {
            "type": "string",
            "description": "The start date and time of this task schedule.",
            "format": "date-time",
            "example": "2022-03-01T09:00:00Z"
          },
          "endDate": {
            "type": "string",
            "description": "The end date and time of this task schedule.",
            "format": "date-time",
            "example": "2022-03-01T10:00:00Z"
          },
          "plannedDuration": {
            "type": "integer",
            "description": "The number of seconds of planned work.",
            "format": "int32",
            "example": 3600
          }
        },
        "additionalProperties": false
      },
      "TaskScheduleForm": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "description": "The id of the task this task schedule is for.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "startDate": {
            "type": "string",
            "description": "The start date and time of this task schedule.",
            "format": "date-time",
            "example": "2022-03-01T09:00:00Z"
          },
          "endDate": {
            "type": "string",
            "description": "The end date and time of this task schedule.",
            "format": "date-time",
            "example": "2022-03-01T10:00:00Z"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user this task schedule is for.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "TaskSchedulePutForm": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "description": "The id of the task this task schedule is for.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "startDate": {
            "type": "string",
            "description": "The start date and time of this task schedule.",
            "format": "date-time",
            "example": "2022-03-01T09:00:00Z"
          },
          "endDate": {
            "type": "string",
            "description": "The end date and time of this task schedule.",
            "format": "date-time",
            "example": "2022-03-01T10:00:00Z"
          }
        },
        "additionalProperties": false
      },
      "TaskSetPrioForm": {
        "required": [
          "isPrio",
          "taskId"
        ],
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "description": "The id of the task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isPrio": {
            "type": "boolean",
            "description": "Priority flag of the task.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "TaskSetting": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the setting.",
            "nullable": true,
            "example": "prevent-on-done-projects"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the setting is enabled.",
            "example": true
          },
          "workspaceId": {
            "type": "string",
            "description": "The id of the workspace the setting belongs to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "TaskSettingEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "deletedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedBy": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspaceId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isExternal": {
            "type": "boolean"
          },
          "type": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TaskSettingForm": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the setting.",
            "nullable": true,
            "example": "allow-multi-user-assignment"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the setting is enabled.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "TaskStatistic": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of tasks",
            "format": "int32",
            "example": 15
          },
          "statusType": {
            "type": "string",
            "description": "The state of task",
            "nullable": true,
            "example": "todo"
          },
          "plannedDuration": {
            "type": "integer",
            "description": "The sum of the planned duration of the tasks (in seconds)",
            "format": "int32",
            "nullable": true,
            "example": 2000
          },
          "trackedDuration": {
            "type": "integer",
            "description": "The sum of the tracked duration of the tasks (in seconds)",
            "format": "int32",
            "nullable": true,
            "example": 1600
          }
        },
        "additionalProperties": false
      },
      "TaskStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The primary identifier of this task status.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the task status.",
            "nullable": true,
            "example": "Conceptualize"
          },
          "type": {
            "type": "string",
            "description": "Of what general type is this task status?.",
            "nullable": true,
            "example": "progress"
          },
          "order": {
            "type": "number",
            "description": "The order of the task status in a project.",
            "format": "double",
            "nullable": true,
            "example": 2
          },
          "icon": {
            "type": "string",
            "description": "The icon of the task status.",
            "nullable": true,
            "example": "arrow_forward"
          },
          "projectId": {
            "type": "string",
            "description": "Is set if the task status is related to a project.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectTypeId": {
            "type": "string",
            "description": "Is set if the task status is related to a project type.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time",
            "example": "2022-03-{10}T15:51:58.100Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time",
            "example": "2022-03-10T16:15:26.100Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "TaskStatusDeleteForm": {
        "type": "object",
        "properties": {
          "taskStatusId": {
            "type": "string",
            "description": "The id of the task status all related tasks will be changed to.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "TaskStatusForm": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 30,
            "minLength": 1,
            "type": "string",
            "description": "The name of the task status.",
            "example": "Conceptualization"
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "Specifies the general type of this task status.\r\nAccepted values: 'todo', 'progress', 'review', 'stuck', 'done'.",
            "example": "progress"
          },
          "order": {
            "type": "number",
            "description": "The order of the task status.\r\nIf it is null, the task status will be appended after the last task status.",
            "format": "double",
            "nullable": true,
            "example": 2
          },
          "icon": {
            "type": "string",
            "description": "The icon of the task status.",
            "nullable": true,
            "example": "search"
          }
        },
        "additionalProperties": false
      },
      "TaskTagModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the tag.",
            "nullable": true,
            "example": "Design"
          },
          "color": {
            "type": "string",
            "description": "The color of the tag.",
            "nullable": true,
            "example": "purple"
          }
        },
        "additionalProperties": false,
        "description": "A tag model used for the task.\r\nDo not delete, we need to create copies of the tag model for each entity to avoid issues with Automapper."
      },
      "TaskTagModelForTimeTrackings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the tag.",
            "nullable": true,
            "example": "Design"
          },
          "color": {
            "type": "string",
            "description": "The color of the tag.",
            "nullable": true,
            "example": "purple"
          }
        },
        "additionalProperties": false,
        "description": "A tag model used for the timetrackings TaskModelForTimeTrackings.\r\nDo not delete, we need to create copies of the tag model for each entity to avoid issues with Automapper."
      },
      "TaskTemplate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the task created from this template.",
            "nullable": true,
            "example": "Wireframe layout"
          },
          "description": {
            "type": "string",
            "description": "The description of the task created from this template.",
            "nullable": true,
            "example": "Create the wireframe layout ready to be discussed with the stakeholders"
          },
          "isPrio": {
            "type": "boolean",
            "description": "Whether the task created from this template will be marked as priority.",
            "example": false
          },
          "plannedDuration": {
            "type": "integer",
            "description": "The expected planned workload of the task created from this template, in seconds.",
            "format": "int32",
            "example": 1400
          },
          "relativeStartOn": {
            "type": "integer",
            "description": "The relative start date and time of the task created from this template, in seconds,\r\nfrom the moment of creating the task.",
            "format": "int64",
            "nullable": true
          },
          "relativeDueOn": {
            "type": "integer",
            "description": "The relative due date and time of the task created from this template, in seconds,\r\nfrom the moment of creating the task.",
            "format": "int64",
            "nullable": true
          },
          "typeOfWorkId": {
            "type": "string",
            "description": "The id of the type of work of this task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "assignedRoleId": {
            "type": "string",
            "description": "The id of the assigned role of this task.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "parentId": {
            "type": "string",
            "description": "The id of the parent task template if the task template is a subtask.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "subtaskOrder": {
            "type": "number",
            "description": "The order of the subtask template relative to its parent task template.",
            "format": "double",
            "nullable": true,
            "example": 1
          },
          "laneOrder": {
            "type": "integer",
            "description": "The lane order defines the vertical position in the planner.",
            "format": "int32",
            "nullable": true,
            "example": 2
          },
          "id": {
            "type": "string",
            "description": "The Id of the task template.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "taskType": {
            "$ref": "#/components/schemas/TypeOfWork"
          },
          "taskListTemplate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskListTemplate"
            },
            "description": "The task list templates of the task template.",
            "nullable": true
          },
          "taskDependencyTemplates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskDependencyTemplate"
            },
            "description": "The list of task dependency templates for that task template.",
            "nullable": true
          },
          "assigneeIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The list of assigned users to that task template.",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "The date this task was created.",
            "format": "date-time",
            "example": "2022-03-14T10:12:02.100Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this task was last modified.",
            "format": "date-time",
            "example": "2022-03-25T14:55:30.100Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "order": {
            "type": "number",
            "description": "For internal purposes.",
            "format": "double",
            "nullable": true,
            "example": 4
          },
          "hasAttachments": {
            "type": "boolean",
            "description": "If the task template has attachments."
          },
          "isRecurring": {
            "type": "boolean",
            "description": "If the task is a recurrency template, the flag is true.",
            "example": false
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            },
            "description": "The Custom fields of the task template.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskTemplateTagModel"
            },
            "description": "The list of tags that will be applied to the task when it is created.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaskTemplateForm": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the task created from this template.",
            "nullable": true,
            "example": "Wireframe layout"
          },
          "description": {
            "type": "string",
            "description": "The description of the task created from this template.",
            "nullable": true,
            "example": "Create the wireframe layout ready to be discussed with the stakeholders"
          },
          "isPrio": {
            "type": "boolean",
            "description": "Whether the task created from this template will be marked as priority.",
            "example": false
          },
          "plannedDuration": {
            "type": "integer",
            "description": "The expected planned workload of the task created from this template, in seconds.",
            "format": "int32",
            "example": 1400
          },
          "relativeStartOn": {
            "type": "integer",
            "description": "The relative start date and time of the task created from this template, in seconds,\r\nfrom the moment of creating the task.",
            "format": "int64",
            "nullable": true
          },
          "relativeDueOn": {
            "type": "integer",
            "description": "The relative due date and time of the task created from this template, in seconds,\r\nfrom the moment of creating the task.",
            "format": "int64",
            "nullable": true
          },
          "typeOfWorkId": {
            "type": "string",
            "description": "The id of the type of work of this task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "assignedRoleId": {
            "type": "string",
            "description": "The id of the assigned role of this task.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "parentId": {
            "type": "string",
            "description": "The id of the parent task template if the task template is a subtask.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "subtaskOrder": {
            "type": "number",
            "description": "The order of the subtask template relative to its parent task template.",
            "format": "double",
            "nullable": true,
            "example": 1
          },
          "laneOrder": {
            "type": "integer",
            "description": "The lane order defines the vertical position in the planner.",
            "format": "int32",
            "nullable": true,
            "example": 2
          }
        },
        "additionalProperties": false
      },
      "TaskTemplateTagModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the tag.",
            "nullable": true,
            "example": "Design"
          },
          "color": {
            "type": "string",
            "description": "The color of the tag.",
            "nullable": true,
            "example": "purple"
          }
        },
        "additionalProperties": false,
        "description": "A tag model used for the task template.\r\nDo not delete, we need to create copies of the tag model for each entity to avoid issues with Automapper."
      },
      "TaskTemplateToTaskListTemplate": {
        "type": "object",
        "properties": {
          "taskTemplateId": {
            "type": "string",
            "description": "The id of the task template.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "order": {
            "type": "number",
            "description": "The order of the task template, unique within the task list template.",
            "format": "double",
            "nullable": true,
            "example": 5
          }
        },
        "additionalProperties": false
      },
      "TaskToTaskList": {
        "required": [
          "taskId"
        ],
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "description": "The task id added to the list.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "order": {
            "type": "number",
            "description": "The order of the task in the list.",
            "format": "double",
            "nullable": true,
            "example": 5
          }
        },
        "additionalProperties": false
      },
      "TaskView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the task view.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isShared": {
            "type": "boolean",
            "description": "Whether this task view is shared within the workspace.",
            "example": true
          },
          "filter": {
            "type": "string",
            "description": "The filter query that is applied to the tasks results.\r\nThe syntax follows the normal filter coventions that can be used on GET routes.",
            "nullable": true,
            "example": "(project/company ne null)"
          },
          "filterSettings": {
            "type": "string",
            "description": "The filter settings to display.",
            "nullable": true,
            "example": "(json data representing the filter settings. Too long to show in doc)"
          },
          "name": {
            "type": "string",
            "description": "The name of the task view.",
            "nullable": true,
            "example": "Projects with defined company"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this task view was created.",
            "format": "date-time",
            "example": "2022-03-10T16:03:49.100Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this task view.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this task view was last modified.",
            "format": "date-time",
            "example": "2022-03-15T16:55:00.100Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this task view.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "TaskViewForm": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "description": "The filter query that is applied to the tasks results.\r\nThe syntax follows the normal filter conventions that can be used on GET routes.",
            "nullable": true,
            "example": "(project/company ne null)"
          },
          "filterSettings": {
            "type": "string",
            "description": "The filter settings to display.",
            "nullable": true,
            "example": "(json data representing the filter settings. Too long to show in doc)"
          },
          "name": {
            "type": "string",
            "description": "The name of the task view.",
            "nullable": true,
            "example": "Projects with defined company"
          },
          "isShared": {
            "type": "boolean",
            "description": "If the taskview is shared or not.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "TaskViewPutForm": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "string",
            "description": "The filter query that is applied to the tasks results.\r\nThe syntax follows the normal filter conventions that can be used on GET routes.",
            "nullable": true,
            "example": "(project/company ne null)"
          },
          "filterSettings": {
            "type": "string",
            "description": "The filter settings to display.",
            "nullable": true,
            "example": "(json data representing the filter settings. Too long to show in doc)"
          },
          "name": {
            "type": "string",
            "description": "The name of the task view.",
            "nullable": true,
            "example": "Projects with defined company"
          },
          "isShared": {
            "type": "boolean",
            "description": "If the taskview is shared or not.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "TaskViewSubscriptionForm": {
        "type": "object",
        "properties": {
          "taskViewId": {
            "type": "string",
            "description": "The id of the task view the user subscribes to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "TasksChangeBaseTypesForm": {
        "required": [
          "baseType",
          "entityId",
          "taskIds"
        ],
        "type": "object",
        "properties": {
          "baseType": {
            "minLength": 1,
            "enum": [
              "private",
              "projecttask"
            ],
            "type": "string",
            "description": "The type the tasks should be migrated to.\r\nPossible values are 'private' or 'projecttask'.",
            "example": "private"
          },
          "entityId": {
            "type": "string",
            "description": "The id of the entity.\r\nThe id of the project if the base type is 'projecttask'\r\nor the id of the user if the base type is 'private'.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "taskIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The list of task ids."
          }
        },
        "additionalProperties": false
      },
      "TasksChangeTypesForm": {
        "required": [
          "taskIds",
          "typeOfWorkId"
        ],
        "type": "object",
        "properties": {
          "typeOfWorkId": {
            "type": "string",
            "description": "The id of the task type.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "changeTimeEntries": {
            "type": "boolean",
            "description": "Whether the related time entries should be moved to the same type of work."
          },
          "taskIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The list of task ids.",
            "example": [
              "123e4567-e89b-12d3-a456-426614174000"
            ]
          }
        },
        "additionalProperties": false
      },
      "TasksDeleteForm": {
        "required": [
          "taskIds"
        ],
        "type": "object",
        "properties": {
          "taskIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of tasks to be deleted.",
            "example": [
              "123e4567-e89b-12d3-a456-426614174000"
            ]
          },
          "deleteTimeTrackings": {
            "type": "boolean",
            "description": "Set to true to also delete the related time trackings.\r\nIf it is set to false, the related time trackings will still be there, but\r\nthe project and task reference will be cleared.\r\nThis will also happen if no request body is present.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "TasksToPlan": {
        "type": "object",
        "properties": {
          "taskViewId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "presetFilter": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TasksToPlanForm": {
        "type": "object",
        "properties": {
          "taskViewId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "presetFilter": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Team": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The team name.",
            "example": "Designers"
          },
          "icon": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The icon of the team. Optional. Possible values: 'attach_money', 'poll', 'golf_course', 'all_inclusive', 'portrait',\r\n'timeline', 'transform', 'description', 'folder', 'computer', 'web', 'phone_iphone', 'cloud', 'local_movies',\r\n'shopping_cart', 'brush', 'image', 'camera_alt', 'movie_creation', 'public', 'whatshot', 'extension', 'explore',\r\n'lock', 'settings', 'stars', 'store', 'school', 'local_bar', 'question_answer', 'favorite', 'work', 'flight_takeoff',\r\n'map', 'local_dining'.",
            "nullable": true,
            "example": "image"
          },
          "color": {
            "maxLength": 14,
            "minLength": 0,
            "type": "string",
            "description": "The color of the team. Optional. Possible values: 'red', 'coral', 'yellow', 'green', 'teal', 'arctic', 'blue', 'azure',\r\n'purple', 'violet'.",
            "nullable": true,
            "example": "purple"
          },
          "id": {
            "type": "string",
            "description": "The id of the team.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this team was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this team.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this team was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last updated this team.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ids of the users in the team.",
            "nullable": true
          },
          "projectIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ids of the projects in the team.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The team GET model."
      },
      "TeamForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The team name.",
            "example": "Designers"
          },
          "icon": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The icon of the team. Optional. Possible values: 'attach_money', 'poll', 'golf_course', 'all_inclusive', 'portrait',\r\n'timeline', 'transform', 'description', 'folder', 'computer', 'web', 'phone_iphone', 'cloud', 'local_movies',\r\n'shopping_cart', 'brush', 'image', 'camera_alt', 'movie_creation', 'public', 'whatshot', 'extension', 'explore',\r\n'lock', 'settings', 'stars', 'store', 'school', 'local_bar', 'question_answer', 'favorite', 'work', 'flight_takeoff',\r\n'map', 'local_dining'.",
            "nullable": true,
            "example": "image"
          },
          "color": {
            "maxLength": 14,
            "minLength": 0,
            "type": "string",
            "description": "The color of the team. Optional. Possible values: 'red', 'coral', 'yellow', 'green', 'teal', 'arctic', 'blue', 'azure',\r\n'purple', 'violet'.",
            "nullable": true,
            "example": "purple"
          }
        },
        "additionalProperties": false,
        "description": "The team POST/PUT model."
      },
      "TeamModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the team.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the team.",
            "nullable": true,
            "example": "Designers"
          },
          "icon": {
            "type": "string",
            "description": "The icon which is assigned to the team.",
            "nullable": true,
            "example": "paintbrush"
          },
          "color": {
            "type": "string",
            "description": "The color of the team.",
            "nullable": true,
            "example": "purple"
          }
        },
        "additionalProperties": false
      },
      "TimeBooking": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user this time booking is for.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectId": {
            "type": "string",
            "description": "(optional) The id of the project this time booking is for.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "startDate": {
            "type": "string",
            "description": "The start date of the time booking.",
            "format": "date",
            "example": "2024-05-15"
          },
          "endDate": {
            "type": "string",
            "description": "The end date of the time booking.",
            "format": "date",
            "example": "2024-05-18"
          },
          "duration": {
            "type": "integer",
            "description": "The planned duration, expressed in seconds, of this time booking.",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "description": "The optional description for this time booking.",
            "nullable": true,
            "example": "Blocker for a new project"
          },
          "laneOrder": {
            "type": "integer",
            "description": "The order in which this object should be shown in the timeline (row number).\r\nUsed by the awork web app.",
            "format": "int32"
          },
          "isAnonymized": {
            "type": "boolean",
            "description": "This will be true if the user doesn't have access to the project.\r\nIn that case the description will be shadowed.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeBookingForm": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The id of the user this time booking is for.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectId": {
            "type": "string",
            "description": "(optional) The id of the project this time booking is for.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "startDate": {
            "type": "string",
            "description": "The start date of this time booking.",
            "format": "date",
            "example": "2022-03-01"
          },
          "endDate": {
            "type": "string",
            "description": "The end date and time of this time booking.",
            "format": "date",
            "example": "2022-03-02"
          },
          "duration": {
            "type": "integer",
            "description": "The duration (in seconds) of this time booking.",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "description": "The optional name/description for this time booking.",
            "nullable": true
          },
          "laneOrder": {
            "type": "integer",
            "description": "The order in which this object should be shown in the timeline (row number).\r\nThis value is used by the awork web app.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TimeEntryBatchOperationForm": {
        "required": [
          "timeEntryIds"
        ],
        "type": "object",
        "properties": {
          "timeEntryIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The list of time entry ids to perform the batch operation on."
          },
          "newTypeOfWorkId": {
            "type": "string",
            "description": "The id of the new type of work. Required for operation 'setTypeOfWork'.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isBillable": {
            "type": "boolean",
            "description": "Set the billable flag for time entries. Required for operation 'setIsBillable'.",
            "nullable": true
          },
          "isBilled": {
            "type": "boolean",
            "description": "Set the billed flag for time entries. Required for operation 'setIsBilled'.",
            "nullable": true
          },
          "newUserId": {
            "type": "string",
            "description": "The id of the new user to assign the time entries to. Required for operation 'setUser'.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "newProjectId": {
            "type": "string",
            "description": "The id of the new project to assign the time entries to. Required for operation 'setProject'.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "newTaskId": {
            "type": "string",
            "description": "The id of the new task to assign the time entries to. Required for operation 'setTask'.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "TimeEntryPostForm": {
        "required": [
          "timezone",
          "typeOfWorkId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "isBillable": {
            "type": "boolean",
            "description": "Whether the time tracking is billable or not.",
            "example": true
          },
          "isBilled": {
            "type": "boolean",
            "description": "Whether the time tracking is billed or not.",
            "example": false
          },
          "taskId": {
            "type": "string",
            "description": "The id of the task.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "note": {
            "type": "string",
            "description": "The note of the time tracking.",
            "nullable": true,
            "example": "I created a first draft for the new sitemap"
          },
          "startDateUtc": {
            "type": "string",
            "description": "The date (in UTC) when the time tracking was started.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T00:00:00Z"
          },
          "startTimeUtc": {
            "type": "string",
            "description": "The time (in UTC) when the time tracking was started.",
            "nullable": true,
            "example": "09:21:00"
          },
          "endDateUtc": {
            "type": "string",
            "description": "The date (in UTC) when the time tracking was stopped.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T18:21:05Z"
          },
          "endTimeUtc": {
            "type": "string",
            "description": "The time (in UTC) when the time tracking was stopped.\r\nRequired when the time tracking has already been completed and Duration has not been set.",
            "nullable": true,
            "example": "11:45:00"
          },
          "startDateLocal": {
            "type": "string",
            "description": "The date (in Local) when the time tracking was started.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T00:00:00"
          },
          "startTimeLocal": {
            "type": "string",
            "description": "The time (in Local) when the time tracking was started.",
            "nullable": true,
            "example": "10:21:00"
          },
          "endDateLocal": {
            "type": "string",
            "description": "The date (in Local) when the time tracking was stopped.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T17:21:05"
          },
          "endTimeLocal": {
            "type": "string",
            "description": "The time (in Local) when the time tracking was stopped.\r\nRequired when the time tracking has already been completed and Duration has not been set.",
            "nullable": true,
            "example": "12:45:00"
          },
          "timezone": {
            "minLength": 1,
            "type": "string",
            "description": "The original timezone of the time tracking.\r\nThe format of the timezone is the IANA standard.",
            "example": "Europe/Berlin"
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the time tracking in seconds.\r\nRequired when the time tracking has already been completed and EndTime has not been set.",
            "format": "int32",
            "nullable": true,
            "example": 8635
          },
          "breakDuration": {
            "type": "integer",
            "description": "The duration of the break in seconds.\r\nCannot be set via API.",
            "format": "int32",
            "nullable": true
          },
          "typeOfWorkId": {
            "type": "string",
            "description": "The id of the type of work.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "TimeFrameModel": {
        "type": "object",
        "properties": {
          "startOn": {
            "type": "string",
            "format": "date-time"
          },
          "dueOn": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "TimeReport": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the time report.",
            "nullable": true,
            "example": "Project report for March 2022"
          },
          "shared": {
            "type": "boolean",
            "description": "Whether the time report is shared.",
            "example": true
          },
          "dateMode": {
            "type": "string",
            "description": "The date mode of the time report.\r\nCan be: \"today\", \"yesterday\", \"selectDate\",\r\n\"selectWeek\", \"currentWeek\", \"lastWeek\",\r\n\"selectMonth\", \"currentMonth\", \"lastMonth\",\r\n\"selectQuarter\", \"currentQuarter\", \"lastQuarter\",\r\n\"selectYear\", \"currentYear\", \"lastYear\",\r\n\"customRange\", \"noFilter\".",
            "nullable": true,
            "example": "lastMonth"
          },
          "startOn": {
            "type": "string",
            "description": "The start date time of the report\r\nwhen DateMode is \"customRange\".",
            "format": "date-time",
            "nullable": true,
            "example": null
          },
          "endOn": {
            "type": "string",
            "description": "The end date time of the time report.\r\nwhen DateMode is \"customRange\".",
            "format": "date-time",
            "nullable": true,
            "example": null
          },
          "filter": {
            "type": "string",
            "description": "The generated filter query of the time report.",
            "nullable": true,
            "example": "projectId eq guid'b870a84e-c7fa-e711-80c2-00155d3163ca'"
          },
          "chartType": {
            "type": "string",
            "description": "The actual chart type of the time report.\r\nCan be: \"group\" or \"time\".",
            "nullable": true,
            "example": "group"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project of the time report.\r\nUsed for the pdf reports.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "companyId": {
            "type": "string",
            "description": "The id of the company of the time report.\r\nUsed for the pdf reports.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "sumBy": {
            "type": "string",
            "description": "Summarises the values by the sum of this property.",
            "nullable": true,
            "example": "UserId"
          },
          "sortBy": {
            "type": "string",
            "description": "Sorts the values by this property.",
            "nullable": true,
            "example": "CreatedOn"
          },
          "sortByOrder": {
            "type": "string",
            "description": "The way how to sort the data.\r\nCan be: \"asc\", desc\".",
            "nullable": true,
            "example": "asc"
          },
          "roundBy": {
            "type": "string",
            "description": "Rounding method of the time report.\r\nCan be:\r\n\"nearQuarter\", \"nearHalf\", \"nearHour\",\r\n\"upQuarter\", \"upHalf\", \"upHour\".",
            "nullable": true,
            "example": "upHour"
          },
          "groupBy": {
            "type": "string",
            "description": "Group the values by property.",
            "nullable": true,
            "example": null
          },
          "sortColumn": {
            "type": "string",
            "description": "Sort the values of the time report by a column.",
            "nullable": true,
            "example": null
          },
          "availableColumns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of shown Columns in the time report.\r\nCan be: \"status\", \"duration\", \"task\", \"timeTrackingNote\", \"typeOfWork\",\r\n\"project\", \"date\", \"time\", \"user\", \"client\", \"projectType\", \"projectRole\",\r\n\"plannedDuration\".",
            "nullable": true,
            "example": [
              "duration",
              "user"
            ]
          },
          "billingStatuses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter of bill satuses of the time report.\r\nCan be: \"billed\", \"notBilled\", \"notBillable\".",
            "nullable": true,
            "example": [
              "notBilled"
            ]
          },
          "note": {
            "type": "string",
            "description": "Filter time entries by note.",
            "nullable": true,
            "example": null
          },
          "usersFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter time entries by users.",
            "nullable": true
          },
          "projectsFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter time entries by projects.",
            "nullable": true
          },
          "noProjectFilter": {
            "type": "boolean",
            "description": "Filter to show also time entries without a project.",
            "nullable": true,
            "example": null
          },
          "projectCompaniesFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter time entries by projects of the companies.",
            "nullable": true
          },
          "projectTypesFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter time entries by projects of the type.",
            "nullable": true
          },
          "projectStatusesNameFilter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter time entries by projects with status name.",
            "nullable": true
          },
          "projectStatusTypesFilter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter time entries by projects with status of type.",
            "nullable": true
          },
          "projectTeamsFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of teams, to the filter the projects for.",
            "nullable": true
          },
          "userTeamsFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter for the teams to filter the users.",
            "nullable": true
          },
          "taskTagsModelFilter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultTagModel"
            },
            "description": "Filter time entries by the tags of the task.",
            "nullable": true
          },
          "projectTagsModelFilter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultTagModel"
            },
            "description": "Filter time entries by the tags of the project.",
            "nullable": true
          },
          "userTagsModelFilter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultTagModel"
            },
            "description": "Filter time entries by the tags of the users.",
            "nullable": true
          },
          "typesOfWorkFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Group the time report by the type of works.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The id of the time report.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "user": {
            "$ref": "#/components/schemas/NestedUserModel"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this time report was updated.",
            "format": "date-time"
          },
          "resourceVersion": {
            "type": "integer",
            "description": "The version of the entity, updated on every modification, to the ticks in UTC.\r\nNot identical to UpdatedOn.",
            "format": "int64",
            "readOnly": true,
            "example": 637825154598057900
          }
        },
        "additionalProperties": false
      },
      "TimeReportForm": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the time report.",
            "nullable": true,
            "example": "Project report for March 2022"
          },
          "shared": {
            "type": "boolean",
            "description": "Whether the time report is shared.",
            "example": true
          },
          "dateMode": {
            "type": "string",
            "description": "The date mode of the time report.\r\nCan be: \"today\", \"yesterday\", \"selectDate\",\r\n\"selectWeek\", \"currentWeek\", \"lastWeek\",\r\n\"selectMonth\", \"currentMonth\", \"lastMonth\",\r\n\"selectQuarter\", \"currentQuarter\", \"lastQuarter\",\r\n\"selectYear\", \"currentYear\", \"lastYear\",\r\n\"customRange\", \"noFilter\".",
            "nullable": true,
            "example": "lastMonth"
          },
          "startOn": {
            "type": "string",
            "description": "The start date time of the report\r\nwhen DateMode is \"customRange\".",
            "format": "date-time",
            "nullable": true,
            "example": null
          },
          "endOn": {
            "type": "string",
            "description": "The end date time of the time report.\r\nwhen DateMode is \"customRange\".",
            "format": "date-time",
            "nullable": true,
            "example": null
          },
          "filter": {
            "type": "string",
            "description": "The generated filter query of the time report.",
            "nullable": true,
            "example": "projectId eq guid'b870a84e-c7fa-e711-80c2-00155d3163ca'"
          },
          "chartType": {
            "type": "string",
            "description": "The actual chart type of the time report.\r\nCan be: \"group\" or \"time\".",
            "nullable": true,
            "example": "group"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project of the time report.\r\nUsed for the pdf reports.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "companyId": {
            "type": "string",
            "description": "The id of the company of the time report.\r\nUsed for the pdf reports.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "sumBy": {
            "type": "string",
            "description": "Summarises the values by the sum of this property.",
            "nullable": true,
            "example": "UserId"
          },
          "sortBy": {
            "type": "string",
            "description": "Sorts the values by this property.",
            "nullable": true,
            "example": "CreatedOn"
          },
          "sortByOrder": {
            "type": "string",
            "description": "The way how to sort the data.\r\nCan be: \"asc\", desc\".",
            "nullable": true,
            "example": "asc"
          },
          "roundBy": {
            "type": "string",
            "description": "Rounding method of the time report.\r\nCan be:\r\n\"nearQuarter\", \"nearHalf\", \"nearHour\",\r\n\"upQuarter\", \"upHalf\", \"upHour\".",
            "nullable": true,
            "example": "upHour"
          },
          "groupBy": {
            "type": "string",
            "description": "Group the values by property.",
            "nullable": true,
            "example": null
          },
          "sortColumn": {
            "type": "string",
            "description": "Sort the values of the time report by a column.",
            "nullable": true,
            "example": null
          },
          "availableColumns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of shown Columns in the time report.\r\nCan be: \"status\", \"duration\", \"task\", \"timeTrackingNote\", \"typeOfWork\",\r\n\"project\", \"date\", \"time\", \"user\", \"client\", \"projectType\", \"projectRole\",\r\n\"plannedDuration\".",
            "nullable": true,
            "example": [
              "duration",
              "user"
            ]
          },
          "billingStatuses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter of bill satuses of the time report.\r\nCan be: \"billed\", \"notBilled\", \"notBillable\".",
            "nullable": true,
            "example": [
              "notBilled"
            ]
          },
          "note": {
            "type": "string",
            "description": "Filter time entries by note.",
            "nullable": true,
            "example": null
          },
          "usersFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter time entries by users.",
            "nullable": true
          },
          "projectsFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter time entries by projects.",
            "nullable": true
          },
          "noProjectFilter": {
            "type": "boolean",
            "description": "Filter to show also time entries without a project.",
            "nullable": true,
            "example": null
          },
          "projectCompaniesFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter time entries by projects of the companies.",
            "nullable": true
          },
          "projectTypesFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter time entries by projects of the type.",
            "nullable": true
          },
          "projectStatusesNameFilter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter time entries by projects with status name.",
            "nullable": true
          },
          "projectStatusTypesFilter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter time entries by projects with status of type.",
            "nullable": true
          },
          "projectTeamsFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of teams, to the filter the projects for.",
            "nullable": true
          },
          "userTeamsFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter for the teams to filter the users.",
            "nullable": true
          },
          "taskTagsModelFilter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultTagModel"
            },
            "description": "Filter time entries by the tags of the task.",
            "nullable": true
          },
          "projectTagsModelFilter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultTagModel"
            },
            "description": "Filter time entries by the tags of the project.",
            "nullable": true
          },
          "userTagsModelFilter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultTagModel"
            },
            "description": "Filter time entries by the tags of the users.",
            "nullable": true
          },
          "typesOfWorkFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Group the time report by the type of works.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeTracking": {
        "required": [
          "timezone",
          "typeOfWorkId"
        ],
        "type": "object",
        "properties": {
          "isBillable": {
            "type": "boolean",
            "description": "Whether the time tracking is billable or not.",
            "example": true
          },
          "isBilled": {
            "type": "boolean",
            "description": "Whether the time tracking is billed or not.",
            "example": false
          },
          "taskId": {
            "type": "string",
            "description": "The id of the task.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "note": {
            "type": "string",
            "description": "The note of the time tracking.",
            "nullable": true,
            "example": "I created a first draft for the new sitemap"
          },
          "startDateUtc": {
            "type": "string",
            "description": "The date (in UTC) when the time tracking was started.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T00:00:00Z"
          },
          "startTimeUtc": {
            "type": "string",
            "description": "The time (in UTC) when the time tracking was started.",
            "nullable": true,
            "example": "09:21:00"
          },
          "endDateUtc": {
            "type": "string",
            "description": "The date (in UTC) when the time tracking was stopped.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T18:21:05Z"
          },
          "endTimeUtc": {
            "type": "string",
            "description": "The time (in UTC) when the time tracking was stopped.\r\nRequired when the time tracking has already been completed and Duration has not been set.",
            "nullable": true,
            "example": "11:45:00"
          },
          "startDateLocal": {
            "type": "string",
            "description": "The date (in Local) when the time tracking was started.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T00:00:00"
          },
          "startTimeLocal": {
            "type": "string",
            "description": "The time (in Local) when the time tracking was started.",
            "nullable": true,
            "example": "10:21:00"
          },
          "endDateLocal": {
            "type": "string",
            "description": "The date (in Local) when the time tracking was stopped.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T17:21:05"
          },
          "endTimeLocal": {
            "type": "string",
            "description": "The time (in Local) when the time tracking was stopped.\r\nRequired when the time tracking has already been completed and Duration has not been set.",
            "nullable": true,
            "example": "12:45:00"
          },
          "timezone": {
            "minLength": 1,
            "type": "string",
            "description": "The original timezone of the time tracking.\r\nThe format of the timezone is the IANA standard.",
            "example": "Europe/Berlin"
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the time tracking in seconds.\r\nRequired when the time tracking has already been completed and EndTime has not been set.",
            "format": "int32",
            "nullable": true,
            "example": 8635
          },
          "breakDuration": {
            "type": "integer",
            "description": "The duration of the break in seconds.\r\nCannot be set via API.",
            "format": "int32",
            "nullable": true
          },
          "typeOfWorkId": {
            "type": "string",
            "description": "The id of the type of work.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user.\r\nCan be null if the user was deleted.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "id": {
            "type": "string",
            "description": "The id of the time tracking.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this time tracking.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this time tracking was created.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last updated this time tracking.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this time tracking was last modified.",
            "format": "date-time"
          },
          "typeOfWork": {
            "$ref": "#/components/schemas/NestedTypeModel"
          },
          "user": {
            "$ref": "#/components/schemas/UserModelForTimeTrackings"
          },
          "task": {
            "$ref": "#/components/schemas/TaskModelForTimeTrackings"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectModelForTimeTrackings"
          },
          "breaks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Break"
            },
            "description": "The breaks of the time tracking.",
            "nullable": true
          },
          "resourceVersion": {
            "type": "integer",
            "description": "The version of the entity, updated on every modification, to the ticks in UTC.\r\nNot identical to UpdatedOn.",
            "format": "int64",
            "readOnly": true,
            "example": 637825154598057900
          },
          "isExternal": {
            "type": "boolean",
            "description": "True if this entity is coming from an external workspace (awork Connect).",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "The time tracking model."
      },
      "TimeTrackingPutForm": {
        "required": [
          "timezone",
          "typeOfWorkId"
        ],
        "type": "object",
        "properties": {
          "isBillable": {
            "type": "boolean",
            "description": "Whether the time tracking is billable or not.",
            "example": true
          },
          "isBilled": {
            "type": "boolean",
            "description": "Whether the time tracking is billed or not.",
            "example": false
          },
          "taskId": {
            "type": "string",
            "description": "The id of the task.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "note": {
            "type": "string",
            "description": "The note of the time tracking.",
            "nullable": true,
            "example": "I created a first draft for the new sitemap"
          },
          "startDateUtc": {
            "type": "string",
            "description": "The date (in UTC) when the time tracking was started.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T00:00:00Z"
          },
          "startTimeUtc": {
            "type": "string",
            "description": "The time (in UTC) when the time tracking was started.",
            "nullable": true,
            "example": "09:21:00"
          },
          "endDateUtc": {
            "type": "string",
            "description": "The date (in UTC) when the time tracking was stopped.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T18:21:05Z"
          },
          "endTimeUtc": {
            "type": "string",
            "description": "The time (in UTC) when the time tracking was stopped.\r\nRequired when the time tracking has already been completed and Duration has not been set.",
            "nullable": true,
            "example": "11:45:00"
          },
          "startDateLocal": {
            "type": "string",
            "description": "The date (in Local) when the time tracking was started.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T00:00:00"
          },
          "startTimeLocal": {
            "type": "string",
            "description": "The time (in Local) when the time tracking was started.",
            "nullable": true,
            "example": "10:21:00"
          },
          "endDateLocal": {
            "type": "string",
            "description": "The date (in Local) when the time tracking was stopped.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T17:21:05"
          },
          "endTimeLocal": {
            "type": "string",
            "description": "The time (in Local) when the time tracking was stopped.\r\nRequired when the time tracking has already been completed and Duration has not been set.",
            "nullable": true,
            "example": "12:45:00"
          },
          "timezone": {
            "minLength": 1,
            "type": "string",
            "description": "The original timezone of the time tracking.\r\nThe format of the timezone is the IANA standard.",
            "example": "Europe/Berlin"
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the time tracking in seconds.\r\nRequired when the time tracking has already been completed and EndTime has not been set.",
            "format": "int32",
            "nullable": true,
            "example": 8635
          },
          "breakDuration": {
            "type": "integer",
            "description": "The duration of the break in seconds.\r\nCannot be set via API.",
            "format": "int32",
            "nullable": true
          },
          "typeOfWorkId": {
            "type": "string",
            "description": "The id of the type of work.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user.\r\nCan be null if the user was deleted.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "TimeTrackingSetting": {
        "required": [
          "enabled",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of the setting.",
            "example": "prevent-on-done-projects"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the setting is enabled.",
            "example": true
          },
          "dayCount": {
            "type": "integer",
            "description": "The day count required for the setting 'allow-on-past-days'.",
            "format": "int32",
            "nullable": true,
            "example": null
          },
          "workspaceId": {
            "type": "string",
            "description": "The id of the workspace the setting belongs to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "TimeTrackingSettingForm": {
        "required": [
          "enabled",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of the setting.",
            "example": "prevent-on-done-projects"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the setting is enabled.",
            "example": true
          },
          "dayCount": {
            "type": "integer",
            "description": "The day count required for the setting 'allow-on-past-days'.",
            "format": "int32",
            "nullable": true,
            "example": null
          }
        },
        "additionalProperties": false
      },
      "TimeTrackingSuggestion": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The suggested name for the time entry.",
            "nullable": true,
            "example": "Website Design"
          },
          "type": {
            "type": "string",
            "description": "The type of the suggestion.\r\nContains the reason why awork suggests this time entry.",
            "nullable": true,
            "example": "worked_on_project"
          },
          "score": {
            "type": "number",
            "description": "The score of the suggestion.\r\nThe higher it is, the more likely the suggestion is.\r\n1 is the highest.",
            "format": "float",
            "example": 1
          },
          "start": {
            "type": "string",
            "description": "The suggested start of the time entry, in UTC.",
            "format": "date-time",
            "example": "2022-03-01T11:34:05Z"
          },
          "end": {
            "type": "string",
            "description": "The suggested end of the time entry, in UTC.",
            "format": "date-time",
            "example": "2022-03-01T14:03:00Z"
          },
          "isBillable": {
            "type": "boolean",
            "description": "Whether the task of this suggested time entry is billable.\r\nTypically true when the task belongs to a project that is assigned to a company.",
            "example": true
          },
          "duration": {
            "type": "integer",
            "description": "The suggested duration of the time entry, in seconds.",
            "format": "int32",
            "nullable": true,
            "example": 8935
          },
          "taskId": {
            "type": "string",
            "description": "The id of the suggested task for the time entry.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the suggested project for the time entry.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "typeOfWorkId": {
            "type": "string",
            "description": "The id of the suggested type of work for the time entry.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "TypeOfWork": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the task type.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the task type.",
            "nullable": true,
            "example": "Sales Work"
          },
          "description": {
            "type": "string",
            "description": "A short (max. 140 characters) description of the task type.",
            "nullable": true,
            "example": "Tasks related to sales dept."
          },
          "icon": {
            "type": "string",
            "description": "The icon associated with this task type.",
            "nullable": true,
            "example": "attach_money"
          },
          "isArchived": {
            "type": "boolean",
            "description": "Whether the type of work has been archived."
          },
          "createdOn": {
            "type": "string",
            "description": "The date this entity was created.",
            "format": "date-time",
            "example": "2022-03-10T16:25:09.100Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this entity was last modified.",
            "format": "date-time",
            "example": "2022-03-10T18:55:00.500Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "The task type model."
      },
      "TypeOfWorkForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The names of the type of work.",
            "example": "Website Design"
          },
          "description": {
            "type": "string",
            "description": "A short description of the type of work.",
            "nullable": true,
            "example": "Creative Website Design"
          },
          "icon": {
            "type": "string",
            "description": "The icon associated with this task type.",
            "nullable": true,
            "example": "attach_money"
          }
        },
        "additionalProperties": false,
        "description": "The PUT task type model."
      },
      "UnlinkCustomFieldDefinitionForm": {
        "required": [
          "customFieldDefinitionId"
        ],
        "type": "object",
        "properties": {
          "customFieldDefinitionId": {
            "type": "string",
            "description": "The id of the custom field definition.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "Represents a form for unlinking a custom field definition."
      },
      "UpdateCalculatedSQLValuesForm": {
        "type": "object",
        "properties": {
          "updateUsers": {
            "type": "boolean"
          },
          "updateCompanies": {
            "type": "boolean"
          },
          "updateProjects": {
            "type": "boolean"
          },
          "updateTasks": {
            "type": "boolean"
          },
          "updateTaskLists": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UpdateOrderForm": {
        "type": "object",
        "properties": {
          "order": {
            "type": "number",
            "description": "The order of the list.",
            "format": "double",
            "nullable": true,
            "example": 5
          }
        },
        "additionalProperties": false
      },
      "UpdateProjectRoleForm": {
        "required": [
          "projectRoleId"
        ],
        "type": "object",
        "properties": {
          "projectRoleId": {
            "type": "string",
            "description": "The role of the invited user in the project.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "UpdateProjectStatusOrderForm": {
        "required": [
          "projectStatusId"
        ],
        "type": "object",
        "properties": {
          "projectStatusId": {
            "type": "string",
            "description": "The id of the project status.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "order": {
            "type": "integer",
            "description": "The order value which determines the position of the project status\r\nin the flow of the project type.\r\nOnly accepts 0 and positive values.\r\nFor independent statuses without successor and predecessor\r\nthis value is set to null.",
            "format": "int32",
            "nullable": true,
            "example": 2
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The firstname of the user.",
            "nullable": true,
            "example": "Carla"
          },
          "lastName": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The lastname of the user.",
            "nullable": true,
            "example": "Creative"
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the user.",
            "format": "date-time",
            "nullable": true,
            "example": "1998-04-19T00:00:000Z"
          },
          "gender": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The gender of the user.",
            "nullable": true,
            "example": "female"
          },
          "title": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The title of the user.",
            "nullable": true,
            "example": "Miss"
          },
          "position": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The position of the user.",
            "nullable": true
          },
          "language": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The language preference of the user in ISO 639-1 format.",
            "nullable": true,
            "example": "en-GB"
          },
          "id": {
            "type": "string",
            "description": "The id of the user.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this user was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this user.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date when this user was last updated.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isArchived": {
            "type": "boolean",
            "description": "Whether this user is archived.\r\nArchived users are automatically inactive and only exist for reference purposes.",
            "example": false
          },
          "isDeactivated": {
            "type": "boolean",
            "description": "Whether the user has been deactivated.",
            "example": false
          },
          "deactivatedOn": {
            "type": "string",
            "description": "The date the user was deactivated.",
            "format": "date-time",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the user has uploaded a profile image.",
            "example": true
          },
          "shouldMigrateToConnect": {
            "type": "boolean",
            "description": "Whether the user should be migrated to Connect."
          },
          "userContactInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactInfo"
            },
            "description": "The contact information assigned to this user.",
            "nullable": true
          },
          "resourceVersion": {
            "type": "integer",
            "description": "The version of the entity, updated on every modification, to the ticks in UTC.\r\nNot identical to UpdatedOn.",
            "format": "int64",
            "readOnly": true,
            "example": 637825154598057900
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTagModel"
            },
            "description": "The tags of this user.",
            "nullable": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamModel"
            },
            "description": "The teams the user is associated to.",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "True if this entity is coming from an external workspace (awork Connect).",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "The user model."
      },
      "UserAndWorkspace": {
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The firstname of the user.",
            "nullable": true,
            "example": "Carla"
          },
          "lastName": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The lastname of the user.",
            "nullable": true,
            "example": "Creative"
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the user.",
            "format": "date-time",
            "nullable": true,
            "example": "1998-04-19T00:00:000Z"
          },
          "gender": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The gender of the user.",
            "nullable": true,
            "example": "female"
          },
          "title": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The title of the user.",
            "nullable": true,
            "example": "Miss"
          },
          "position": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The position of the user.",
            "nullable": true
          },
          "language": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The language preference of the user in ISO 639-1 format.",
            "nullable": true,
            "example": "en-GB"
          },
          "id": {
            "type": "string",
            "description": "The id of the user.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this user was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this user.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date when this user was last updated.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isArchived": {
            "type": "boolean",
            "description": "Whether this user is archived.\r\nArchived users are automatically inactive and only exist for reference purposes.",
            "example": false
          },
          "isDeactivated": {
            "type": "boolean",
            "description": "Whether the user has been deactivated.",
            "example": false
          },
          "deactivatedOn": {
            "type": "string",
            "description": "The date the user was deactivated.",
            "format": "date-time",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the user has uploaded a profile image.",
            "example": true
          },
          "shouldMigrateToConnect": {
            "type": "boolean",
            "description": "Whether the user should be migrated to Connect."
          },
          "userContactInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactInfo"
            },
            "description": "The contact information assigned to this user.",
            "nullable": true
          },
          "resourceVersion": {
            "type": "integer",
            "description": "The version of the entity, updated on every modification, to the ticks in UTC.\r\nNot identical to UpdatedOn.",
            "format": "int64",
            "readOnly": true,
            "example": 637825154598057900
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTagModel"
            },
            "description": "The tags of this user.",
            "nullable": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamModel"
            },
            "description": "The teams the user is associated to.",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "True if this entity is coming from an external workspace (awork Connect).",
            "example": true
          },
          "accountId": {
            "type": "string",
            "description": "The account id of the user.\r\nOnly used internally.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspace": {
            "$ref": "#/components/schemas/WorkspaceOfUser"
          }
        },
        "additionalProperties": false,
        "description": "The user and workspace model."
      },
      "UserCapacity": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The id of the user this capacity belongs to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "weeklyCapacity": {
            "$ref": "#/components/schemas/UserWeeklyCapacity"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this user capacity was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this user capacity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date when this user capacity was last updated.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the user capacity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "capacityPerWeek": {
            "type": "integer",
            "description": "The capacity of the user per week, in seconds.",
            "format": "int32",
            "readOnly": true,
            "example": 126000,
            "deprecated": true
          }
        },
        "additionalProperties": false,
        "description": "The user capacity model."
      },
      "UserCapacityForm": {
        "type": "object",
        "properties": {
          "capacityPerWeek": {
            "type": "integer",
            "description": "Backward compatibility property.\r\nThe capacity of the user per week, in seconds.\r\nIf this value is null, and all the daily values are null as well, then the default value will be set to the default\r\nvalue.",
            "format": "int32",
            "nullable": true,
            "example": 126000,
            "deprecated": true
          },
          "mon": {
            "type": "integer",
            "description": "The user's capacity on Monday, in seconds.",
            "format": "int32",
            "nullable": true,
            "example": 28800
          },
          "tue": {
            "type": "integer",
            "description": "The user's capacity on Tuesday, in seconds.",
            "format": "int32",
            "nullable": true,
            "example": 28800
          },
          "wed": {
            "type": "integer",
            "description": "The user's capacity on Wednesday, in seconds.",
            "format": "int32",
            "nullable": true,
            "example": 28800
          },
          "thu": {
            "type": "integer",
            "description": "The user's capacity on Thursday, in seconds.",
            "format": "int32",
            "nullable": true,
            "example": 28800
          },
          "fri": {
            "type": "integer",
            "description": "The user's capacity on Friday, in seconds.",
            "format": "int32",
            "nullable": true,
            "example": 28800
          },
          "sat": {
            "type": "integer",
            "description": "The user's capacity on Saturday, in seconds.",
            "format": "int32",
            "nullable": true,
            "example": 0
          },
          "sun": {
            "type": "integer",
            "description": "The user's capacity on Sunday, in seconds.",
            "format": "int32",
            "nullable": true,
            "example": 0
          }
        },
        "additionalProperties": false,
        "description": "The user capacity form."
      },
      "UserForm": {
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The firstname of the user.",
            "nullable": true,
            "example": "Carla"
          },
          "lastName": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The lastname of the user.",
            "nullable": true,
            "example": "Creative"
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the user.",
            "format": "date-time",
            "nullable": true,
            "example": "1998-04-19T00:00:000Z"
          },
          "gender": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The gender of the user.",
            "nullable": true,
            "example": "female"
          },
          "title": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The title of the user.",
            "nullable": true,
            "example": "Miss"
          },
          "position": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The position of the user.",
            "nullable": true
          },
          "language": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The language preference of the user in ISO 639-1 format.",
            "nullable": true,
            "example": "en-GB"
          }
        },
        "additionalProperties": false,
        "description": "The model to create a new user."
      },
      "UserInRole": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The id of the user to add to the role.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isDeactivated": {
            "type": "boolean",
            "description": "Whether the user is deactivated in this role.",
            "example": false
          },
          "roleId": {
            "type": "string",
            "description": "The id of the role the user is assigned to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "UserInRoleForm": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The id of the user to add to the role.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "UserInTeam": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The id of the user.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "teamId": {
            "type": "string",
            "description": "The id of the team.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "The user in team model assigns accounts to teams."
      },
      "UserModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultTagModel"
            },
            "nullable": true
          },
          "isDeactivated": {
            "type": "boolean"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/UserStatusModel"
          },
          "isApiKeyUser": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UserModelForTimeTrackings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTagModelForTimeTrackings"
            },
            "description": "The tags of the user.",
            "nullable": true,
            "deprecated": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTeamModelForTimeTrackings"
            },
            "description": "The teams of the user.",
            "nullable": true,
            "deprecated": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "Whether the user is external."
          }
        },
        "additionalProperties": false
      },
      "UserPermissionFullModel": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The id of the user.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isAdmin": {
            "type": "boolean",
            "description": "Whether the user is an admin user.",
            "example": false
          },
          "isGuest": {
            "type": "boolean",
            "description": "Whether the user is a guest user.",
            "example": false
          },
          "roleId": {
            "type": "string",
            "description": "The role id of the user.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isBlocked": {
            "type": "boolean",
            "description": "Whether the user is blocked.",
            "example": false
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionFullModel"
            },
            "description": "A list of permissions assigned to the user.",
            "nullable": true
          },
          "projectRolesPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectRolesPermissionFullModel"
            },
            "description": "A list of project role permissions assigned to the user.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserPermissionInfoExternal": {
        "type": "object",
        "properties": {
          "signature": {
            "type": "string",
            "description": "The signature of the user permissions. Can be verified with the HMACSHA1 algorithm and the secret.",
            "nullable": true,
            "example": "c2lnbmF0dXJl"
          },
          "userPermission": {
            "$ref": "#/components/schemas/UserPermissionFullModel"
          }
        },
        "additionalProperties": false
      },
      "UserPostForm": {
        "type": "object",
        "properties": {
          "firstName": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The firstname of the user.",
            "nullable": true,
            "example": "Carla"
          },
          "lastName": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The lastname of the user.",
            "nullable": true,
            "example": "Creative"
          },
          "birthDate": {
            "type": "string",
            "description": "The birthdate of the user.",
            "format": "date-time",
            "nullable": true,
            "example": "1998-04-19T00:00:000Z"
          },
          "gender": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The gender of the user.",
            "nullable": true,
            "example": "female"
          },
          "title": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The title of the user.",
            "nullable": true,
            "example": "Miss"
          },
          "position": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The position of the user.",
            "nullable": true
          },
          "language": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The language preference of the user in ISO 639-1 format.",
            "nullable": true,
            "example": "en-GB"
          },
          "accountId": {
            "type": "string",
            "description": "The account id of the user.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "The user model with the account id to create a new user."
      },
      "UserSetting": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "entityId": {
            "type": "string",
            "description": "The id of the related entity. Required when EntityName is set.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "entityName": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The name of the related entity. Required when EntityId is set.",
            "nullable": true,
            "example": "users"
          },
          "key": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique key.",
            "example": "onboarding-complete"
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The value of the setting.",
            "example": "true"
          },
          "createdOn": {
            "type": "string",
            "description": "The creation date.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created the entity.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date when the entity was last updated.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last updated the entity.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "The user setting model."
      },
      "UserSettingForm": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "entityId": {
            "type": "string",
            "description": "The id of the related entity. Required when EntityName is set.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "entityName": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The name of the related entity. Required when EntityId is set.",
            "nullable": true,
            "example": "users"
          },
          "key": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique key.",
            "example": "onboarding-complete"
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The value of the setting.",
            "example": "true"
          }
        },
        "additionalProperties": false,
        "description": "The user setting model."
      },
      "UserStatus": {
        "type": "object",
        "properties": {
          "invitationAccepted": {
            "type": "boolean",
            "description": "Flag if the user in this workspace accepted the invitation."
          },
          "isDeactivated": {
            "type": "boolean",
            "description": "Whether the user is deactivated."
          }
        },
        "additionalProperties": false,
        "description": "The status of the user."
      },
      "UserStatusModel": {
        "type": "object",
        "properties": {
          "isDeactivated": {
            "type": "boolean"
          },
          "invitationAccepted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UserTagModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the tag.",
            "nullable": true,
            "example": "Design"
          },
          "color": {
            "type": "string",
            "description": "The color of the tag.",
            "nullable": true,
            "example": "purple"
          }
        },
        "additionalProperties": false,
        "description": "A tag model used for the user.\r\nDo not delete, we need to create copies of the tag model for each entity to avoid issues with Automapper."
      },
      "UserTagModelForTimeTrackings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the tag.",
            "nullable": true,
            "example": "Design"
          },
          "color": {
            "type": "string",
            "description": "The color of the tag.",
            "nullable": true,
            "example": "purple"
          }
        },
        "additionalProperties": false,
        "description": "A tag model used for the timetrackings UserModelForTimeTrackings.\r\nDo not delete, we need to create copies of the tag model for each entity to avoid issues with Automapper."
      },
      "UserTeamModelForTimeTrackings": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "UserWeeklyCapacity": {
        "type": "object",
        "properties": {
          "mon": {
            "type": "integer",
            "description": "The user's capacity on Monday, in seconds.",
            "format": "int32",
            "example": 28800
          },
          "tue": {
            "type": "integer",
            "description": "The user's capacity on Tuesday, in seconds.",
            "format": "int32",
            "example": 28800
          },
          "wed": {
            "type": "integer",
            "description": "The user's capacity on Wednesday, in seconds.",
            "format": "int32",
            "example": 28800
          },
          "thu": {
            "type": "integer",
            "description": "The user's capacity on Thursday, in seconds.",
            "format": "int32",
            "example": 28800
          },
          "fri": {
            "type": "integer",
            "description": "The user's capacity on Friday, in seconds.",
            "format": "int32",
            "example": 28800
          },
          "sat": {
            "type": "integer",
            "description": "The user's capacity on Saturday, in seconds.",
            "format": "int32",
            "example": 0
          },
          "sun": {
            "type": "integer",
            "description": "The user's capacity on Sunday, in seconds.",
            "format": "int32",
            "example": 0
          }
        },
        "additionalProperties": false
      },
      "UsersToPlan": {
        "type": "object",
        "properties": {
          "selectedUserIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "selectedTeamIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "selectedProjectIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UsersToPlanForm": {
        "type": "object",
        "properties": {
          "selectedUserIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "selectedTeamIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "selectedProjectIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ValidateInvitationForm": {
        "required": [
          "inviteCode"
        ],
        "type": "object",
        "properties": {
          "inviteCode": {
            "minLength": 1,
            "type": "string",
            "description": "The invite code to validate."
          }
        },
        "additionalProperties": false
      },
      "ValidationErrorResponse": {
        "type": "object",
        "properties": {
          "property": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Widget": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the widget.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "type": {
            "type": "string",
            "description": "The type of the widget.",
            "nullable": true,
            "example": "task-views"
          },
          "name": {
            "type": "string",
            "description": "The name of the widget.",
            "nullable": true,
            "example": "Unassigned Tasks"
          },
          "entityId": {
            "type": "string",
            "description": "The id of the entity that the widget is referencing.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The creation date.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created the entity.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date when the entity was last updated.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last updated the entity.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "column": {
            "type": "integer",
            "description": "The column of the widget within the dashboard.",
            "format": "int32",
            "example": 0
          },
          "order": {
            "type": "integer",
            "description": "The order of the widget within the column.",
            "format": "int32",
            "example": 0
          },
          "settings": {
            "type": "string",
            "description": "The settings of the widget.",
            "nullable": true,
            "example": "{ \"showPrivate\": true }"
          },
          "value": {
            "type": "string",
            "description": "The value of a widget.",
            "nullable": true,
            "example": null
          }
        },
        "additionalProperties": false
      },
      "WidgetForm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the widget.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "type": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The type of the widget.",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The name of the widget.",
            "nullable": true
          },
          "entityId": {
            "type": "string",
            "description": "The id of the entity that the widget is referencing.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "column": {
            "type": "integer",
            "description": "The column of the widget within the dashboard.",
            "format": "int32"
          },
          "order": {
            "type": "integer",
            "description": "The order of the widget within the column.",
            "format": "int32"
          },
          "settings": {
            "type": "string",
            "description": "The settings of the widget.",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The value of a widget.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WidgetPostForm": {
        "type": "object",
        "properties": {
          "widgets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WidgetForm"
            },
            "description": "A list of all widgets of the dashboard.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkloadAppointments": {
        "type": "object",
        "properties": {
          "providerName": {
            "type": "string",
            "nullable": true
          },
          "calendarName": {
            "type": "string",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "WorkloadCompany": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "WorkloadModel": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "The date of the calculated utilisation.",
            "format": "date-time"
          },
          "duration": {
            "type": "number",
            "format": "float",
            "readOnly": true
          },
          "userCapacity": {
            "type": "integer",
            "description": "The total capacity of the user on this day.",
            "format": "int32",
            "nullable": true
          },
          "remainingUserCapacity": {
            "type": "integer",
            "description": "The remaining capacity of the user on this day.",
            "format": "int32",
            "nullable": true
          },
          "projects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkloadProjectInfo"
            },
            "nullable": true
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkloadTaskInfo"
            },
            "nullable": true
          },
          "appointments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkloadAppointments"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkloadProjectInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "company": {
            "$ref": "#/components/schemas/WorkloadCompany"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkloadTaskInfo"
            },
            "nullable": true
          },
          "timeBookings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkloadTimeBookingInfo"
            },
            "nullable": true
          },
          "isAnonymized": {
            "type": "boolean",
            "description": "This will be true if the user doesn't have access to the project.\r\nIn that case the Name and the ClientName will be shadowed.",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "WorkloadStatusModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the entity.",
            "nullable": true,
            "example": "Website Design and Implementation"
          },
          "type": {
            "type": "string",
            "description": "The type of the status.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkloadTaskInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the planned effort of the user for this task.\r\nIncludes the duration of recurring tasks if the IsRecurring flag is set to true.",
            "format": "int32"
          },
          "taskStatus": {
            "$ref": "#/components/schemas/WorkloadStatusModel"
          },
          "taskSchedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkloadTaskScheduleInfo"
            },
            "nullable": true
          },
          "isAnonymized": {
            "type": "boolean",
            "description": "This will be true if the user doesn't have access to the task.\r\nIn that case the Name and the Status will be shadowed.",
            "nullable": true
          },
          "isRecurring": {
            "type": "boolean",
            "description": "Whether the task has a recurrency rule."
          }
        },
        "additionalProperties": false
      },
      "WorkloadTaskScheduleInfo": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "WorkloadTimeBookingInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "format": "int32"
          },
          "isAnonymized": {
            "type": "boolean",
            "description": "This will be true if the user doesn't have access to the project of time booking (if related to a project).\r\nIn that case the Description will be shadowed.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkspaceAbsenceForm": {
        "required": [
          "description",
          "endOn",
          "startOn"
        ],
        "type": "object",
        "properties": {
          "startOn": {
            "type": "string",
            "description": "The start time of the workspace absence.",
            "format": "date-time",
            "example": "2022-03-01T00:00:00Z"
          },
          "endOn": {
            "type": "string",
            "description": "The end time of the workspace absence.",
            "format": "date-time",
            "example": "2022-03-03T00:00:00Z"
          },
          "description": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "The description of the workspace absence.",
            "example": "Company offsite"
          },
          "regionId": {
            "type": "string",
            "description": "(optional) The id of the absence region to limit the workspace absence to.\r\nIf not set, the workspace absence will apply to all users in the workspace.\r\nOtherwise, it will only apply to users in the specified absence region.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isHalfDayOnStart": {
            "type": "boolean",
            "description": "If it's true, and it's a single day absence means that the absence is for the first half of the workday.\r\nIf it's a multi day absence, it will start on the second half of the first day of the absence period.",
            "example": false
          },
          "isHalfDayOnEnd": {
            "type": "boolean",
            "description": "If it's true, and it's a single day absence means that the absence is for the second half of the workday.\r\nIf it's a multi day absence it will end on the first half of the last day of the absence period.",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "WorkspaceAbsenceModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "startOn": {
            "type": "string",
            "description": "The start time of the workspace absence.",
            "format": "date-time",
            "example": "2022-03-01T00:00:00Z"
          },
          "endOn": {
            "type": "string",
            "description": "The end time of the workspace absence.",
            "format": "date-time",
            "example": "2022-03-03T00:00:00Z"
          },
          "description": {
            "type": "string",
            "description": "The description of the absence.",
            "nullable": true,
            "example": "Company offsite"
          },
          "regionId": {
            "type": "string",
            "description": "The (optional) regionId of the workspace absence.\r\nIf null, the absence is global for the entire workspace.\r\nOtherwise, it will be applied only to the users of the region.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "region": {
            "type": "string",
            "description": "The name of the region of the workspace absence.\r\nNull if the absence is global for the entire workspace.",
            "nullable": true,
            "example": "Hamburg"
          },
          "isReadOnly": {
            "type": "boolean",
            "description": "If it's true it means that this Absence is read-only and cannot be edited/deleted by the user.",
            "readOnly": true
          },
          "isHalfDayOnStart": {
            "type": "boolean",
            "description": "If it's true and it's a single day absence means that the absence is for the first half of the workday.\r\nIf it's a multi day absence it started on the second half of the first day of the absence period.",
            "readOnly": true,
            "example": false
          },
          "isHalfDayOnEnd": {
            "type": "boolean",
            "description": "If it's true and it's a single day absence means that the absence is for the second half of the workday.\r\nIf it's a multi day absence it ended on the first half of the last day of the absence period.",
            "readOnly": true,
            "example": false
          }
        },
        "additionalProperties": false
      },
      "WorkspaceModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean"
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "subdomains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubdomanModel"
            },
            "nullable": true
          },
          "isTestWorkspace": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "WorkspaceOfUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the current workspace.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the current workspace.",
            "nullable": true,
            "example": "NCNSTN"
          },
          "url": {
            "type": "string",
            "description": "The default URL of the current workspace.",
            "nullable": true,
            "example": "https://ncnstn.awork.com"
          }
        },
        "additionalProperties": false,
        "description": "The user's current workspace model."
      },
      "DefaultModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "DefaultTaskStatusModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExtendedFileInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The user-specified name of the file.",
            "nullable": true,
            "example": "Final project report"
          },
          "description": {
            "type": "string",
            "description": "The description of the file.",
            "nullable": true,
            "example": "The client requested a cost overview and timeline"
          },
          "id": {
            "type": "string",
            "description": "The id of the file info.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "entityId": {
            "type": "string",
            "description": "The id of the linked entity.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "fileName": {
            "type": "string",
            "description": "The name of the file.",
            "nullable": true,
            "example": "Final project report.xlsx"
          },
          "entityType": {
            "type": "string",
            "description": "The name of the linked entity type.",
            "nullable": true,
            "example": "project"
          },
          "mimeType": {
            "type": "string",
            "description": "The MIME type of the file.",
            "nullable": true,
            "example": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this file was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this file.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this file was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this file.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "fileVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileVersion"
            },
            "description": "List of all versions.",
            "nullable": true
          },
          "isCommentFile": {
            "type": "boolean",
            "description": "Whether the file is related to a comment.",
            "example": false
          },
          "externalProvider": {
            "type": "string",
            "description": "The external provider for the file. Like 'google' or 'onedrive'.",
            "nullable": true,
            "example": null
          },
          "externalFileUrl": {
            "type": "string",
            "description": "The file url of the external provider.",
            "nullable": true,
            "example": null
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "Whether the file is hidden for connect users."
          },
          "task": {
            "$ref": "#/components/schemas/SimpleTaskModel"
          }
        },
        "additionalProperties": false
      },
      "ExternalFileForm": {
        "required": [
          "externalFileUrl",
          "externalProvider",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the file."
          },
          "description": {
            "type": "string",
            "description": "The description of the file.",
            "nullable": true
          },
          "externalProvider": {
            "minLength": 1,
            "type": "string",
            "description": "The external provider for the file. Like 'google' or 'onedrive'."
          },
          "externalFileUrl": {
            "minLength": 1,
            "type": "string",
            "description": "The file url of the external provider."
          },
          "mimeType": {
            "type": "string",
            "description": "The mime type if the external file.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "File": {
        "type": "object",
        "additionalProperties": false
      },
      "FileCopyForm": {
        "required": [
          "entityId",
          "entityType"
        ],
        "type": "object",
        "properties": {
          "entityId": {
            "type": "string",
            "description": "The id of the entity the file should be linked to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "entityType": {
            "minLength": 1,
            "type": "string",
            "description": "The type of the linked entity.",
            "example": "projects"
          }
        },
        "additionalProperties": false
      },
      "FileEntityForm": {
        "type": "object",
        "properties": {
          "entityId": {
            "type": "string",
            "description": "The id of the entity the file should be linked to.\r\nSet to null to change the file to a global file.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "entityType": {
            "type": "string",
            "description": "The type of the linked entity.\r\nNecessary if EntityId is set.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FileInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The user-specified name of the file.",
            "nullable": true,
            "example": "Final project report"
          },
          "description": {
            "type": "string",
            "description": "The description of the file.",
            "nullable": true,
            "example": "The client requested a cost overview and timeline"
          },
          "id": {
            "type": "string",
            "description": "The id of the file info.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "entityId": {
            "type": "string",
            "description": "The id of the linked entity.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "fileName": {
            "type": "string",
            "description": "The name of the file.",
            "nullable": true,
            "example": "Final project report.xlsx"
          },
          "entityType": {
            "type": "string",
            "description": "The name of the linked entity type.",
            "nullable": true,
            "example": "project"
          },
          "mimeType": {
            "type": "string",
            "description": "The MIME type of the file.",
            "nullable": true,
            "example": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this file was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this file.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this file was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this file.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "fileVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileVersion"
            },
            "description": "List of all versions.",
            "nullable": true
          },
          "isCommentFile": {
            "type": "boolean",
            "description": "Whether the file is related to a comment.",
            "example": false
          },
          "externalProvider": {
            "type": "string",
            "description": "The external provider for the file. Like 'google' or 'onedrive'.",
            "nullable": true,
            "example": null
          },
          "externalFileUrl": {
            "type": "string",
            "description": "The file url of the external provider.",
            "nullable": true,
            "example": null
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "Whether the file is hidden for connect users."
          }
        },
        "additionalProperties": false,
        "description": "The file model."
      },
      "FileInfoJson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the file info.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "content": {
            "description": "Content in JSON format.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FileInfoUpdateForm": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The user-specified name of the file.",
            "nullable": true,
            "example": "Final project report"
          },
          "description": {
            "type": "string",
            "description": "The description of the file.",
            "nullable": true,
            "example": "The client requested a cost overview and timeline"
          }
        },
        "additionalProperties": false,
        "description": "The model to update the file metadata."
      },
      "FilePostForm": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The public url to the file.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the file.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the file.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FileVersion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the file version.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "fileInfoId": {
            "type": "string",
            "description": "The id of the file this version belongs to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "version": {
            "type": "number",
            "description": "The version of the file.",
            "format": "double",
            "example": 13
          },
          "size": {
            "type": "integer",
            "description": "The size of the file, in bytes.",
            "format": "int64",
            "example": 13590
          },
          "width": {
            "type": "number",
            "description": "The width if this is an image file.",
            "format": "double",
            "nullable": true,
            "example": 1920
          },
          "height": {
            "type": "number",
            "description": "The height if this is an image file.",
            "format": "double",
            "nullable": true,
            "example": 1200
          },
          "createdOn": {
            "type": "string",
            "description": "The date this file version was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this file version.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this file version was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this file version.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "GenerateExportForm": {
        "type": "object",
        "properties": {
          "filterUrl": {
            "type": "string",
            "description": "The relative API URL with the option to append a filter.",
            "nullable": true,
            "example": "projects/123e4567-e89b-12d3-a456-426614174000/projecttasks"
          }
        },
        "additionalProperties": false,
        "description": "Form with the details to generate an export."
      },
      "GenerateUploadUrlResponseModel": {
        "required": [
          "uploadId",
          "uploadURL"
        ],
        "type": "object",
        "properties": {
          "uploadId": {
            "minLength": 1,
            "type": "string",
            "description": "The id of the temporary container that the file will be uploaded to.",
            "example": "1a2b3c4d5e6f7g8h9i0j"
          },
          "uploadURL": {
            "minLength": 1,
            "type": "string",
            "description": "The URL that the client should upload the file to.",
            "example": "https://blob.awork.com/upload"
          }
        },
        "additionalProperties": false
      },
      "PostMigrateGuestFilesForm": {
        "type": "object",
        "properties": {
          "taskIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The task ids to migrate the user private files from.",
            "nullable": true
          },
          "workspaceId": {
            "type": "string",
            "description": "The new workspace id to migrate the user private files to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "SimpleTaskModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "taskStatus": {
            "$ref": "#/components/schemas/DefaultTaskStatusModel"
          }
        },
        "additionalProperties": false
      },
      "TimeReportExportForm": {
        "required": [
          "exportMode"
        ],
        "type": "object",
        "properties": {
          "exportMode": {
            "minLength": 1,
            "type": "string",
            "description": "The mode how the time report should export.\r\nCan be:\r\n\"raw\": Generates an excel file with all time entries including all fields\r\n\"original\": Generates an excel file with the options of the report,\r\nfor example same grouping, rounding, etc.",
            "example": "raw"
          },
          "timeReport": {
            "$ref": "#/components/schemas/TimeReportModel"
          }
        },
        "additionalProperties": false
      },
      "TimeReportModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "shared": {
            "type": "boolean",
            "description": "Whether the time report is shared.",
            "example": false
          },
          "dateMode": {
            "type": "string",
            "description": "The date mode of the time report.\r\nCan be: \"selectWeek\", \"currentWeek\", \"lastWeek\",\r\n\"selectMonth\", \"currentMonth\", \"lastMonth\",\r\n\"selectQuarter\", \"currentQuarter\", \"lastQuarter\",\r\n\"selectYear\", \"currentYear\", \"lastYear\",\r\n\"customRange\"",
            "nullable": true,
            "example": "customRange"
          },
          "startOn": {
            "type": "string",
            "description": "The start date time of the report\r\nwhen DateMode is \"customRange\".",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T00:00Z"
          },
          "endOn": {
            "type": "string",
            "description": "The end date time of the time report.\r\nwhen DateMode is \"customRange\".",
            "format": "date-time",
            "nullable": true,
            "example": "2022-04-01T00:00Z"
          },
          "filter": {
            "type": "string",
            "description": "The generated filter query of the time report.",
            "nullable": true,
            "example": "filterby=userId eq guid'72200108-7ab9-e711-80c2-0017fa10039b'"
          },
          "chartType": {
            "type": "string",
            "description": "The actual chart type of the time report.\r\nCan be: \"group\" or \"time\"",
            "nullable": true,
            "example": "group"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project of the time report.\r\nUsed for the pdf reports.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "companyId": {
            "type": "string",
            "description": "The id of the company of the time report.\r\nUsed for the pdf reports.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "sumBy": {
            "type": "string",
            "description": "Summarizes the values by this property.",
            "nullable": true,
            "example": "task"
          },
          "sortBy": {
            "type": "string",
            "description": "Sorts the values by this property or these properties.",
            "nullable": true,
            "example": "date"
          },
          "sortByOrder": {
            "type": "string",
            "description": "The way how to sort the data.\r\nCan be: \"asc\", desc\"",
            "nullable": true,
            "example": "asc"
          },
          "roundBy": {
            "type": "string",
            "description": "Rounding method of the time report.\r\nCan be:\r\n\"nearQuarter\", \"nearHalf\", \"nearHour\",\r\n\"upQuarter\", \"upHalf\", \"upHour\"",
            "nullable": true
          },
          "groupBy": {
            "type": "string",
            "description": "Group the values by property.",
            "nullable": true,
            "example": "task"
          },
          "sortColumn": {
            "type": "string",
            "description": "Sort the values of the time report by a column.",
            "nullable": true,
            "example": "Date"
          },
          "availableColumns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of shown Columns in the time report.",
            "nullable": true,
            "example": [
              "Name",
              "Assignee"
            ]
          },
          "billingStatuses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter of bill statuses of the time report.\r\nCan be: \"billed\", \"notBilled\", \"notBillable\"",
            "nullable": true,
            "example": [
              "notBilled"
            ]
          },
          "note": {
            "type": "string",
            "description": "Filter time entries by note.",
            "nullable": true,
            "example": "planning"
          },
          "usersFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter time entries by users.",
            "nullable": true,
            "example": [
              "a2200108-7ab9-e711-80c2-0017fa10039b"
            ]
          },
          "projectsFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter time entries by projects.",
            "nullable": true,
            "example": [
              "a2200108-7ab9-e711-80c2-0017fa10039b"
            ]
          },
          "projectCompaniesFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter time entries by projects of the companies.",
            "nullable": true,
            "example": [
              "a2200108-7ab9-e711-80c2-0017fa10039b"
            ]
          },
          "projectTypesFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter time entries by projects of the type.",
            "nullable": true,
            "example": [
              "a2200108-7ab9-e711-80c2-0017fa10039b"
            ]
          },
          "projectStatusesFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter time entries by projects with status.",
            "nullable": true,
            "example": [
              "a2200108-7ab9-e711-80c2-0017fa10039b"
            ]
          },
          "projectStatusTypesFilter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter time entries by projects with status of type.",
            "nullable": true,
            "example": [
              "a2200108-7ab9-e711-80c2-0017fa10039b"
            ]
          },
          "taskTagsFilter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter time entries by the tags of the task.",
            "nullable": true,
            "deprecated": true
          },
          "taskTagsModelFilter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultTagModel"
            },
            "description": "Filter time entries by the tags of the task.",
            "nullable": true
          },
          "projectTagsFilter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter time entries by the tags of the project.",
            "nullable": true,
            "deprecated": true
          },
          "projectTagsModelFilter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultTagModel"
            },
            "description": "Filter time entries by the tags of the project.",
            "nullable": true
          },
          "userTagsFilter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter time entries by the tags of the users.",
            "nullable": true,
            "deprecated": true
          },
          "userTagsModelFilter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultTagModel"
            },
            "description": "Filter time entries by the tags of the users.",
            "nullable": true
          },
          "typesOfWorkFilter": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Group the time report by the type of works.",
            "nullable": true,
            "example": [
              "a2200108-7ab9-e711-80c2-0017fa10039b"
            ]
          },
          "user": {
            "$ref": "#/components/schemas/DefaultModel"
          }
        },
        "additionalProperties": false
      },
      "UploadByUploadIdForm": {
        "required": [
          "fileName",
          "uploadId"
        ],
        "type": "object",
        "properties": {
          "uploadId": {
            "minLength": 1,
            "type": "string",
            "description": "The id of the temporary container that the file will be uploaded to.",
            "example": "1a2b3c4d5e6f7g8h9i0j"
          },
          "fileName": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the file that will be uploaded.",
            "example": "Pitch.ppt"
          },
          "description": {
            "type": "string",
            "description": "The description of the file.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Action": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the action.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created the action.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date the action was created.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the action.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date the action was updated.",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "description": "The type of the action.",
            "nullable": true,
            "example": "tag-add-task"
          },
          "order": {
            "type": "number",
            "description": "The order of the action.",
            "format": "double",
            "nullable": true,
            "example": 2
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionValue"
            },
            "description": "The values of the action.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActionForm": {
        "required": [
          "type",
          "values"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of the action.",
            "example": "tag-add-task"
          },
          "order": {
            "type": "number",
            "description": "The order of the action.",
            "format": "double",
            "nullable": true,
            "example": 1
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionValuePostForm"
            },
            "description": "The values of the action."
          }
        },
        "additionalProperties": false
      },
      "ActionValue": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the action value.",
            "nullable": true,
            "example": "tag"
          },
          "value": {
            "type": "string",
            "description": "The value of the action value.",
            "nullable": true,
            "example": "Design"
          }
        },
        "additionalProperties": false
      },
      "ActionValuePostForm": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the action value.",
            "example": "user"
          },
          "value": {
            "description": "The value of the action value.",
            "example": {
              "id": "DD0AEEB4-5CF4-44CA-A8EA-ED70EDE016A4",
              "name": "Carla",
              "type": "user"
            }
          }
        },
        "additionalProperties": false
      },
      "Automation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the automation.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created the automation.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date the automation was created.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the automation.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date the automation was updated.",
            "format": "date-time"
          },
          "triggerId": {
            "type": "string",
            "description": "The id of the trigger which is related to the automation.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "trigger": {
            "$ref": "#/components/schemas/Trigger"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the automation is enabled.",
            "readOnly": true,
            "example": true
          },
          "state": {
            "type": "string",
            "description": "The state of the automation.\r\nSee AutomationsService.DAL.Models.AutomationState for the possible values.",
            "nullable": true
          },
          "createdByProjectTemplate": {
            "type": "boolean",
            "description": "Whether the automation was created from an automation template of a project template.",
            "example": false
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project which is related to the automation.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectTemplateId": {
            "type": "string",
            "description": "The id of the project template which is related to the automation.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Action"
            },
            "description": "The actions which is related to the automation.",
            "nullable": true
          },
          "failed": {
            "$ref": "#/components/schemas/ErrorResponse"
          }
        },
        "additionalProperties": false
      },
      "AutomationPutForm": {
        "required": [
          "enabled",
          "trigger"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Whether the automation is enabled."
          },
          "trigger": {
            "$ref": "#/components/schemas/AutomationTriggerForm"
          }
        },
        "additionalProperties": false
      },
      "AutomationTriggerForm": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of the trigger.",
            "example": "task-created"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutomationTriggerValueForm"
            },
            "description": "The values of the trigger.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutomationTriggerValueForm": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the trigger value.",
            "example": "type"
          },
          "value": {
            "description": "The value of the trigger value.",
            "example": {
              "id": "E9DA77CF-1DF8-42EB-99C5-C2D0F5C357E5",
              "name": "Internal Work"
            }
          }
        },
        "additionalProperties": false
      },
      "CopyAutomationsForm": {
        "required": [
          "sourceProjectTemplateId",
          "targetProjectTemplateId"
        ],
        "type": "object",
        "properties": {
          "sourceProjectTemplateId": {
            "type": "string",
            "description": "This is the project template which the automations will be copied from.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "targetProjectTemplateId": {
            "type": "string",
            "description": "This is the project template the automations will be copied to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "Trigger": {
        "type": "object",
        "properties": {
          "updatedOn": {
            "type": "string",
            "description": "The date the trigger was updated.",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "description": "The type of the trigger.",
            "nullable": true,
            "example": "task-created"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TriggerValue"
            },
            "description": "The values of the trigger.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TriggerValue": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the trigger value.",
            "nullable": true,
            "example": "name"
          },
          "value": {
            "type": "string",
            "description": "The value of the trigger value.",
            "nullable": true,
            "example": "Design"
          }
        },
        "additionalProperties": false
      },
      "WebhookConfig": {
        "required": [
          "authenticationType",
          "events",
          "isActive",
          "name",
          "uri"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of this webhook event.",
            "example": "Post to Slack"
          },
          "uri": {
            "minLength": 1,
            "type": "string",
            "description": "The URI to call.",
            "example": "https://hooks.slack.com/services/T578C/EY8979"
          },
          "language": {
            "type": "string",
            "description": "The language of the web hook message that will be sent to the receiver.\r\nNot required for custom web hooks.",
            "nullable": true,
            "example": "en-GB"
          },
          "events": {
            "minLength": 1,
            "type": "string",
            "description": "The event(s) that trigger the web hook.\r\nA comma-separated list of events that trigger the webhook.\r\nThe allowed events depend on the webhook type.\r\nFor type 'custom': retrieve the list of allowed events from '/webhooks/eventTypes'\r\nFor type 'slack': retrieve the list of allowed events from '/webhooks/eventTypes/slack'",
            "example": "task_comment_added"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the web hook is currently active.",
            "example": true
          },
          "onlyTriggerForMainEntityChanges": {
            "type": "boolean",
            "description": "Whether to only send events for main entity changes and not for nested entities if the webhook is for a model."
          },
          "authenticationType": {
            "minLength": 1,
            "type": "string",
            "description": "The authentication type to use when calling the URI.\r\nCan be 'none', 'header'.",
            "example": "none"
          },
          "authentication": {
            "type": "string",
            "description": "The authentication value to use when calling the URI.\r\nShould be 'key=value'.\r\nIn case of header authentication, this should be 'headername=headervalue'.\r\nOnly required when the AuthenticationType is anything other than 'none'.",
            "nullable": true,
            "example": null
          },
          "id": {
            "type": "string",
            "description": "The id of the webhook config.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "receiverType": {
            "type": "string",
            "description": "The type of the web hook.\r\nCan be 'custom', 'slack'.",
            "nullable": true,
            "example": "slack"
          },
          "lastFailureReason": {
            "type": "string",
            "description": "The most recent failure reason.",
            "nullable": true,
            "example": null
          },
          "createdOn": {
            "type": "string",
            "description": "The date this webhook config was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this webhook config.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this webhook config was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this webhook config.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "The webhook config model."
      },
      "WebhookConfigForm": {
        "required": [
          "authenticationType",
          "events",
          "isActive",
          "name",
          "uri"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of this webhook event.",
            "example": "Post to Slack"
          },
          "uri": {
            "minLength": 1,
            "type": "string",
            "description": "The URI to call.",
            "example": "https://hooks.slack.com/services/T578C/EY8979"
          },
          "language": {
            "type": "string",
            "description": "The language of the web hook message that will be sent to the receiver.\r\nNot required for custom web hooks.",
            "nullable": true,
            "example": "en-GB"
          },
          "events": {
            "minLength": 1,
            "type": "string",
            "description": "The event(s) that trigger the web hook.\r\nA comma-separated list of events that trigger the webhook.\r\nThe allowed events depend on the webhook type.\r\nFor type 'custom': retrieve the list of allowed events from '/webhooks/eventTypes'\r\nFor type 'slack': retrieve the list of allowed events from '/webhooks/eventTypes/slack'",
            "example": "task_comment_added"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the web hook is currently active.",
            "example": true
          },
          "onlyTriggerForMainEntityChanges": {
            "type": "boolean",
            "description": "Whether to only send events for main entity changes and not for nested entities if the webhook is for a model."
          },
          "authenticationType": {
            "minLength": 1,
            "type": "string",
            "description": "The authentication type to use when calling the URI.\r\nCan be 'none', 'header'.",
            "example": "none"
          },
          "authentication": {
            "type": "string",
            "description": "The authentication value to use when calling the URI.\r\nShould be 'key=value'.\r\nIn case of header authentication, this should be 'headername=headervalue'.\r\nOnly required when the AuthenticationType is anything other than 'none'.",
            "nullable": true,
            "example": null
          }
        },
        "additionalProperties": false,
        "description": "The model to create or update a webhook config."
      },
      "WebhookLog": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The message which has been sent to the webhook receiver.",
            "nullable": true,
            "example": "{ \"event\": \"task_comment_added: }"
          },
          "webhookId": {
            "type": "string",
            "description": "The id of the webhook.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "responseCode": {
            "type": "integer",
            "description": "The HTTP response code of the request.",
            "format": "int32",
            "example": 200
          },
          "createdOn": {
            "type": "string",
            "description": "The date the log was created.",
            "format": "date-time"
          },
          "reason": {
            "type": "string",
            "description": "The failure reason if the request failed.",
            "nullable": true,
            "example": null
          },
          "isSuccessful": {
            "type": "boolean",
            "description": "Whether the request was successful.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "WebhookSlackConfigForm": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The Slack webhook code.",
            "nullable": true,
            "example": "44271543281.317837595255.b0952db"
          }
        },
        "additionalProperties": false,
        "description": "The Slack webhook config model."
      },
      "WebhookTestResult": {
        "type": "object",
        "properties": {
          "responseCode": {
            "type": "integer",
            "description": "The HTTP response code of the test request.",
            "format": "int32",
            "example": 200
          },
          "reason": {
            "type": "string",
            "description": "The failure reason if the test request failed.",
            "nullable": true,
            "example": null
          },
          "isSuccessful": {
            "type": "boolean",
            "description": "Whether the test request was successful.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "AlertForm": {
        "required": [
          "alert",
          "channel",
          "enabled",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the alert.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "alert": {
            "minLength": 1,
            "type": "string",
            "description": "The alert indicator.",
            "example": "due_soon"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the alert is enabled.",
            "example": true
          },
          "channel": {
            "minLength": 1,
            "type": "string",
            "description": "The channel of the alert.",
            "example": "email"
          }
        },
        "additionalProperties": false
      },
      "Autopilot": {
        "required": [
          "alerts",
          "enabled",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of the autopilot.",
            "example": "agile"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the autopilot is enabled.",
            "example": true
          },
          "alerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertForm"
            },
            "description": "The alerts of the autopilot."
          },
          "id": {
            "type": "string",
            "description": "The id of the autopilot.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "description": "The date this object was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this object.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this object was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last modified this object.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "AutopilotPostForm": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of the autopilot.",
            "example": "agile"
          },
          "alerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertForm"
            },
            "description": "The alerts of the autopilot.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutopilotPutForm": {
        "required": [
          "alerts",
          "enabled",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of the autopilot.",
            "example": "agile"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the autopilot is enabled.",
            "example": true
          },
          "alerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertForm"
            },
            "description": "The alerts of the autopilot."
          }
        },
        "additionalProperties": false
      },
      "BriefingPostForm": {
        "required": [
          "enabled",
          "type"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "If the briefing should be enabled or disabled.",
            "example": true
          },
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of the weekly mail: briefing or summary.",
            "example": "summary"
          }
        },
        "additionalProperties": false
      },
      "DefaultOrderedTaskListModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "orderOfTask": {
            "type": "number",
            "format": "double"
          },
          "order": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "DynamicDurationFormatSetting": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "Duration setting for formatting time. Can be DecimalDays or HoursMinutes. Defaults to DecimalDays",
        "format": "int32"
      },
      "EmailEvent": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "mails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailInformation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmailInformation": {
        "type": "object",
        "properties": {
          "mailType": {
            "type": "string",
            "description": "The type of the email",
            "nullable": true,
            "example": "project-due-soon"
          },
          "receivers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LimitedMemberModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExtendedProjectMemberModel": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectRoleId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectRoleName": {
            "type": "string",
            "description": "The role name of the user",
            "nullable": true,
            "example": "Lead Designer"
          },
          "isResponsible": {
            "type": "boolean"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the user",
            "nullable": true,
            "example": "Carla"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user",
            "nullable": true,
            "example": "Creative"
          }
        },
        "additionalProperties": false
      },
      "LimitedMemberModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the mail receiver",
            "nullable": true,
            "example": "Philip Founder"
          },
          "isResponisble": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "MemberEmail": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The user's email address",
            "nullable": true,
            "example": "carla.creative@ncnstn.com"
          },
          "language": {
            "type": "string",
            "description": "The language of the email sent to this member",
            "nullable": true,
            "example": "en-GB"
          },
          "sendEmail": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SimulationEvent": {
        "type": "object",
        "properties": {
          "day": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "description": "The type of the event to simulate",
            "nullable": true,
            "example": "SetDueDateEvent"
          },
          "value": {
            "description": "The event value as serialized JSON object",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SimulationPostForm": {
        "type": "object",
        "properties": {
          "member": {
            "$ref": "#/components/schemas/MemberEmail"
          },
          "lead": {
            "$ref": "#/components/schemas/MemberEmail"
          },
          "autopilotType": {
            "type": "string",
            "description": "The type of autopilot to simulate",
            "nullable": true,
            "example": "agile"
          },
          "project": {
            "$ref": "#/components/schemas/SimulationProjectModel"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimulationTaskModel"
            },
            "description": "The list of the tasks for this simulation",
            "nullable": true
          },
          "format": {
            "$ref": "#/components/schemas/DynamicDurationFormatSetting"
          }
        },
        "additionalProperties": false
      },
      "SimulationProjectModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "dueDate": {
            "type": "string",
            "description": "The due date of the project.",
            "format": "date-time",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the project",
            "nullable": true,
            "example": "Gathering ideas for the brand design"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtendedProjectMemberModel"
            },
            "nullable": true
          },
          "plannedDuration": {
            "type": "integer",
            "description": "The planned duration of this project in seconds",
            "format": "int32",
            "nullable": true,
            "example": 28800
          },
          "timeBudget": {
            "type": "integer",
            "description": "The remaining time budget for this project",
            "format": "int32",
            "nullable": true,
            "example": 14400
          },
          "trackedDuration": {
            "type": "integer",
            "description": "The total time tracked for this project (in seconds)",
            "format": "int32",
            "nullable": true,
            "example": 14400
          },
          "projectStatus": {
            "$ref": "#/components/schemas/NestedStatusModel"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "startedOn": {
            "type": "string",
            "description": "The date the project was set into progress.",
            "format": "date-time",
            "nullable": true
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimulationEvent"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SimulationResult": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "timeline": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailEvent"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SimulationTaskModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "format": {
            "$ref": "#/components/schemas/DynamicDurationFormatSetting"
          },
          "trackedDuration": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "plannedDuration": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dueOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "startOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "taskStatus": {
            "$ref": "#/components/schemas/DefaultTaskStatusModel"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserModel"
            },
            "description": "The assigned users of this task.",
            "nullable": true
          },
          "lists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DefaultOrderedTaskListModel"
            },
            "description": "The lists to which the task is assigned to.",
            "nullable": true
          },
          "dueDateTable": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "dueDateTableColor": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "trackedTimeString": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assigneeNames": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "progress": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "progressColor": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "list": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SimulationEvent"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ActivityModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "entityType": {
            "type": "string",
            "description": "The type of the entity",
            "nullable": true,
            "example": "timetracking"
          },
          "entityId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "entity": {
            "$ref": "#/components/schemas/NestedModel"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the event of this activity log (e.g: added, updated, deleted)",
            "nullable": true,
            "example": "updated"
          },
          "eventDate": {
            "type": "string",
            "format": "date-time"
          },
          "changedProperty": {
            "type": "string",
            "description": "The name of the property that has changed.",
            "nullable": true,
            "example": "StartOn"
          },
          "oldPropertyValue": {
            "type": "string",
            "description": "The previous value of the updated property (as string).",
            "nullable": true,
            "example": "2022-03-11T14:00:05.100Z"
          },
          "newPropertyValue": {
            "type": "string",
            "description": "The new value for the property (as string).",
            "nullable": true,
            "example": "2022-03-15T11:30:00.100Z"
          },
          "oldProperty": {
            "description": "The old property value, if the property is a complex object.\r\nThis is used to store the old value of the property when it is an object, like a user or a task.",
            "nullable": true,
            "example": {
              "name": "To do",
              "type": "todo",
              "id": "12345678-1234-1234-1234-123456789012"
            }
          },
          "newProperty": {
            "description": "The new property value, if the property is a complex object.\r\nThis is used to store the new value of the property when it is an object, like a user or a task.",
            "nullable": true,
            "example": {
              "name": "In progress",
              "type": "progress",
              "id": "12345678-1234-1234-1234-123456789013"
            }
          },
          "userId": {
            "type": "string",
            "description": "The id of the user that performed the action that created this activity log entry.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "user": {
            "$ref": "#/components/schemas/NestedUserModel"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "project": {
            "$ref": "#/components/schemas/BasicNameModel"
          },
          "taskId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "task": {
            "$ref": "#/components/schemas/NameModel"
          },
          "assignedUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "readOnly": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "assignedUser": {
            "$ref": "#/components/schemas/NestedUserModel"
          },
          "unassignedUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "readOnly": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "unassignedUser": {
            "$ref": "#/components/schemas/NestedUserModel"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "memberId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "readOnly": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "member": {
            "$ref": "#/components/schemas/NestedUserModel"
          }
        },
        "additionalProperties": false,
        "description": "The model to retrieve activities for main entities.\r\nIncludes additional/aggregated properties for easier access to the most important information."
      },
      "BasicNameModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the entity.",
            "nullable": true,
            "example": "Website design"
          },
          "projectTypeIcon": {
            "type": "string",
            "nullable": true
          },
          "projectCompanyProfileImageUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ITimeline": {
        "type": "object",
        "properties": {
          "aggregation": {
            "type": "string",
            "nullable": true
          },
          "aggregationDate": {
            "type": "string",
            "nullable": true
          },
          "activities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ITimelineTimelineResponse": {
        "type": "object",
        "properties": {
          "timelines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ITimeline"
            },
            "description": "The list of all time lines in the time span.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MinimalActivityModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "eventDate": {
            "type": "string",
            "format": "date-time"
          },
          "projectId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "NameModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BaseTaskEntity": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the task. Max allowed length: 25000 characters.\r\nRequired.",
            "nullable": true,
            "example": "Create logo concept"
          },
          "id": {
            "type": "string",
            "description": "The id of the parent task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The user id this task belongs to in case this is a private task.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project this task is part of.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectEntity"
          },
          "parentId": {
            "type": "string",
            "description": "The id of the parent task of this task, if this task is a subtask.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "parentTask": {
            "$ref": "#/components/schemas/ParentTaskEntity"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskAssignmentEntity"
            },
            "description": "The assignees of the task.",
            "nullable": true
          },
          "baseType": {
            "type": "string",
            "description": "The base type of the task.",
            "nullable": true,
            "example": "projecttask"
          },
          "isExternal": {
            "type": "boolean",
            "description": "Whether this task is external."
          },
          "isHiddenForConnectUsers": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CommentSearchModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAccessStatistic"
            },
            "description": "The current user's access stats for this entity.",
            "nullable": true
          },
          "indexTime": {
            "type": "string",
            "description": "The last time this entity has been indexed.",
            "format": "date-time"
          },
          "message": {
            "type": "string",
            "description": "The message of this comment.",
            "nullable": true,
            "example": "The new design proposals are ready!"
          },
          "entityType": {
            "enum": [
              "tasks",
              "projects",
              "documents"
            ],
            "type": "string",
            "description": "The type of the entity that this comment is attached to."
          },
          "entityId": {
            "type": "string",
            "description": "The id of the entity that this comment is attached to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectEntity"
          },
          "task": {
            "$ref": "#/components/schemas/BaseTaskEntity"
          },
          "document": {
            "$ref": "#/components/schemas/DocumentEntity"
          },
          "isExternal": {
            "type": "boolean",
            "description": "Whether this comment is external."
          },
          "userId": {
            "type": "string",
            "description": "The id of the user who created this comment.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "Whether this comment is hidden for connect users."
          },
          "isResolved": {
            "type": "boolean",
            "description": "Whether the comment has been resolved.\r\nOnly available for comments on documents.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommentSearchModelHit": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The name of the type for this search hit.",
            "nullable": true,
            "readOnly": true,
            "example": "task"
          },
          "score": {
            "type": "number",
            "description": "The score of this search hit.",
            "format": "double",
            "example": 2.9
          },
          "entity": {
            "$ref": "#/components/schemas/CommentSearchModel"
          },
          "highlights": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "description": "The highlights of this search hit, by property.",
            "nullable": true,
            "example": {
              "description": [
                "in this creative project"
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "CommentSearchModelTypeSearchResult": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "The count of search hits for this type.",
            "format": "int64",
            "readOnly": true,
            "example": 7
          },
          "maxScore": {
            "type": "number",
            "description": "The score of the best search hit for this type.",
            "format": "double",
            "readOnly": true,
            "example": 1.9
          },
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommentSearchModelHit"
            },
            "description": "The results found by this search operation for this type.",
            "nullable": true,
            "readOnly": true
          },
          "hasHits": {
            "type": "boolean",
            "description": "Whether there are any hits at all, computed property.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CompanySearchModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAccessStatistic"
            },
            "description": "The current user's access stats for this entity.",
            "nullable": true
          },
          "indexTime": {
            "type": "string",
            "description": "The last time this entity has been indexed.",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "The company name.",
            "nullable": true,
            "example": "NCNSTN Brand Design"
          },
          "industry": {
            "type": "string",
            "description": "The company's industry. Optional.",
            "nullable": true,
            "example": "Brand Agency"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The tags of the company.",
            "nullable": true,
            "example": [
              "Brand Agency"
            ]
          },
          "companyContactInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactInfoEntity"
            },
            "description": "The contact infos of this company.",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the user has an image.",
            "nullable": true,
            "example": true
          }
        },
        "additionalProperties": false
      },
      "CompanySearchModelHit": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The name of the type for this search hit.",
            "nullable": true,
            "readOnly": true,
            "example": "task"
          },
          "score": {
            "type": "number",
            "description": "The score of this search hit.",
            "format": "double",
            "example": 2.9
          },
          "entity": {
            "$ref": "#/components/schemas/CompanySearchModel"
          },
          "highlights": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "description": "The highlights of this search hit, by property.",
            "nullable": true,
            "example": {
              "description": [
                "in this creative project"
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "CompanySearchModelTypeSearchResult": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "The count of search hits for this type.",
            "format": "int64",
            "readOnly": true,
            "example": 7
          },
          "maxScore": {
            "type": "number",
            "description": "The score of the best search hit for this type.",
            "format": "double",
            "readOnly": true,
            "example": 1.9
          },
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanySearchModelHit"
            },
            "description": "The results found by this search operation for this type.",
            "nullable": true,
            "readOnly": true
          },
          "hasHits": {
            "type": "boolean",
            "description": "Whether there are any hits at all, computed property.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ContactInfoEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of this contact info.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "value": {
            "type": "string",
            "description": "The value of the contact info.",
            "nullable": true,
            "example": null
          },
          "type": {
            "type": "string",
            "description": "The type of the contact info. Possible values are: 'phone', 'email', 'address', 'custom'.",
            "nullable": true,
            "example": "address"
          },
          "subType": {
            "type": "string",
            "description": "The subtype of the contact info, Possible values are:\r\nphone: [ 'central', 'other' ]\r\nemail: [ 'central', 'invoice', 'other' ]\r\naddress: [ 'central', 'invoice', 'other' ] url: [ 'primary', 'other']",
            "nullable": true,
            "example": "central"
          },
          "isAddress": {
            "type": "boolean",
            "description": "Flags whether this contact info is an address. If it's an address, the address fields are required.",
            "example": true
          },
          "addressLine1": {
            "type": "string",
            "description": "The first address line of the contact info.",
            "nullable": true,
            "example": "Torstrasse 140"
          },
          "addressLine2": {
            "type": "string",
            "description": "The second address line of the contact info.",
            "nullable": true,
            "example": "Hof A"
          },
          "zipCode": {
            "type": "string",
            "description": "The zipcode of the contact info.",
            "nullable": true,
            "example": "10119"
          },
          "city": {
            "type": "string",
            "description": "The city of the contact info.",
            "nullable": true,
            "example": "Berlin"
          },
          "state": {
            "type": "string",
            "description": "The state of the contact info.",
            "nullable": true,
            "example": null
          },
          "country": {
            "type": "string",
            "description": "The 2 letter iso code of the country.",
            "nullable": true,
            "example": "DE"
          }
        },
        "additionalProperties": false
      },
      "ContributorEntity": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "accessLevel": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DashboardNoteSearchModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAccessStatistic"
            },
            "description": "The current user's access stats for this entity.",
            "nullable": true
          },
          "indexTime": {
            "type": "string",
            "description": "The last time this entity has been indexed.",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "The name of the dashboard widget note.",
            "nullable": true,
            "example": "Reminders for today"
          },
          "note": {
            "type": "string",
            "description": "The note of the dashboard widget note.",
            "nullable": true,
            "example": "Ask the client about the new logo."
          },
          "userId": {
            "type": "string",
            "description": "The id of the user the dashboard note belongs to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "DashboardNoteSearchModelHit": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The name of the type for this search hit.",
            "nullable": true,
            "readOnly": true,
            "example": "task"
          },
          "score": {
            "type": "number",
            "description": "The score of this search hit.",
            "format": "double",
            "example": 2.9
          },
          "entity": {
            "$ref": "#/components/schemas/DashboardNoteSearchModel"
          },
          "highlights": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "description": "The highlights of this search hit, by property.",
            "nullable": true,
            "example": {
              "description": [
                "in this creative project"
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "DashboardNoteSearchModelTypeSearchResult": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "The count of search hits for this type.",
            "format": "int64",
            "readOnly": true,
            "example": 7
          },
          "maxScore": {
            "type": "number",
            "description": "The score of the best search hit for this type.",
            "format": "double",
            "readOnly": true,
            "example": 1.9
          },
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardNoteSearchModelHit"
            },
            "description": "The results found by this search operation for this type.",
            "nullable": true,
            "readOnly": true
          },
          "hasHits": {
            "type": "boolean",
            "description": "Whether there are any hits at all, computed property.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DocumentContributorEntity": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "accessLevel": {
            "type": "string",
            "nullable": true
          },
          "documentId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "inheritedFromDocumentContributorId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "inheritedDocumentContributor": {
            "$ref": "#/components/schemas/InheritedDocumentContributorEntity"
          }
        },
        "additionalProperties": false
      },
      "DocumentEntity": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the document.",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "The content of the document. This is indexed for search and highlighting but not returned in search results.",
            "nullable": true
          },
          "documentSpaceId": {
            "type": "string",
            "description": "The id of the document space.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "documentSpace": {
            "$ref": "#/components/schemas/DocumentSpaceEntity"
          },
          "parentId": {
            "type": "string",
            "description": "The id of the document's parent document.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "emoji": {
            "type": "string",
            "description": "The emoji of the document.",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project this document references.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectEntity"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether the document is private."
          },
          "isExternal": {
            "type": "boolean",
            "description": "Whether the document belongs to an external project."
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "Whether the document is hidden for connect users."
          },
          "contributors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentContributorEntity"
            },
            "description": "The contributors of this document.",
            "nullable": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentToTeamEntity"
            },
            "description": "The teams this document is connected to.",
            "nullable": true
          },
          "workspaceAccessLevel": {
            "type": "string",
            "description": "Determines the level of access to this document granted to all workspace users.\r\nCan be either not set (no access), `read`, or `manage`.",
            "nullable": true
          },
          "inheritedWorkspaceAccessFromDocumentId": {
            "type": "string",
            "description": "The id of the document the workspace access level permission has been inherited from.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "inheritedWorkspaceAccessFromDocument": {
            "$ref": "#/components/schemas/InheritedWorkspaceAccessFromDocumentEntity"
          },
          "rootDocumentCreatedBy": {
            "type": "string",
            "description": "The user id of the creator of the root document of this document's document tree.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "DocumentSearchModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAccessStatistic"
            },
            "description": "The current user's access stats for this entity.",
            "nullable": true
          },
          "indexTime": {
            "type": "string",
            "description": "The last time this entity has been indexed.",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "The name of the document.",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "The content of the document. This is indexed for search and highlighting but not returned in search results.",
            "nullable": true
          },
          "documentSpaceId": {
            "type": "string",
            "description": "The id of the document space.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "documentSpace": {
            "$ref": "#/components/schemas/DocumentSpaceEntity"
          },
          "parentId": {
            "type": "string",
            "description": "The id of the document's parent document.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "emoji": {
            "type": "string",
            "description": "The emoji of the document.",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project this document references.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectEntity"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether the document is private."
          },
          "isExternal": {
            "type": "boolean",
            "description": "Whether the document belongs to an external project."
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "Whether the document is hidden for connect users."
          },
          "contributors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentContributorEntity"
            },
            "description": "The contributors of this document.",
            "nullable": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentToTeamEntity"
            },
            "description": "The teams this document is connected to.",
            "nullable": true
          },
          "workspaceAccessLevel": {
            "type": "string",
            "description": "Determines the level of access to this document granted to all workspace users.\r\nCan be either not set (no access), `read`, or `manage`.",
            "nullable": true
          },
          "inheritedWorkspaceAccessFromDocumentId": {
            "type": "string",
            "description": "The id of the document the workspace access level permission has been inherited from.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "inheritedWorkspaceAccessFromDocument": {
            "$ref": "#/components/schemas/InheritedWorkspaceAccessFromDocumentEntity"
          },
          "rootDocumentCreatedBy": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "DocumentSearchModelHit": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The name of the type for this search hit.",
            "nullable": true,
            "readOnly": true,
            "example": "task"
          },
          "score": {
            "type": "number",
            "description": "The score of this search hit.",
            "format": "double",
            "example": 2.9
          },
          "entity": {
            "$ref": "#/components/schemas/DocumentSearchModel"
          },
          "highlights": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "description": "The highlights of this search hit, by property.",
            "nullable": true,
            "example": {
              "description": [
                "in this creative project"
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "DocumentSearchModelTypeSearchResult": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "The count of search hits for this type.",
            "format": "int64",
            "readOnly": true,
            "example": 7
          },
          "maxScore": {
            "type": "number",
            "description": "The score of the best search hit for this type.",
            "format": "double",
            "readOnly": true,
            "example": 1.9
          },
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentSearchModelHit"
            },
            "description": "The results found by this search operation for this type.",
            "nullable": true,
            "readOnly": true
          },
          "hasHits": {
            "type": "boolean",
            "description": "Whether there are any hits at all, computed property.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DocumentSpaceEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "workspaceAccessLevel": {
            "type": "string",
            "nullable": true
          },
          "contributors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContributorEntity"
            },
            "nullable": true
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityToTeamEntity"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentToTeamEntity": {
        "type": "object",
        "properties": {
          "teamId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "accessLevel": {
            "type": "string",
            "nullable": true
          },
          "documentId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "inheritedFromDocumentToTeamId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "inheritedDocumentToTeam": {
            "$ref": "#/components/schemas/InheritedDocumentToTeamEntity"
          }
        },
        "additionalProperties": false
      },
      "EntityAccessForm": {
        "type": "object",
        "properties": {
          "entityId": {
            "type": "string",
            "description": "The id of the entity that was accessed.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "accessedOn": {
            "type": "string",
            "description": "The date and time the entity was accessed by the user.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T14:21:00Z"
          },
          "entityType": {
            "type": "string",
            "description": "The tpye of the entity that has been accessed.\r\nValid values: 'company', 'project', 'task' and 'user'",
            "nullable": true,
            "example": "task"
          }
        },
        "additionalProperties": false
      },
      "EntityToTeamEntity": {
        "type": "object",
        "properties": {
          "teamId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "accessLevel": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FileSearchModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAccessStatistic"
            },
            "description": "The current user's access stats for this entity.",
            "nullable": true
          },
          "indexTime": {
            "type": "string",
            "description": "The last time this entity has been indexed.",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "The name of the file.",
            "nullable": true,
            "example": "Logo for concept."
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that has created the file.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "entityType": {
            "type": "string",
            "description": "The type of the entity that this file is attached to.",
            "nullable": true
          },
          "entityId": {
            "type": "string",
            "description": "The id of the entity that this file is attached to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectEntity"
          },
          "task": {
            "$ref": "#/components/schemas/BaseTaskEntity"
          },
          "isExternal": {
            "type": "boolean",
            "description": "Whether this file is external."
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "Whether this comment is hidden for connect users."
          }
        },
        "additionalProperties": false
      },
      "FileSearchModelHit": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The name of the type for this search hit.",
            "nullable": true,
            "readOnly": true,
            "example": "task"
          },
          "score": {
            "type": "number",
            "description": "The score of this search hit.",
            "format": "double",
            "example": 2.9
          },
          "entity": {
            "$ref": "#/components/schemas/FileSearchModel"
          },
          "highlights": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "description": "The highlights of this search hit, by property.",
            "nullable": true,
            "example": {
              "description": [
                "in this creative project"
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "FileSearchModelTypeSearchResult": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "The count of search hits for this type.",
            "format": "int64",
            "readOnly": true,
            "example": 7
          },
          "maxScore": {
            "type": "number",
            "description": "The score of the best search hit for this type.",
            "format": "double",
            "readOnly": true,
            "example": 1.9
          },
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileSearchModelHit"
            },
            "description": "The results found by this search operation for this type.",
            "nullable": true,
            "readOnly": true
          },
          "hasHits": {
            "type": "boolean",
            "description": "Whether there are any hits at all, computed property.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "InheritedDocumentContributorEntity": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "accessLevel": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InheritedDocumentToTeamEntity": {
        "type": "object",
        "properties": {
          "documentId": {
            "type": "string",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "accessLevel": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InheritedWorkspaceAccessFromDocumentEntity": {
        "type": "object",
        "properties": {
          "workspaceAccessLevel": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ParentTaskEntity": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the task. Max allowed length: 25000 characters.\r\nRequired.",
            "nullable": true,
            "example": "Create logo concept"
          },
          "id": {
            "type": "string",
            "description": "The id of the parent task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The user id this task belongs to in case this is a private task.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "assigneeIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The user ids this task is assigned to.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProjectEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of this project.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the Project. Required. Max allowed length: 25000 characters.",
            "nullable": true,
            "example": "Website Design"
          },
          "company": {
            "type": "string",
            "description": "The company this project is for.",
            "nullable": true,
            "example": "Productivity Inc."
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether this is a private project only visible to members and the creator.",
            "example": false
          },
          "isBillableByDefault": {
            "type": "boolean",
            "description": "Whether project times should be billable by default.",
            "nullable": true,
            "example": true
          },
          "projectStatus": {
            "$ref": "#/components/schemas/ProjectStatusEntity"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this project.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamEntity"
            },
            "description": "The teams this project belongs to.",
            "nullable": true
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectMemberEntity"
            },
            "description": "The members of this project.",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "Whether this project is external."
          }
        },
        "additionalProperties": false
      },
      "ProjectMemberEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of this project member.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user that is member of this project.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the user.",
            "nullable": true,
            "example": "Carla"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user.",
            "nullable": true,
            "example": "Creative"
          },
          "projectRoleName": {
            "type": "string",
            "description": "The project role name of the project member.",
            "nullable": true,
            "example": "Project Manager"
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the user has an image.",
            "nullable": true,
            "example": true
          },
          "projectRoleId": {
            "type": "string",
            "description": "The id of the project role.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "ProjectSearchModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAccessStatistic"
            },
            "description": "The current user's access stats for this entity.",
            "nullable": true
          },
          "indexTime": {
            "type": "string",
            "description": "The last time this entity has been indexed.",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "The name of the Project. Required. Max allowed length: 25000 characters.",
            "nullable": true,
            "example": "Website Design"
          },
          "description": {
            "type": "string",
            "description": "The description of the project. Max allowed length: 25000 characters.",
            "nullable": true,
            "example": "Design a new website that reflects the new brand identity."
          },
          "projectTypeId": {
            "type": "string",
            "description": "The id of the project type of this project.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectStatusId": {
            "type": "string",
            "description": "The id of the project status.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isPrivate": {
            "type": "boolean",
            "description": "Whether this is a private project only visible to members and the creator.",
            "example": false
          },
          "isOpen": {
            "type": "boolean",
            "description": "Whether this project is not closed.",
            "example": true
          },
          "isBillableByDefault": {
            "type": "boolean",
            "description": "Whether project times should be billable by default.",
            "nullable": true,
            "example": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The tags of this project.",
            "nullable": true,
            "example": [
              "Design"
            ]
          },
          "plannedDuration": {
            "type": "integer",
            "description": "The total planned time of the project, in seconds.\r\nThe time is calculated as te sum of the planned duration by all project tasks.",
            "format": "int32",
            "nullable": true,
            "example": 432000
          },
          "dueDate": {
            "type": "string",
            "description": "The due date of the project.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-05-01T00:00:00Z"
          },
          "startDate": {
            "type": "string",
            "description": "The start date of the project.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T00:00:00Z"
          },
          "company": {
            "$ref": "#/components/schemas/CompanySearchModel"
          },
          "projectType": {
            "$ref": "#/components/schemas/ProjectTypeEntity"
          },
          "projectStatus": {
            "$ref": "#/components/schemas/ProjectStatusEntity"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectMemberEntity"
            },
            "description": "The members of this project.",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the project has an image.",
            "nullable": true,
            "example": true
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this project.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamEntity"
            },
            "description": "The teams this project belongs to.",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "Whether this project is external."
          }
        },
        "additionalProperties": false
      },
      "ProjectSearchModelHit": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The name of the type for this search hit.",
            "nullable": true,
            "readOnly": true,
            "example": "task"
          },
          "score": {
            "type": "number",
            "description": "The score of this search hit.",
            "format": "double",
            "example": 2.9
          },
          "entity": {
            "$ref": "#/components/schemas/ProjectSearchModel"
          },
          "highlights": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "description": "The highlights of this search hit, by property.",
            "nullable": true,
            "example": {
              "description": [
                "in this creative project"
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "ProjectSearchModelTypeSearchResult": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "The count of search hits for this type.",
            "format": "int64",
            "readOnly": true,
            "example": 7
          },
          "maxScore": {
            "type": "number",
            "description": "The score of the best search hit for this type.",
            "format": "double",
            "readOnly": true,
            "example": 1.9
          },
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectSearchModelHit"
            },
            "description": "The results found by this search operation for this type.",
            "nullable": true,
            "readOnly": true
          },
          "hasHits": {
            "type": "boolean",
            "description": "Whether there are any hits at all, computed property.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ProjectStatusEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of this project status.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the project status.",
            "nullable": true,
            "example": "In Progress"
          },
          "type": {
            "type": "string",
            "description": "The general type of this project status.",
            "nullable": true,
            "example": "progress"
          }
        },
        "additionalProperties": false
      },
      "ProjectTypeEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the type.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the project type.",
            "nullable": true,
            "example": "Brand Strategy"
          },
          "icon": {
            "type": "string",
            "description": "The identifier of the project type icon.",
            "nullable": true,
            "example": "award"
          }
        },
        "additionalProperties": false
      },
      "SearchResults": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "The overall number of hits.",
            "format": "int64",
            "readOnly": true,
            "example": 15
          },
          "maxScore": {
            "type": "number",
            "description": "The highest overall search score.",
            "format": "double",
            "readOnly": true,
            "example": 0.9
          },
          "top": {
            "type": "array",
            "items": {},
            "description": "The best search matches accross all types ordered descending by their score.",
            "nullable": true,
            "example": [
              {
                "type": "task",
                "score": 28,
                "entity": {
                  "baseType": "projecttask",
                  "name": "Website Design"
                }
              }
            ]
          },
          "commentHits": {
            "$ref": "#/components/schemas/CommentSearchModelTypeSearchResult"
          },
          "companyHits": {
            "$ref": "#/components/schemas/CompanySearchModelTypeSearchResult"
          },
          "dashboardNotesHits": {
            "$ref": "#/components/schemas/DashboardNoteSearchModelTypeSearchResult"
          },
          "projectHits": {
            "$ref": "#/components/schemas/ProjectSearchModelTypeSearchResult"
          },
          "taskHits": {
            "$ref": "#/components/schemas/TaskSearchModelTypeSearchResult"
          },
          "timeEntriesHits": {
            "$ref": "#/components/schemas/TimeEntrySearchModelTypeSearchResult"
          },
          "timeReportsHits": {
            "$ref": "#/components/schemas/TimeReportSearchModelTypeSearchResult"
          },
          "userHits": {
            "$ref": "#/components/schemas/UserSearchModelTypeSearchResult"
          },
          "taskListHits": {
            "$ref": "#/components/schemas/TaskListSearchModelTypeSearchResult"
          },
          "fileHits": {
            "$ref": "#/components/schemas/FileSearchModelTypeSearchResult"
          },
          "documentHits": {
            "$ref": "#/components/schemas/DocumentSearchModelTypeSearchResult"
          }
        },
        "additionalProperties": false
      },
      "TaskAssignmentEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The assigned user's id.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "firstName": {
            "type": "string",
            "description": "The assigned user's first name.",
            "nullable": true,
            "example": "Carla"
          },
          "lastName": {
            "type": "string",
            "description": "The assigned user's last name.",
            "nullable": true,
            "example": "Creative"
          }
        },
        "additionalProperties": false
      },
      "TaskListSearchModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAccessStatistic"
            },
            "description": "The current user's access stats for this entity.",
            "nullable": true
          },
          "indexTime": {
            "type": "string",
            "description": "The last time this entity has been indexed.",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "The name of the task list.",
            "nullable": true,
            "example": "Create logo concept"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectEntity"
          },
          "isExternal": {
            "type": "boolean",
            "description": "Whether this task list is external."
          }
        },
        "additionalProperties": false
      },
      "TaskListSearchModelHit": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The name of the type for this search hit.",
            "nullable": true,
            "readOnly": true,
            "example": "task"
          },
          "score": {
            "type": "number",
            "description": "The score of this search hit.",
            "format": "double",
            "example": 2.9
          },
          "entity": {
            "$ref": "#/components/schemas/TaskListSearchModel"
          },
          "highlights": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "description": "The highlights of this search hit, by property.",
            "nullable": true,
            "example": {
              "description": [
                "in this creative project"
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "TaskListSearchModelTypeSearchResult": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "The count of search hits for this type.",
            "format": "int64",
            "readOnly": true,
            "example": 7
          },
          "maxScore": {
            "type": "number",
            "description": "The score of the best search hit for this type.",
            "format": "double",
            "readOnly": true,
            "example": 1.9
          },
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskListSearchModelHit"
            },
            "description": "The results found by this search operation for this type.",
            "nullable": true,
            "readOnly": true
          },
          "hasHits": {
            "type": "boolean",
            "description": "Whether there are any hits at all, computed property.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TaskSearchModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAccessStatistic"
            },
            "description": "The current user's access stats for this entity.",
            "nullable": true
          },
          "indexTime": {
            "type": "string",
            "description": "The last time this entity has been indexed.",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "The name of the task. Max allowed length: 25000 characters.\r\nRequired.",
            "nullable": true,
            "example": "Create logo concept"
          },
          "description": {
            "type": "string",
            "description": "The description of the task. Max allowed length: 25000 characters.",
            "nullable": true,
            "example": "Logo design for the new website."
          },
          "baseType": {
            "type": "string",
            "description": "The base type of the task.",
            "nullable": true,
            "example": "projecttask"
          },
          "assignees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskAssignmentEntity"
            },
            "description": "The assignees of the task.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The tags of this task.",
            "nullable": true,
            "example": [
              "Design"
            ]
          },
          "lists": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The task lists this task is in.",
            "nullable": true,
            "example": [
              "Preparation and Concepts"
            ]
          },
          "isPrio": {
            "type": "boolean",
            "description": "Whether this task is marked as priority.",
            "nullable": true,
            "example": true
          },
          "isOpen": {
            "type": "boolean",
            "description": "Whether this task is open.",
            "example": true
          },
          "plannedDuration": {
            "type": "integer",
            "description": "The expected planned workload of the task, in seconds.",
            "format": "int32",
            "nullable": true,
            "example": 21600
          },
          "remainingDuration": {
            "type": "integer",
            "description": "The expected remaining duration from the original planned effort of the task, in seconds.",
            "format": "int32",
            "nullable": true,
            "example": 10500
          },
          "startOn": {
            "type": "string",
            "description": "The expected start date and time of the task.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-03-03T17:00:00Z"
          },
          "dueOn": {
            "type": "string",
            "description": "The expected due date and time of the task.",
            "format": "date-time",
            "nullable": true,
            "example": "2021-03-18T17:00:00Z"
          },
          "taskStatus": {
            "$ref": "#/components/schemas/TaskStatusEntity"
          },
          "typeOfWork": {
            "$ref": "#/components/schemas/TypeOfWorkEntity"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project this task is part of.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectEntity"
          },
          "parentId": {
            "type": "string",
            "description": "The id of the parent task of this task, if this task is a subtask.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "parentTask": {
            "$ref": "#/components/schemas/ParentTaskEntity"
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation id of this task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "subtaskOrder": {
            "type": "number",
            "description": "The order of this subtask in the parent task, if this task is a subtask.",
            "format": "double",
            "nullable": true,
            "example": null
          },
          "userId": {
            "type": "string",
            "description": "The user id this task belongs to in case this is a private task.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user that created this task.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isExternal": {
            "type": "boolean",
            "description": "Whether this task is external."
          },
          "isHiddenForConnectUsers": {
            "type": "boolean",
            "description": "Whether this task should be hidden for connected users."
          }
        },
        "additionalProperties": false
      },
      "TaskSearchModelHit": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The name of the type for this search hit.",
            "nullable": true,
            "readOnly": true,
            "example": "task"
          },
          "score": {
            "type": "number",
            "description": "The score of this search hit.",
            "format": "double",
            "example": 2.9
          },
          "entity": {
            "$ref": "#/components/schemas/TaskSearchModel"
          },
          "highlights": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "description": "The highlights of this search hit, by property.",
            "nullable": true,
            "example": {
              "description": [
                "in this creative project"
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "TaskSearchModelTypeSearchResult": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "The count of search hits for this type.",
            "format": "int64",
            "readOnly": true,
            "example": 7
          },
          "maxScore": {
            "type": "number",
            "description": "The score of the best search hit for this type.",
            "format": "double",
            "readOnly": true,
            "example": 1.9
          },
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskSearchModelHit"
            },
            "description": "The results found by this search operation for this type.",
            "nullable": true,
            "readOnly": true
          },
          "hasHits": {
            "type": "boolean",
            "description": "Whether there are any hits at all, computed property.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TaskStatusEntity": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the task status.",
            "nullable": true,
            "example": "Concept"
          },
          "type": {
            "type": "string",
            "description": "The general type of this task status.",
            "nullable": true,
            "example": "progress"
          },
          "icon": {
            "type": "string",
            "description": "The icon of the task status.",
            "nullable": true,
            "example": "arrow_forward"
          }
        },
        "additionalProperties": false
      },
      "TeamEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of this team.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The name of the team.",
            "nullable": true,
            "example": "Design Team"
          }
        },
        "additionalProperties": false
      },
      "TimeEntrySearchModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAccessStatistic"
            },
            "description": "The current user's access stats for this entity.",
            "nullable": true
          },
          "indexTime": {
            "type": "string",
            "description": "The last time this entity has been indexed.",
            "format": "date-time"
          },
          "note": {
            "type": "string",
            "description": "The note of the time tracking.",
            "nullable": true,
            "example": "I created a first draft for the new sitemap"
          },
          "taskId": {
            "type": "string",
            "description": "The id of the task this time entry belongs to.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project this time entry belongs to.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "project": {
            "$ref": "#/components/schemas/ProjectEntity"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user this time entry belongs to.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "startDateUtc": {
            "type": "string",
            "description": "The date and time (in UTC) when the time tracking was started.",
            "format": "date-time",
            "nullable": true,
            "example": "2022-03-01T00:00:00Z"
          },
          "startTimeUtc": {
            "type": "string",
            "description": "The time (in UTC) when the time tracking was started.",
            "nullable": true,
            "example": "09:21:00"
          },
          "timezone": {
            "type": "string",
            "description": "The original timezone of the time tracking.\r\nThe format of the timezone is the IANA standard.",
            "nullable": true,
            "example": "Europe/Berlin"
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the time tracking in seconds.\r\nRequired when the time tracking has already been completed and EndTime has not been set.",
            "format": "int32",
            "nullable": true,
            "example": 8635
          },
          "breakDuration": {
            "type": "integer",
            "description": "The duration of the break in seconds.\r\nCannot be set via API.",
            "format": "int32",
            "nullable": true
          },
          "isExternal": {
            "type": "boolean",
            "description": "Whether this time entry is external."
          },
          "isBilled": {
            "type": "boolean",
            "description": "Whether this time entry is billed."
          }
        },
        "additionalProperties": false
      },
      "TimeEntrySearchModelHit": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The name of the type for this search hit.",
            "nullable": true,
            "readOnly": true,
            "example": "task"
          },
          "score": {
            "type": "number",
            "description": "The score of this search hit.",
            "format": "double",
            "example": 2.9
          },
          "entity": {
            "$ref": "#/components/schemas/TimeEntrySearchModel"
          },
          "highlights": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "description": "The highlights of this search hit, by property.",
            "nullable": true,
            "example": {
              "description": [
                "in this creative project"
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "TimeEntrySearchModelTypeSearchResult": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "The count of search hits for this type.",
            "format": "int64",
            "readOnly": true,
            "example": 7
          },
          "maxScore": {
            "type": "number",
            "description": "The score of the best search hit for this type.",
            "format": "double",
            "readOnly": true,
            "example": 1.9
          },
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeEntrySearchModelHit"
            },
            "description": "The results found by this search operation for this type.",
            "nullable": true,
            "readOnly": true
          },
          "hasHits": {
            "type": "boolean",
            "description": "Whether there are any hits at all, computed property.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TimeReportSearchModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAccessStatistic"
            },
            "description": "The current user's access stats for this entity.",
            "nullable": true
          },
          "indexTime": {
            "type": "string",
            "description": "The last time this entity has been indexed.",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "description": "The name of the time report.",
            "nullable": true,
            "example": "Weekly reporting"
          },
          "shared": {
            "type": "boolean",
            "description": "Whether the time report is shared with other users."
          },
          "userId": {
            "type": "string",
            "description": "The id of the user that created the time report.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "TimeReportSearchModelHit": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The name of the type for this search hit.",
            "nullable": true,
            "readOnly": true,
            "example": "task"
          },
          "score": {
            "type": "number",
            "description": "The score of this search hit.",
            "format": "double",
            "example": 2.9
          },
          "entity": {
            "$ref": "#/components/schemas/TimeReportSearchModel"
          },
          "highlights": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "description": "The highlights of this search hit, by property.",
            "nullable": true,
            "example": {
              "description": [
                "in this creative project"
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "TimeReportSearchModelTypeSearchResult": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "The count of search hits for this type.",
            "format": "int64",
            "readOnly": true,
            "example": 7
          },
          "maxScore": {
            "type": "number",
            "description": "The score of the best search hit for this type.",
            "format": "double",
            "readOnly": true,
            "example": 1.9
          },
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeReportSearchModelHit"
            },
            "description": "The results found by this search operation for this type.",
            "nullable": true,
            "readOnly": true
          },
          "hasHits": {
            "type": "boolean",
            "description": "Whether there are any hits at all, computed property.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TypeOfWorkEntity": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the type of work.",
            "nullable": true,
            "example": "Concept"
          }
        },
        "additionalProperties": false
      },
      "UserAccessStatistic": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The id of the user that accessed this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "openCount": {
            "type": "integer",
            "description": "How many times the user accessed this entity.",
            "format": "int32",
            "example": 12
          },
          "lastOpened": {
            "type": "integer",
            "description": "The unix time of when the entity was last accessed by the user.",
            "format": "int64",
            "nullable": true,
            "example": 1646119800
          }
        },
        "additionalProperties": false
      },
      "UserSearchModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspaceId": {
            "type": "string",
            "description": "The workspace id of this entity.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAccessStatistic"
            },
            "description": "The current user's access stats for this entity.",
            "nullable": true
          },
          "indexTime": {
            "type": "string",
            "description": "The last time this entity has been indexed.",
            "format": "date-time"
          },
          "firstName": {
            "type": "string",
            "description": "The user's first name.",
            "nullable": true,
            "example": "Carla"
          },
          "lastName": {
            "type": "string",
            "description": "The user's last name.",
            "nullable": true,
            "example": "Creative"
          },
          "title": {
            "type": "string",
            "description": "The user's title.",
            "nullable": true,
            "example": "Ms"
          },
          "position": {
            "type": "string",
            "description": "The user's position.",
            "nullable": true,
            "example": "Creative Director"
          },
          "language": {
            "type": "string",
            "description": "The user's language.",
            "nullable": true,
            "example": "de-DE"
          },
          "gender": {
            "type": "string",
            "description": "The user's gender.",
            "nullable": true,
            "example": "Creative"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The tags of this user.",
            "nullable": true,
            "example": [
              "Design"
            ]
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamModel"
            },
            "description": "The teams of this user.",
            "nullable": true
          },
          "userContactInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactInfoEntity"
            },
            "description": "The contact infos of this user.",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean",
            "nullable": true
          },
          "isDeactivated": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserSearchModelHit": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The name of the type for this search hit.",
            "nullable": true,
            "readOnly": true,
            "example": "task"
          },
          "score": {
            "type": "number",
            "description": "The score of this search hit.",
            "format": "double",
            "example": 2.9
          },
          "entity": {
            "$ref": "#/components/schemas/UserSearchModel"
          },
          "highlights": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "description": "The highlights of this search hit, by property.",
            "nullable": true,
            "example": {
              "description": [
                "in this creative project"
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "UserSearchModelTypeSearchResult": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "The count of search hits for this type.",
            "format": "int64",
            "readOnly": true,
            "example": 7
          },
          "maxScore": {
            "type": "number",
            "description": "The score of the best search hit for this type.",
            "format": "double",
            "readOnly": true,
            "example": 1.9
          },
          "hits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSearchModelHit"
            },
            "description": "The results found by this search operation for this type.",
            "nullable": true,
            "readOnly": true
          },
          "hasHits": {
            "type": "boolean",
            "description": "Whether there are any hits at all, computed property.",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AcceptInvitation": {
        "type": "object",
        "properties": {
          "invitationCode": {
            "type": "string",
            "description": "The invitation code provided when creating the invitation.",
            "nullable": true,
            "example": "a368cfdb4="
          },
          "referralCode": {
            "type": "string",
            "description": "The referral code provided when creating the invitation from a referral.",
            "nullable": true,
            "example": "cdf989ff="
          }
        },
        "additionalProperties": false,
        "description": "The invitation of a user to a workspace."
      },
      "Invitation": {
        "type": "object",
        "properties": {
          "workspaceId": {
            "type": "string",
            "description": "The id of the workspace to invite the user to.\r\nIf not set, a new workspace will be created.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "invitationFlow": {
            "type": "string",
            "description": "The current invitation flow.\r\nUse 'invite' for an invitation from a system admin,\r\n'new_user_new_workspace' for an invitation when creating a workspace for a new user or\r\n'existing_user_new_workspace' when creating a workspace for an existing user.",
            "nullable": true,
            "example": "invite"
          },
          "roleId": {
            "type": "string",
            "description": "The id of the role to which the new user should be added.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "connectInviteCode": {
            "type": "string",
            "description": "The awork connect invite code.",
            "nullable": true
          },
          "passcode": {
            "type": "string",
            "description": "The bot prevention passcode.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The email of the user to be invited.",
            "nullable": true,
            "example": "carla.creative@ncnstn.com"
          },
          "password": {
            "type": "string",
            "description": "The Password of the user to be invited.",
            "nullable": true,
            "example": "AC0mplexP@ssw0rd"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the user to be invited.",
            "nullable": true,
            "example": "Carla"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user to be invited.",
            "nullable": true,
            "example": "Creative"
          },
          "title": {
            "type": "string",
            "description": "The title of the user to be invited.",
            "nullable": true,
            "example": "Miss"
          },
          "position": {
            "type": "string",
            "description": "The position of the user to be invited.",
            "nullable": true,
            "example": "Creative Director"
          },
          "gender": {
            "type": "string",
            "description": "The gender of the user to be invited. Can be 'male', 'female' or 'other'.",
            "nullable": true,
            "example": "female"
          },
          "skipSendingEmail": {
            "type": "boolean",
            "description": "If set to true, skips sending the welcome email. Important for batch invites.",
            "example": false
          },
          "teamIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The list of team ids where the user should be assigned to.",
            "nullable": true
          },
          "bookedSeats": {
            "type": "integer",
            "description": "The amount of booked seats.",
            "format": "int32",
            "nullable": true,
            "example": 25
          }
        },
        "additionalProperties": false,
        "description": "The invitation of a user to a workspace."
      },
      "InvitationResponse": {
        "type": "object",
        "properties": {
          "invitationCode": {
            "type": "string",
            "description": "The invitation code that is used to confirm the invitation.\r\nThe code is valid for 24 hours.",
            "nullable": true,
            "example": "a368cfdb4="
          },
          "passwordResetCode": {
            "type": "string",
            "description": "A code that is used to reset the user's password.",
            "nullable": true,
            "example": "f84ab34="
          },
          "userId": {
            "type": "string",
            "description": "The id of the user that has been invited.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspace": {
            "$ref": "#/components/schemas/Workspace"
          }
        },
        "additionalProperties": false
      },
      "MigrateGuestUserInWorkspaceForm": {
        "required": [
          "workspaceId"
        ],
        "type": "object",
        "properties": {
          "workspaceId": {
            "type": "string",
            "description": "The id of the workspace to migrate the UserInWorkspace to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false
      },
      "RegisterLoginForm": {
        "type": "object",
        "properties": {
          "origin": {
            "type": "string",
            "description": "The origin of the login to register.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResendInvitation": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "The id of the user to be invited.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "The model to resend the invitation email to a user."
      },
      "SetCustomSubdomainForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The subdomain hostname.\r\nMust be between 2 and 30 characters.",
            "example": "ncnstn"
          }
        },
        "additionalProperties": false,
        "description": "The model to set a custom subdomain."
      },
      "SocialConnection": {
        "type": "object",
        "properties": {
          "workspaceId": {
            "type": "string",
            "description": "The id of the workspace to invite the user to.\r\nIf not set, a new workspace will be created.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "invitationFlow": {
            "type": "string",
            "description": "The current invitation flow.\r\nUse 'invite' for an invitation from a system admin,\r\n'new_user_new_workspace' for an invitation when creating a workspace for a new user or\r\n'existing_user_new_workspace' when creating a workspace for an existing user.",
            "nullable": true,
            "example": "invite"
          },
          "roleId": {
            "type": "string",
            "description": "The id of the role to which the new user should be added.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "connectInviteCode": {
            "type": "string",
            "description": "The awork connect invite code.",
            "nullable": true
          },
          "passcode": {
            "type": "string",
            "description": "The bot prevention passcode.",
            "nullable": true
          },
          "provider": {
            "type": "string",
            "description": "The external provider used to log in.",
            "nullable": true,
            "example": "google"
          },
          "authorizationCode": {
            "type": "string",
            "description": "The authorization code with the user's consent.",
            "nullable": true,
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
          },
          "state": {
            "type": "string",
            "description": "The state parameter of the initial auth request.",
            "nullable": true,
            "example": "YWNjZXB0ZWQ9dHJ1ZQ=="
          },
          "idToken": {
            "type": "string",
            "description": "The IdToken if available.",
            "nullable": true,
            "example": "aWQ9NQ=="
          },
          "type": {
            "type": "string",
            "description": "The type of the connection. Either 'signup' or 'login'.",
            "nullable": true,
            "example": "login"
          },
          "invitationCode": {
            "type": "string",
            "description": "The InvitationCode code for the invite flow.",
            "nullable": true,
            "example": "a368cfdb4="
          },
          "referralCode": {
            "type": "string",
            "description": "The optional referral code for the invite flow.",
            "nullable": true,
            "example": "a368cfdb4="
          },
          "validateEmailDomain": {
            "type": "boolean",
            "description": "If the email domain should be validated against the public domain list",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the user.",
            "nullable": true,
            "example": "Carla"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the user.",
            "nullable": true,
            "example": "Creative"
          },
          "email": {
            "type": "string",
            "description": "The email of the user.",
            "nullable": true,
            "example": "carla.creative@ncnstn.com"
          }
        },
        "additionalProperties": false
      },
      "Subdomain": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The subdomain hostname.",
            "nullable": true,
            "example": "ncnstn"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Whether this is the default subdomain of the workspace.",
            "example": true
          },
          "id": {
            "type": "string",
            "description": "The id of the subdomain.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspaceId": {
            "type": "string",
            "description": "The id of the workspace this subdomain belongs to.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "The subdomain model."
      },
      "SubdomainBase": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The subdomain hostname.",
            "nullable": true,
            "example": "ncnstn"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Whether this is the default subdomain of the workspace.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "The base subdomain model."
      },
      "UserInWorkspace": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The id of the account.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "userId": {
            "type": "string",
            "description": "The id of the user.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspaceId": {
            "type": "string",
            "description": "The id of the workspace.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "workspaceName": {
            "type": "string",
            "description": "The name of the workspace.",
            "nullable": true,
            "example": "NCNSTN Brand Agency"
          },
          "workspaceDescription": {
            "type": "string",
            "description": "The description of the workspace.",
            "nullable": true,
            "example": "NCNSTN's main workspace"
          },
          "isApproved": {
            "type": "boolean",
            "description": "Whether the user has approved the invitation.",
            "example": true
          },
          "invitationFlow": {
            "type": "string",
            "description": "The invitation flow that was used to create the invitation.",
            "nullable": true,
            "example": "invite"
          },
          "isDeactivated": {
            "type": "boolean",
            "description": "Indicates if the user in the workspace is deactivated",
            "example": false
          },
          "lastLogin": {
            "type": "string",
            "description": "The date and time the user last logged into this workspace.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The user in workspace model assigns accounts to workspaces."
      },
      "Workspace": {
        "required": [
          "allowCredentialsLogin",
          "allowSocialLogin"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "type": "string",
            "description": "The workspace name. Optional.",
            "nullable": true,
            "example": "NCNSTN Creative Agency"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "description": "The workspace description. Optional.",
            "nullable": true,
            "example": "We create awesome digital experiences."
          },
          "language": {
            "maxLength": 25,
            "type": "string",
            "description": "The workspace language. Optional.",
            "nullable": true,
            "example": "de-DE"
          },
          "type": {
            "maxLength": 25,
            "type": "string",
            "description": "The workspace type / industry set during onboarding. Optional.",
            "nullable": true,
            "example": "creative-agency"
          },
          "size": {
            "maxLength": 100,
            "type": "string",
            "description": "The workspace size. Optional.",
            "nullable": true,
            "example": "15"
          },
          "goals": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The workspace team goals. Optional.",
            "nullable": true
          },
          "selfAttribution": {
            "maxLength": 100,
            "type": "string",
            "description": "The way the workspace creator learned awork, set during the onboarding. Optional.",
            "nullable": true
          },
          "previousTool": {
            "maxLength": 100,
            "type": "string",
            "description": "The project management tool used before awork, set during the onboarding. Optional.",
            "nullable": true
          },
          "department": {
            "maxLength": 100,
            "type": "string",
            "description": "The workspace creator's department, set during the onboarding. Optional.",
            "nullable": true,
            "example": "15"
          },
          "allowSocialLogin": {
            "type": "boolean",
            "description": "Whether the social login via apple and google is allowed."
          },
          "allowCredentialsLogin": {
            "type": "boolean",
            "description": "Whether the user can login with username and password."
          },
          "allowAutomaticScimUserBooking": {
            "type": "boolean",
            "description": "Whether the SCIM integration should be able to book additional user seats when provisioning and activating new users,\r\nor should return BadRequest.\r\nOnly admins are allowed to change this setting.",
            "nullable": true
          },
          "sameDomainSignupEnabled": {
            "type": "boolean",
            "description": "Whether same domain signup feature is enabled.\r\nOnly admins are allowed to change this setting.",
            "nullable": true
          },
          "sameDomainSignupRoleId": {
            "type": "string",
            "description": "Default Role for users who sign up through same domain signup.\r\nOnly admins are allowed to change this setting.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "sameDomainSignupDomains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Domains enabled for same domain signup feature.\r\nOnly admins are allowed to change this setting.",
            "nullable": true
          },
          "skipCreateDefaultWorkspaceData": {
            "type": "boolean",
            "description": "Whether to skip the creation of default workspace data.",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The id of the workspace.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "subdomains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubdomainBase"
            },
            "description": "The workspace's subdomains. Read-only.",
            "nullable": true
          },
          "memberCount": {
            "type": "integer",
            "description": "The amount of workspace members. Only visible when the user is authenticated. Read-only.",
            "format": "int32",
            "nullable": true,
            "example": 25
          },
          "lastUsed": {
            "type": "boolean",
            "description": "Whether this is the workspace the current user last logged in with.",
            "example": true
          },
          "lastLogin": {
            "type": "string",
            "description": "The date and time the user last logged in with this workspace, or the workspace was last accessed.",
            "format": "date-time",
            "nullable": true
          },
          "accountIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The ids of identities assigned to this workspace. Read-only.",
            "nullable": true
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the workspace has uploaded a workspace image.",
            "example": true
          },
          "createdOn": {
            "type": "string",
            "description": "The date this workspace was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this workspace.\r\nOnly set after the first invitation succeeded.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this workspace was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last updated this workspace.\r\nOnly set after the first invitation succeeded.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isTestWorkspace": {
            "type": "boolean",
            "description": "Whether the workspace is a test workspace.",
            "example": false
          },
          "isApproved": {
            "type": "boolean",
            "description": "Whether the user accepted the invitation to the workspace.",
            "example": true
          },
          "allowSSOLogin": {
            "type": "boolean",
            "description": "Whether the user can login via an external SSO provider.",
            "example": true
          },
          "isScimActivated": {
            "type": "boolean",
            "description": "Whether the workspace has SCIM user provisioning enabled."
          },
          "virtualMRR": {
            "type": "number",
            "description": "The virtual MRR calculated during onborading.",
            "format": "double",
            "nullable": true
          },
          "isMobileSignup": {
            "type": "boolean",
            "description": "The type of sign-up set during the onboarding.\r\nCan be: web, mobile, ...",
            "nullable": true
          },
          "isFreeMail": {
            "type": "boolean",
            "description": "Whether the domain of the account of the workspace creator is a freemail or a business domain.",
            "nullable": true
          },
          "isJoinable": {
            "type": "boolean",
            "description": "Whether this workspace has same domain sign up enabled and the account's email matches the permitted domains."
          },
          "isFull": {
            "type": "boolean",
            "description": "Whether this workspace is full and no more users can join. Used in same domain sign up flow.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The workspace GET model."
      },
      "WorkspaceDeleteForm": {
        "type": "object",
        "properties": {
          "deleteWorkspaceCode": {
            "type": "string",
            "description": "The token received via email to delete the workspace.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The workspace delete model."
      },
      "WorkspacePostForm": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "type": "string",
            "description": "The workspace name. Optional.",
            "nullable": true,
            "example": "NCNSTN Creative Agency"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "description": "The workspace description. Optional.",
            "nullable": true,
            "example": "We create awesome digital experiences."
          },
          "language": {
            "maxLength": 25,
            "type": "string",
            "description": "The workspace language. Optional.",
            "nullable": true,
            "example": "de-DE"
          },
          "type": {
            "maxLength": 25,
            "type": "string",
            "description": "The workspace type / industry set during onboarding. Optional.",
            "nullable": true,
            "example": "creative-agency"
          },
          "size": {
            "maxLength": 100,
            "type": "string",
            "description": "The workspace size. Optional.",
            "nullable": true,
            "example": "15"
          },
          "goals": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The workspace team goals. Optional.",
            "nullable": true
          },
          "selfAttribution": {
            "maxLength": 100,
            "type": "string",
            "description": "The way the workspace creator learned awork, set during the onboarding. Optional.",
            "nullable": true
          },
          "previousTool": {
            "maxLength": 100,
            "type": "string",
            "description": "The project management tool used before awork, set during the onboarding. Optional.",
            "nullable": true
          },
          "department": {
            "maxLength": 100,
            "type": "string",
            "description": "The workspace creator's department, set during the onboarding. Optional.",
            "nullable": true,
            "example": "15"
          }
        },
        "additionalProperties": false,
        "description": "The workspace POST model."
      },
      "WorkspacePutForm": {
        "required": [
          "allowCredentialsLogin",
          "allowSocialLogin"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 1000,
            "type": "string",
            "description": "The workspace name. Optional.",
            "nullable": true,
            "example": "NCNSTN Creative Agency"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "description": "The workspace description. Optional.",
            "nullable": true,
            "example": "We create awesome digital experiences."
          },
          "language": {
            "maxLength": 25,
            "type": "string",
            "description": "The workspace language. Optional.",
            "nullable": true,
            "example": "de-DE"
          },
          "type": {
            "maxLength": 25,
            "type": "string",
            "description": "The workspace type / industry set during onboarding. Optional.",
            "nullable": true,
            "example": "creative-agency"
          },
          "size": {
            "maxLength": 100,
            "type": "string",
            "description": "The workspace size. Optional.",
            "nullable": true,
            "example": "15"
          },
          "goals": {
            "maxItems": 25,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The workspace team goals. Optional.",
            "nullable": true
          },
          "selfAttribution": {
            "maxLength": 100,
            "type": "string",
            "description": "The way the workspace creator learned awork, set during the onboarding. Optional.",
            "nullable": true
          },
          "previousTool": {
            "maxLength": 100,
            "type": "string",
            "description": "The project management tool used before awork, set during the onboarding. Optional.",
            "nullable": true
          },
          "department": {
            "maxLength": 100,
            "type": "string",
            "description": "The workspace creator's department, set during the onboarding. Optional.",
            "nullable": true,
            "example": "15"
          },
          "allowSocialLogin": {
            "type": "boolean",
            "description": "Whether the social login via apple and google is allowed."
          },
          "allowCredentialsLogin": {
            "type": "boolean",
            "description": "Whether the user can login with username and password."
          },
          "allowAutomaticScimUserBooking": {
            "type": "boolean",
            "description": "Whether the SCIM integration should be able to book additional user seats when provisioning and activating new users,\r\nor should return BadRequest.\r\nOnly admins are allowed to change this setting.",
            "nullable": true
          },
          "sameDomainSignupEnabled": {
            "type": "boolean",
            "description": "Whether same domain signup feature is enabled.\r\nOnly admins are allowed to change this setting.",
            "nullable": true
          },
          "sameDomainSignupRoleId": {
            "type": "string",
            "description": "Default Role for users who sign up through same domain signup.\r\nOnly admins are allowed to change this setting.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "sameDomainSignupDomains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Domains enabled for same domain signup feature.\r\nOnly admins are allowed to change this setting.",
            "nullable": true
          },
          "skipCreateDefaultWorkspaceData": {
            "type": "boolean",
            "description": "Whether to skip the creation of default workspace data.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The workspace PUT model."
      },
      "WorkspaceSetting": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "minLength": 1,
            "type": "string",
            "description": "The unique key.",
            "example": "features"
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The value of the setting.",
            "example": "{ \"enabled\": true }"
          },
          "createdOn": {
            "type": "string",
            "description": "The date when the setting was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created the setting.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date when the setting was updated.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the setting.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "additionalProperties": false,
        "description": "The workspace setting model."
      },
      "WorkspaceSettingForm": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "minLength": 1,
            "type": "string",
            "description": "The unique key.",
            "example": "features"
          },
          "value": {
            "minLength": 1,
            "type": "string",
            "description": "The value of the setting.",
            "example": "{ \"enabled\": true }"
          }
        },
        "additionalProperties": false,
        "description": "The workspace setting model."
      },
      "WorkspaceSimplified": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the workspace.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The workspace name. Optional.",
            "nullable": true,
            "example": "NCNSTN Creative Agency"
          },
          "subdomains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubdomainBase"
            },
            "description": "The workspace's subdomains.",
            "nullable": true
          },
          "lastUsed": {
            "type": "boolean",
            "description": "Whether this is the workspace the current user last logged in with.",
            "example": true
          },
          "isApproved": {
            "type": "boolean",
            "description": "Indicates if the user accepted the invitation to the workspace.",
            "example": true
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the workspace has uploaded a workspace image.",
            "example": true
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this workspace was last modified.",
            "format": "date-time"
          },
          "isJoinable": {
            "type": "boolean",
            "description": "Whether this workspace has same domain sign up enabled and the account's email matches the permitted domains."
          },
          "isFull": {
            "type": "boolean",
            "description": "Whether this workspace is full and no more users can join. Used in same domain sign up flow.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The simplified workspace GET model for cases where the user is not logged in."
      },
      "WorkspaceWithSubscriptionDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the workspace.",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "The workspace name. Optional.",
            "nullable": true,
            "example": "NCNSTN Creative Agency"
          },
          "description": {
            "type": "string",
            "description": "The workspace description. Optional.",
            "nullable": true,
            "example": "We create awesome digital experiences."
          },
          "language": {
            "type": "string",
            "description": "The workspace language. Optional.",
            "nullable": true,
            "example": "de-DE"
          },
          "subdomains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubdomainBase"
            },
            "description": "The workspace's subdomains. Read-only.",
            "nullable": true
          },
          "lastUsed": {
            "type": "boolean",
            "description": "Whether this is the workspace the current user last logged in with.",
            "example": true
          },
          "hasImage": {
            "type": "boolean",
            "description": "Whether the workspace has uploaded a workspace image.",
            "example": true
          },
          "createdOn": {
            "type": "string",
            "description": "The date this workspace was created.",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created this workspace.\r\nOnly set after the first invitation succeeded.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "updatedOn": {
            "type": "string",
            "description": "The date this workspace was last modified.",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last updated this workspace.\r\nOnly set after the first invitation succeeded.",
            "format": "uuid",
            "nullable": true,
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "isTestWorkspace": {
            "type": "boolean",
            "description": "Indicates if the workspace is a test workspace.",
            "example": false
          },
          "planId": {
            "type": "string",
            "description": "The id of the plan",
            "nullable": true
          },
          "trialEnd": {
            "type": "string",
            "description": "The date the trial ends.",
            "format": "date-time",
            "nullable": true
          },
          "contractEnd": {
            "type": "string",
            "description": "The date the contract ends.",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "The status of the subscription.",
            "nullable": true,
            "example": "Active"
          },
          "usedUserSeats": {
            "type": "integer",
            "description": "The amount of used seats.",
            "format": "int32",
            "example": 25
          }
        },
        "additionalProperties": false
      }
    },
    "parameters": {
      "page": {
        "name": "page",
        "in": "query",
        "description": "Page number for pagination",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 1
        }
      },
      "pageSize": {
        "name": "pageSize",
        "in": "query",
        "description": "Number of items per page",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 10
        }
      },
      "orderby": {
        "name": "orderby",
        "in": "query",
        "description": "The properties to order by",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "filterby": {
        "name": "filterby",
        "in": "query",
        "description": "The filter expression to filter by",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://api.awork.com/accounts/authorize",
            "tokenUrl": "https://api.awork.com/accounts/token",
            "scopes": {
              "full_access": "Grants full access",
              "offline_access": "Grants continued access with a refresh token"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "bearer": [
        "full_access",
        "offline_access"
      ]
    },
    {
      "oauth2": [
        "full_access",
        "offline_access"
      ]
    }
  ],
  "tags": [
    {
      "name": "Accounts",
      "description": "The accounts endpoints allow you to manage the basic account details of a user."
    },
    {
      "name": "ClientApplications",
      "description": "Client applications are important for the external login flow used by your applications. These endpoints allow you to manage the client applications registered by your workspace."
    },
    {
      "name": "AbsenceRegions",
      "description": "An absence region can be used to define the country/region where the employee is working and as such is subject to the labor laws of that country/region.\n                    This will define the public holidays entitlements for employees. Can be used to define regional workspace absences as well."
    },
    {
      "name": "Absences",
      "description": "The absence endpoints allow you to manage absences for users."
    },
    {
      "name": "ApiUsers",
      "description": "API users are required to create API keys. Changes made by an API client are shown in the UI as the respective API user."
    },
    {
      "name": "AssignedTasks",
      "description": "The assigned tasks endpoints allow you to get all assigned tasks of a user.\n                                Project tasks are only visible if the related project is in progress."
    },
    {
      "name": "ChecklistItems",
      "description": "The checklist items endpoints can be used for managing the checklist items of a task."
    },
    {
      "name": "Companies",
      "description": "The company endpoints allow you to add and manage companies and their details."
    },
    {
      "name": "CompanyTags",
      "description": "The endpoint to manage the tags."
    },
    {
      "name": "CustomFields",
      "description": "Custom fields are used to extend tasks and projects with additional information.\n        They can be used to store additional information. Those are the shared endpoints to work with custom field definitions."
    },
    {
      "name": "Dashboards",
      "description": "The dashboards endpoints allow you to work with user's dashboards."
    },
    {
      "name": "Documents",
      "description": "The documents endpoints allow you to create and manage documents, their versions and related entities such as contributors or connected teams."
    },
    {
      "name": "DocumentSpaces",
      "description": "The document spaces endpoints allow you to create and manage document spaces and related entities such as contributors or connected teams."
    },
    {
      "name": "Permissions",
      "description": "The permissions endpoints provide the permission information of the workspace.\n                             That includes the complete permission set of the currently logged-in user as well as all available features."
    },
    {
      "name": "PrivateTasks",
      "description": "Private tasks belong to a single user.\n                             Only the users themselves have access to their tasks and they can only be assigned to them.\n                             It is possible to create and assign private tasks to another user in which case both users have access to the task."
    },
    {
      "name": "ProjectMembers",
      "description": "Project Members feature allows you to manage the members of a project, including adding users, assigning roles, and setting responsible members. Only users with the appropriate permissions can add or modify project members. Roles and responsibilities are enforced according to project type and permissions."
    },
    {
      "name": "ProjectMilestones",
      "description": "The project milestone endpoints allow you to work with the basic project milestone data."
    },
    {
      "name": "ProjectMilestoneTemplates",
      "description": "Endpoints to manage project milestone templates. From these templates, project milestones can be created,\n                        when you create a project with a project template."
    },
    {
      "name": "ProjectRoles",
      "description": "The project roles endpoints allow you to define roles for your project members\n                             You can assign members to these roles on each project.\n                             If the roles are linked to the project types then the roles are available in every project using this type.\n                             When you want to delete a project role which is still in use, you are required to specify which role the currently assigned members should be assigned to instead."
    },
    {
      "name": "Projects",
      "description": "The projects endpoints allow you to work with the basic project data.\n                             If you don't assign a customer to the project, the project will be an internal project.\n                             In addition to the normal operation you can handle the project members and tags of the projects.\n                             When you assign a user to this project as a project member, you need to specify a project role for this project member. The available roles depend on the type of the project.\n                             You can also make one member responsible for the project, which means that we will notify this person if anything of interest happens in the project.\n                             The tags help you to add additional values to your projects and to find them faster.\n                             If you create new tags, they will be available for all other projects, too."
    },
    {
      "name": "ProjectStatuses",
      "description": "The project status endpoints allow you to define statuses for projects.\n                             A status defines the current situation of a project.\n                             The statuses of a project type have an order which defines the flow the project typically goes through.\n                             Statuses can also be unlinked from the typical flow."
    },
    {
      "name": "ProjectTasks",
      "description": "The project tasks are linked to projects.\n                            Only members of the project or users with project management 'read' permissions have access to these tasks."
    },
    {
      "name": "ProjectTemplates",
      "description": "The project templates endpoints allow you to define different templates for projects."
    },
    {
      "name": "ProjectTypes",
      "description": "The project types endpoints allow you to define different types for projects.\n                             The project types contain the basic information of the project.\n                             This includes the project roles, statuses and status orders."
    },
    {
      "name": "Retainers",
      "description": "Retainers are used for projects with recurring budgets. Currently only hourly based monthly recurring budgets are supported."
    },
    {
      "name": "Roles",
      "description": "The roles endpoints allow you to configure the permissions of users.\n            You have the possibility to manage roles and assign users to these roles."
    },
    {
      "name": "Sync",
      "description": "Provides generic sync endpoints for entity synchronization."
    },
    {
      "name": "TaskBundles",
      "description": "Task bundles are used to manage task templates, task list templates and task dependency templates.\n        They can be imported into projects and simplify reoccuring processes."
    },
    {
      "name": "TaskDependencies",
      "description": "The TaskDependencies endpoints allow you to get all task dependencies of a project or a task.\n                    A task can have multiple predecessors and multiple successors through separate dependency relationships."
    },
    {
      "name": "TaskDependencyTemplates",
      "description": "This controller is used to manage task dependency templates. A task dependency template belongs to one task bundle\n                        and connects two task templates from the same task bundle with each other. When a project gets created from a project template with task dependency templates,\n                        these templates get converted to actual task dependencies."
    },
    {
      "name": "TaskLists",
      "description": "Task lists are a way to group tasks into user-defined lists.\n                            Task lists are currently available in projects and for users.\n                            This way, each project and each user can have a set of ordered task lists.\n                            Task lists can be reordered as well as the tasks within the list.\n                            Since tasks can be in multiple lists, the order is only applied to one list and does not affect others."
    },
    {
      "name": "Tasks",
      "description": "The Tasks endpoints can be used for general task operations and batch operations.\n        The batch operations include changing the task status, assigning users and more."
    },
    {
      "name": "TasksBatch",
      "description": "Controller that offers batch operations for tasks."
    },
    {
      "name": "TaskSchedules",
      "description": ""
    },
    {
      "name": "TaskTemplates",
      "description": "The task templates endpoints can be used for managing task templates inside task bundles."
    },
    {
      "name": "TaskViews",
      "description": "Task views are saved filters on project tasks.\n                             They can be stored by users and shared within the workspace. Users can subscribe to shared task views to use them."
    },
    {
      "name": "Teams",
      "description": "The teams endpoints are used to manage the details of your team."
    },
    {
      "name": "TimeBookings",
      "description": "The time bookings are used as a simple way to book a user's time for a specific time frame.\nIt can be related to a project or not.\nThose bookings are then used in the workload to calculate the estimated load of a user."
    },
    {
      "name": "TimeEntries",
      "description": "There are some endpoints which have a V2 version. For those the V1 endpoints will be deprecated in the future.\n                    Please use the V2 endpoints instead.\n                    The endpoints can be used for general operations on existing time entries.\n                    A time entry can be linked to a task and / or project, although it can also be created for the user themselves without any entity link.\n                    If the time entry is linked to a project it is also indirectly linked to the company of that project.\n                    Similarly, the time entry is automatically linked to the project of the the task."
    },
    {
      "name": "TimeReports",
      "description": "The endpoints to manage the time reports."
    },
    {
      "name": "TimeTracking",
      "description": "The v1 versions of these endpoints will be deprecated at some point. Please migrate to the V2 versions.\n                These endpoints can be used to start, stop, pause or resume a time tracking as well as to get the last time tracking of a user."
    },
    {
      "name": "TypeOfWork",
      "description": "The type of work endpoints allow you to manage your types of work. They are helpful to describe the type of a task or a time entry."
    },
    {
      "name": "UserCapacity",
      "description": "The user capacity endpoints allow you to define the work capacity of users."
    },
    {
      "name": "Users",
      "description": "The users endpoints allow you to manage the users of your workspace as well as their contact details."
    },
    {
      "name": "UserTags",
      "description": "The endpoint to manage the tags."
    },
    {
      "name": "Workload",
      "description": ""
    },
    {
      "name": "WorkspaceAbsences",
      "description": "Use those endpoints to define workspace wide absences. A WorkspaceAbsence is an absence that is applied to all the users of the workspace. \n                  It is useful for defining company specific events/holidays, for example."
    },
    {
      "name": "Files",
      "description": "The file endpoints to get non shared and non temporay files."
    },
    {
      "name": "FileUpload",
      "description": "These endpoints can be used to upload files to the workspace."
    },
    {
      "name": "Images",
      "description": "The image endpoints are used to upload and download profile images, for example for users, projects and your workspace.\n                             These endpoints also allow you to crop and scale the image to the size you need."
    },
    {
      "name": "SharedFiles",
      "description": "These file endpoints are used to get shared files, for example to provide images in emails."
    },
    {
      "name": "TemporaryFiles",
      "description": "The temporary file endpoints allow you to upload and update files \n    that do not have a connection to any entity. The files can be linked to an entity later.\n    They don’t show up in awork before they are either linked to a file or marked as a global file. \n    Only the user who uploaded the file has access to the temporary file."
    },
    {
      "name": "ProjectActions",
      "description": "The actions endpoints allow you to manage the actions for automations in awork."
    },
    {
      "name": "ProjectAutomations",
      "description": "The automation endpoints allow you to manage the automations for projects in awork."
    },
    {
      "name": "ProjectTemplateActions",
      "description": "The actions endpoints allow you to manage the actions for automations of project templates in awork."
    },
    {
      "name": "ProjectTemplateAutomations",
      "description": "The automation endpoints allow you to manage the automations for projects in awork."
    },
    {
      "name": "Webhooks",
      "description": "Webhooks can be used to get notified about events happening.\n                                These endpoints allow you to configure webhooks.\n                                Read more about webhooks in the developer documentation above."
    },
    {
      "name": "Autopilot",
      "description": "These endpoints allow you to manage the awork autopilot for projects."
    },
    {
      "name": "Search",
      "description": "The search controller provides endpoints to do full-text searching in a dedicated search store.\n    If search data becomes inconsistent or corrupted the reindex endpoints can be used to rebuild it."
    },
    {
      "name": "Invitations",
      "description": "The invitation endpoints are used to invite users to a workspace. You can invite a new user or an existing user to a workspace. The invitation code is used to identify the workspace and the account to which the user should be linked. The invitation code is encrypted and can only be decrypted by the service. The invitation code is valid for 24 hours."
    },
    {
      "name": "Workspaces",
      "description": "The workspaces endpoints are used to manage the details of your workspace."
    }
  ]
}